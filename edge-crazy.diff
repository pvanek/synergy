Index: cmake/CMakeLists_lib.txt
===================================================================
--- cmake/CMakeLists_lib.txt	(.../edge)	(revision 365)
+++ cmake/CMakeLists_lib.txt	(.../crazy)	(revision 365)
@@ -183,9 +183,6 @@
 	${root_lib}/platform/CXWindowsScreen.cpp
 	${root_lib}/platform/CXWindowsScreenSaver.cpp
 	${root_lib}/platform/CXWindowsUtil.cpp
-	${root_lib}/platform/CXWindowsAppUtil.cpp
-	${root_lib}/platform/CXWindowsClientApp.cpp
-	${root_lib}/platform/CXWindowsServerApp.cpp
 )
 
 SET(src_lib_platform_mswindows
@@ -201,9 +198,6 @@
 	${root_lib}/platform/CMSWindowsScreen.cpp
 	${root_lib}/platform/CMSWindowsScreenSaver.cpp
 	${root_lib}/platform/CMSWindowsUtil.cpp
-	${root_lib}/platform/CMSWindowsAppUtil.cpp
-	${root_lib}/platform/CMSWindowsClientApp.cpp
-	${root_lib}/platform/CMSWindowsServerApp.cpp
 )
 
 SET(inc_lib_platform_mswindows
@@ -219,9 +213,6 @@
 	${root_lib}/platform/CMSWindowsScreen.h
 	${root_lib}/platform/CMSWindowsScreenSaver.h
 	${root_lib}/platform/CMSWindowsUtil.h
-	${root_lib}/platform/CMSWindowsAppUtil.h
-	${root_lib}/platform/CMSWindowsClientApp.h
-	${root_lib}/platform/CMSWindowsServerApp.h
 )
 
 SET(src_lib_platform_hook
@@ -242,9 +233,6 @@
 	${root_lib}/platform/COSXScreen.cpp
 	${root_lib}/platform/COSXScreenSaver.cpp
 	${root_lib}/platform/COSXScreenSaverUtil.m
-	${root_lib}/platform/COSXAppUtil.cpp
-	${root_lib}/platform/COSXClientApp.cpp
-	${root_lib}/platform/COSXServerApp.cpp
 )
 
 SET(src_lib_server
@@ -278,10 +266,6 @@
 )
 
 SET(src_lib_synergy
-	${root_lib}/synergy/CAppUtil.cpp
-	${root_lib}/synergy/CApp.cpp
-	${root_lib}/synergy/CClientApp.cpp
-	${root_lib}/synergy/CServerApp.cpp
 	${root_lib}/synergy/CClipboard.cpp
 	${root_lib}/synergy/CKeyMap.cpp
 	${root_lib}/synergy/CKeyState.cpp
@@ -300,10 +284,6 @@
 )
 
 SET(inc_lib_synergy
-	${root_lib}/synergy/CAppUtil.h
-	${root_lib}/synergy/CApp.h
-	${root_lib}/synergy/CClientApp.h
-	${root_lib}/synergy/CServerApp.h
 	${root_lib}/synergy/CClipboard.h
 	${root_lib}/synergy/CKeyMap.h
 	${root_lib}/synergy/CKeyState.h
@@ -346,17 +326,9 @@
 	LIST(APPEND src_lib ${src_lib_arch_unix})
 
 	IF(APPLE)
-		LIST(APPEND src_lib
-			${src_lib_platform_carbon}
-			${inc_lib_synergy_carbon}
-			${src_lib_synergy_carbon}
-		)
+	LIST(APPEND src_lib ${src_lib_platform_carbon})
 	ELSE(APPLE)
-		LIST(APPEND src_lib
-			${src_lib_platform_xwindows}
-			${inc_lib_synergy_xwindows}
-			${src_lib_synergy_xwindows}
-		)
+	LIST(APPEND src_lib ${src_lib_platform_xwindows})
 	ENDIF(APPLE)
 
 ENDIF(UNIX)
@@ -375,8 +347,6 @@
 		${src_lib_arch_windows}
 		${inc_lib_platform_mswindows}
 		${src_lib_platform_mswindows}
-		${inc_lib_synergy_mswindows}
-		${src_lib_synergy_mswindows}
 	)
 ENDIF(WIN32)
 

Property changes on: cmake
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)


Property changes on: gui\dist\debian
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)


Property changes on: gui\dist\windows
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)


Property changes on: gui\dist
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)


Property changes on: gui\src
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)


Property changes on: gui\res\mac
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)


Property changes on: gui\res\icons\16x16
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)


Property changes on: gui\res\icons\64x64
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)


Property changes on: gui\res\icons
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)


Property changes on: gui\res\win
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)


Property changes on: gui\res
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)


Property changes on: gui
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)

Index: hm.py
===================================================================
--- hm.py	(.../edge)	(revision 365)
+++ hm.py	(.../crazy)	(revision 365)
@@ -143,18 +143,9 @@
 		'Example: %s configure'
 		) % (this_cmd, this_cmd)
 
-def configure(generator = None, argv = None):
+def configure(generator = None):
 	
-	vs_analyze = False
-	
-	if argv and len(argv) > 2:
-		for arg in argv[2:]:
-			if arg == "--analyze":
-				vs_analyze = True
-			elif generator == None:
-				generator = arg
-	
-	err = configure_internal(generator = generator, vs_analyze = vs_analyze)
+	err = configure_internal(generator)
 
 	if err == 0:
 		print ('Configure complete!\n\n'
@@ -165,42 +156,17 @@
 	else:
 		return False
 
-def delete_cmake_cache():
-	cmakecache_filename = '%s/CMakeCache.txt' % bin_dir
-	if os.path.exists(cmakecache_filename):
-		print "Removing %s, since generator changed." % cmakecache_filename
-		os.remove(cmakecache_filename)
-		
-def configure_internal(generator = None, vs_analyze = False):
+def configure_internal(generator = None):
 
 	ensure_setup_latest(generator)
 	
-	if generator:
-		# has generator changed since `setup` was called?
-		if generator != get_generator():
-			# if so, delete cache so cmake doesn't complain
-			delete_cmake_cache()
+	generator = get_generator()
+	if generator != '':
+		cmake_args = '%s -G "%s"' % (source_dir, generator)
 	else:
-		# but if no generator was specific, use the one we chose earlier
-		generator = get_generator()
+		cmake_args = source_dir
 	
-	cmake_args = ''
-	if generator:
-		cmake_args = '-G "%s" ' % (generator)
-	
-	vs_args_extra = ''
-		
-	# if we want to enable vs analyze, tell cmake so we can configure the vs 
-	# solution to use the /analyze arg (only works in x86 team editions)
-	if vs_analyze:
-		vs_args_extra += '/analyze '		
-	
-	# add any extra args to vs - and even if vs_args_extra has no value, we 
-	# still want to pass it, since CMake "cleverly" remembers the last arg
-	# passed to it (so we're kind of undoing this behaviour in this case)
-	cmake_args += '-D VS_ARGS_EXTRA="%s"' % vs_args_extra
-	
-	cmake_cmd_string = '%s %s "%s"' % (cmake_cmd, cmake_args, source_dir)
+	cmake_cmd_string = '%s %s' % (cmake_cmd, cmake_args)
 
 	print "Configuring with CMake (%s)..." % cmake_cmd_string
 
@@ -481,7 +447,7 @@
 			if cmd in ['about', 'info']:
 				about()
 			elif cmd in ['configure', 'conf']:
-				configure(argv = argv)
+				configure(arg_2)
 			elif cmd in ['build']:
 				build(arg_2)
 			elif cmd in ['open']:
@@ -549,7 +515,7 @@
 			path = application + ' ' + path
 		os.system(path)
 		return True
-		
+
 def setup(generator = None):
 	print "Running setup..."
 
@@ -585,7 +551,10 @@
 
 	write_config(config)
 
-	delete_cmake_cache()
+	cmakecache_filename = '%s/CMakeCache.txt' % bin_dir
+	if os.path.exists(cmakecache_filename):
+		print "Removing %s, since generator changed." % cmakecache_filename
+		os.remove(cmakecache_filename)
 
 	print "\nSetup complete."
 
Index: deploy-restart-client.cmd
===================================================================
--- deploy-restart-client.cmd	(.../edge)	(revision 0)
+++ deploy-restart-client.cmd	(.../crazy)	(revision 365)
@@ -0,0 +1,12 @@
+@echo off
+xcopy /DHRY *.exe \\192.168.1.100\c$\synergy\
+xcopy /DHRY *.dll \\192.168.1.100\c$\synergy\
+xcopy /DHRY *.cmd \\192.168.1.100\c$\synergy\
+xcopy /DHRY *.manifest \\192.168.1.100\c$\synergy\
+
+
+pskill \\192.168.1.100 synergyc 2>NUL
+::psexec \\192.168.1.100 -w "c:\\synergy" C:\synergy\synergyc.exe
+
+
+

Property changes on: win32util
___________________________________________________________________
Deleted: svn:ignore
   - autodep.obj
autodep.exe



Property changes on: dist\nullsoft\files
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)

Index: cmd/launcher/CHotkeyOptions.cpp
===================================================================
--- cmd/launcher/CHotkeyOptions.cpp	(.../edge)	(revision 365)
+++ cmd/launcher/CHotkeyOptions.cpp	(.../crazy)	(revision 365)
@@ -13,7 +13,6 @@
  */
 
 #include "CArchMiscWindows.h"
-#include "CMSWindowsKeyState.h"
 #include "CConfig.h"
 #include "CHotkeyOptions.h"
 #include "CStringUtil.h"
@@ -717,8 +716,8 @@
 		case kKeyAlt_R:
 		case kKeyMeta_L:
 		case kKeyMeta_R:
-		case kKeySuper_L:
-		case kKeySuper_R:
+//		case kKeySuper_L:
+//		case kKeySuper_R:
 		case kKeyCapsLock:
 		case kKeyNumLock:
 		case kKeyScrollLock:
@@ -1294,8 +1293,8 @@
 		case kKeyAlt_R:
 		case kKeyMeta_L:
 		case kKeyMeta_R:
-		case kKeySuper_L:
-		case kKeySuper_R:
+//		case kKeySuper_L:
+//		case kKeySuper_R:
 		case kKeyCapsLock:
 		case kKeyNumLock:
 		case kKeyScrollLock:
Index: cmd/synergyc/synergyc.cpp
===================================================================
--- cmd/synergyc/synergyc.cpp	(.../edge)	(revision 365)
+++ cmd/synergyc/synergyc.cpp	(.../crazy)	(revision 365)
@@ -43,43 +43,66 @@
 #include "CMSWindowsClientTaskBarReceiver.h"
 #include "resource.h"
 #include <conio.h>
-#include "CMSWindowsClientApp.h"
-#include "CMSWindowsAppUtil.h"
 #undef DAEMON_RUNNING
 #define DAEMON_RUNNING(running_) CArchMiscWindows::daemonRunning(running_)
 #elif WINAPI_XWINDOWS
 #include "CXWindowsScreen.h"
 #include "CXWindowsClientTaskBarReceiver.h"
-#include "CXWindowsClientApp.h"
-#include "CXWindowsAppUtil.h"
 #elif WINAPI_CARBON
 #include "COSXScreen.h"
 #include "COSXClientTaskBarReceiver.h"
-#include "COSXClientApp.h"
-#include "COSXAppUtil.h"
 #endif
 
 // platform dependent name of a daemon
 #if SYSAPI_WIN32
 #define DAEMON_NAME "Synergy+ Client"
-#define DAEMON_INFO "Allows another computer to share it's keyboard and mouse with this computer."
 #elif SYSAPI_UNIX
 #define DAEMON_NAME "synergyc"
 #endif
 
 typedef int (*StartupFunc)(int, char**);
 static bool startClient();
+static void parse(int argc, const char* const* argv);
 
-#if WINAPI_MSWINDOWS
-CMSWindowsClientApp app;
-#elif WINAPI_XWINDOWS
-CXWindowsClientApp app;
-#elif WINAPI_CARBON
-COSXClientApp app;
-#endif
+//
+// program arguments
+//
 
-#define ARG ((CClientApp::CArgs*)&app.args())
+#define ARG CArgs::s_instance
 
+class CArgs {
+public:
+	CArgs() :
+		m_pname(NULL),
+		m_backend(false),
+		m_restartable(true),
+		m_daemon(true),
+		m_yscroll(0),
+		m_logFilter(NULL),
+		m_display(NULL),
+		m_serverAddress(NULL),
+		m_logFile(NULL)
+		{ s_instance = this; }
+	  ~CArgs() { s_instance = NULL; }
+
+public:
+	static CArgs*		s_instance;
+	const char* 		m_pname;
+	bool				m_backend;
+	bool				m_restartable;
+	bool				m_daemon;
+	int 				m_yscroll;
+	const char* 		m_logFilter;
+	const char*			m_display;
+	CString 			m_name;
+	CNetworkAddress* 	m_serverAddress;
+	const char*			m_logFile;
+
+};
+
+CArgs*					CArgs::s_instance = NULL;
+
+
 //
 // platform dependent factories
 //
@@ -445,7 +468,7 @@
 	}
 
 	// parse command line
-	app.parse(argc, argv);
+	parse(argc, argv);
 
 	// daemonize if requested
 	if (ARG->m_daemon) {
@@ -488,7 +511,304 @@
 	return result;
 }
 
+
 //
+// command line parsing
+//
+
+#define BYE "\nTry `%s --help' for more information."
+
+#if SYSAPI_WIN32
+static
+void 
+exitPause(int code) 
+{
+	CString name;
+	CArchMiscWindows::getParentProcessName(name);
+
+	// if the user did not launch from the command prompt (i.e. it was launched
+	// by double clicking, or through a debugger), allow user to read any error
+	// messages (instead of the window closing automatically).
+	if (name != "cmd.exe") {
+		std::cout << std::endl << "Press any key to exit...";
+		int c = _getch();
+	}
+
+	exit(code);
+}
+static void	(*bye)(int) = &exitPause;
+#else
+static void	(*bye)(int) = &exit;
+#endif
+
+static
+void
+version()
+{
+	LOG((CLOG_PRINT "%s %s, protocol version %d.%d\n%s",
+							ARG->m_pname,
+							kVersion,
+							kProtocolMajorVersion,
+							kProtocolMinorVersion,
+							kCopyright));
+}
+
+static
+void
+help()
+{
+#if WINAPI_XWINDOWS
+#  define USAGE_DISPLAY_ARG		\
+" [--display <display>]"
+#  define USAGE_DISPLAY_INFO	\
+"      --display <display>  connect to the X server at <display>\n"
+#else
+#  define USAGE_DISPLAY_ARG
+#  define USAGE_DISPLAY_INFO
+#endif
+
+	char buffer[2000];
+	sprintf(
+		buffer,
+		"Usage: %s"
+		" [--daemon|--no-daemon]"
+		" [--debug <level>]"
+		USAGE_DISPLAY_ARG
+		" [--name <screen-name>]"
+		" [--yscroll <delta>]"
+		" [--restart|--no-restart]"
+		" <server-address>"
+		"\n\n"
+		"Start the synergy mouse/keyboard sharing server.\n"
+		"\n"
+		"  -d, --debug <level>      filter out log messages with priorty below level.\n"
+		"                           level may be: FATAL, ERROR, WARNING, NOTE, INFO,\n"
+		"                           DEBUG, DEBUG1, DEBUG2.\n"
+		USAGE_DISPLAY_INFO
+		"  -f, --no-daemon          run the client in the foreground.\n"
+		"*     --daemon             run the client as a daemon.\n"
+		"  -n, --name <screen-name> use screen-name instead the hostname to identify\n"
+		"                           ourself to the server.\n"
+		"      --yscroll <delta>    defines the vertical scrolling delta, which is\n"
+		"                           120 by default.\n"
+		"  -1, --no-restart         do not try to restart the client if it fails for\n"
+		"                           some reason.\n"
+		"*     --restart            restart the client automatically if it fails.\n"
+		"  -l  --log <file>         write log messages to file.\n"
+		"  -h, --help               display this help and exit.\n"
+		"      --version            display version information and exit.\n"
+		"\n"
+		"* marks defaults.\n"
+		"\n"
+		"The server address is of the form: [<hostname>][:<port>].  The hostname\n"
+		"must be the address or hostname of the server.  The port overrides the\n"
+		"default port, %d.\n"
+		"\n"
+		"Where log messages go depends on the platform and whether or not the\n"
+		"client is running as a daemon.",
+		ARG->m_pname, kDefaultPort
+	);
+	
+	std::cout << buffer << std::endl;
+}
+
+static
+bool
+isArg(int argi, int argc, const char* const* argv,
+				const char* name1, const char* name2,
+				int minRequiredParameters = 0)
+{
+	if ((name1 != NULL && strcmp(argv[argi], name1) == 0) ||
+		(name2 != NULL && strcmp(argv[argi], name2) == 0)) {
+		// match.  check args left.
+		if (argi + minRequiredParameters >= argc) {
+			LOG((CLOG_PRINT "%s: missing arguments for `%s'" BYE,
+								ARG->m_pname, argv[argi], ARG->m_pname));
+			bye(kExitArgs);
+		}
+		return true;
+	}
+
+	// no match
+	return false;
+}
+
+static
+void
+parse(int argc, const char* const* argv)
+{
+	bool argsValid = (ARG->m_pname != NULL) && (argv != NULL) && (argc >= 1);
+	assert(argsValid);
+
+	if (!argsValid) {
+		// fail silently for release (avoids compiler warning)
+		return;
+	}
+
+	// set defaults
+	ARG->m_name = ARCH->getHostName();
+
+	// parse options
+	int i;
+	for (i = 1; i < argc; ++i) {
+		if (isArg(i, argc, argv, "-d", "--debug", 1)) {
+			// change logging level
+			ARG->m_logFilter = argv[++i];
+		}
+
+		else if (isArg(i, argc, argv, "-n", "--name", 1)) {
+			// save screen name
+			ARG->m_name = argv[++i];
+		}
+
+		else if (isArg(i, argc, argv, NULL, "--camp")) {
+			// ignore -- included for backwards compatibility
+		}
+
+		else if (isArg(i, argc, argv, NULL, "--no-camp")) {
+			// ignore -- included for backwards compatibility
+		}
+
+		else if (isArg(i, argc, argv, "-f", "--no-daemon")) {
+			// not a daemon
+			ARG->m_daemon = false;
+		}
+
+		else if (isArg(i, argc, argv, NULL, "--daemon")) {
+			// daemonize
+			ARG->m_daemon = true;
+		}
+
+#if WINAPI_XWINDOWS
+		else if (isArg(i, argc, argv, "-display", "--display", 1)) {
+			// use alternative display
+			ARG->m_display = argv[++i];
+		}
+#endif
+
+		else if (isArg(i, argc, argv, NULL, "--yscroll", 1)) {
+			// define scroll 
+			ARG->m_yscroll = atoi(argv[++i]);
+		}
+		
+		else if (isArg(i, argc, argv, "-l", "--log", 1)) {
+			ARG->m_logFile = argv[++i];
+		}
+
+		else if (isArg(i, argc, argv, "-1", "--no-restart")) {
+			// don't try to restart
+			ARG->m_restartable = false;
+		}
+
+		else if (isArg(i, argc, argv, NULL, "--restart")) {
+			// try to restart
+			ARG->m_restartable = true;
+		}
+
+		else if (isArg(i, argc, argv, "-z", NULL)) {
+			ARG->m_backend = true;
+		}
+
+		else if (isArg(i, argc, argv, "-h", "--help")) {
+			help();
+			bye(kExitSuccess);
+		}
+
+		else if (isArg(i, argc, argv, NULL, "--version")) {
+			version();
+			bye(kExitSuccess);
+		}
+
+		else if (isArg(i, argc, argv, "--", NULL)) {
+			// remaining arguments are not options
+			++i;
+			break;
+		}
+
+		else if (argv[i][0] == '-') {
+			LOG((CLOG_PRINT "%s: unrecognized option `%s'" BYE,
+								ARG->m_pname, argv[i], ARG->m_pname));
+			bye(kExitArgs);
+		}
+
+		else {
+			// this and remaining arguments are not options
+			break;
+		}
+	}
+
+	// exactly one non-option argument (server-address)
+	if (i == argc) {
+		LOG((CLOG_PRINT "%s: a server address or name is required" BYE,
+								ARG->m_pname, ARG->m_pname));
+		bye(kExitArgs);
+	}
+	if (i + 1 != argc) {
+		LOG((CLOG_PRINT "%s: unrecognized option `%s'" BYE,
+								ARG->m_pname, argv[i], ARG->m_pname));
+		bye(kExitArgs);
+	}
+
+	// save server address
+	try {
+		*ARG->m_serverAddress = CNetworkAddress(argv[i], kDefaultPort);
+		ARG->m_serverAddress->resolve();
+	}
+	catch (XSocketAddress& e) {
+		// allow an address that we can't look up if we're restartable.
+		// we'll try to resolve the address each time we connect to the
+		// server.  a bad port will never get better.  patch by Brent
+		// Priddy.
+		if (!ARG->m_restartable || e.getError() == XSocketAddress::kBadPort) {
+			LOG((CLOG_PRINT "%s: %s" BYE,
+								ARG->m_pname, e.what(), ARG->m_pname));
+			bye(kExitFailed);
+		}
+	}
+
+	// increase default filter level for daemon.  the user must
+	// explicitly request another level for a daemon.
+	if (ARG->m_daemon && ARG->m_logFilter == NULL) {
+#if SYSAPI_WIN32
+		if (CArchMiscWindows::isWindows95Family()) {
+			// windows 95 has no place for logging so avoid showing
+			// the log console window.
+			ARG->m_logFilter = "FATAL";
+		}
+		else
+#endif
+		{
+			ARG->m_logFilter = "NOTE";
+		}
+	}
+
+	// set log filter
+	if (!CLOG->setFilter(ARG->m_logFilter)) {
+		LOG((CLOG_PRINT "%s: unrecognized log level `%s'" BYE,
+								ARG->m_pname, ARG->m_logFilter, ARG->m_pname));
+		bye(kExitArgs);
+	}
+
+	// identify system
+	LOG((CLOG_INFO "%s Client on %s %s", kAppVersion, ARCH->getOSName().c_str(), ARCH->getPlatformName().c_str()));
+
+#ifdef WIN32
+#ifdef _AMD64_
+	LOG((CLOG_WARN "This is an experimental x64 build of %s. Use it at your own risk.", kApplication));
+#endif
+#endif
+
+	if (CLOG->getFilter() > CLog::kDEBUG) {
+		if (ARG->m_logFile == NULL) {
+			LOG((CLOG_WARN "verbose debug messages will not be sent to the console (use file logging)"));
+		} else {
+			LOG((CLOG_INFO "verbose debug messages will be sent to file: %s", ARG->m_logFile));
+		}
+	}
+}
+
+
+//
 // platform dependent entry points
 //
 
@@ -544,7 +864,7 @@
 int
 daemonNTMainLoop(int argc, const char** argv)
 {
-	app.parse(argc, argv);
+	parse(argc, argv);
 	ARG->m_backend = false;
 	return CArchMiscWindows::runDaemon(mainLoop);
 }
@@ -554,7 +874,7 @@
 daemonNTStartup(int, char**)
 {
 	CSystemLogger sysLogger(DAEMON_NAME, false);
-	app.m_bye = &byeThrow;
+	bye = &byeThrow;
 	return ARCH->daemonize(DAEMON_NAME, &daemonNTMainLoop);
 }
 
@@ -565,7 +885,7 @@
 	ARCH->showConsole(false);
 
 	// parse command line
-	app.parse(argc, argv);
+	parse(argc, argv);
 
 	// never daemonize
 	return mainLoop();
@@ -581,15 +901,11 @@
 }
 
 int main(int argc, char** argv) {
-
-	app.m_daemonName = DAEMON_NAME;
-	app.m_daemonInfo = DAEMON_INFO;
-	app.util().m_instance = GetModuleHandle(NULL);
-
-	if (app.util().m_instance) {
-		return WinMain(app.util().m_instance, NULL, GetCommandLine(), SW_SHOWNORMAL);
+	HINSTANCE instance = GetModuleHandle(NULL);
+	if (instance) {
+		return WinMain(instance, NULL, GetCommandLine(), SW_SHOWNORMAL);
 	} else {
-		return kExitFailed;
+		return 1;
 	}
 }
 
@@ -609,6 +925,7 @@
 		CMSWindowsScreen::init(instance);
 		CLOG;
 		CThread::getCurrentThread().setPriority(-14);
+		CArgs args;
 
 		StartupFunc startup;
 		if (!CArchMiscWindows::isWindows95Family()) {
@@ -617,7 +934,7 @@
 			// previously, we were assuming that the process is launched from the
 			// service host when no arguments were passed. if we wanted to launch
 			// from console or debugger, we had to remember to pass -f which was
-			// always the first pitfall for new committers. now, we are able to
+			// always the first pitfall for new comitters. now, we are able to
 			// check using the new `wasLaunchedAsService` function, which is a
 			// more elegant solution.
 			if (CArchMiscWindows::wasLaunchedAsService()) {
@@ -645,9 +962,6 @@
 	catch (XArch& e) {
 		showError(instance, __argv[0], IDS_INIT_FAILED, e.what().c_str());
 	}
-	catch (std::exception& e) {
-		showError(instance, __argv[0], IDS_UNCAUGHT_EXCEPTION, e.what());
-	}
 	catch (...) {
 		showError(instance, __argv[0], IDS_UNCAUGHT_EXCEPTION, "<unknown exception>");
 	}
@@ -659,10 +973,12 @@
 int
 main(int argc, char** argv)
 {
+	CArgs args;
 	try {
 		int result;
 		CArch arch;
 		CLOG;
+		CArgs args;
 		result = run(argc, argv, NULL, &standardStartup);
 		delete CLOG;
 		return result;
@@ -675,10 +991,6 @@
 		LOG((CLOG_CRIT "Initialization failed: %s" BYE, e.what().c_str()));
 		return kExitFailed;
 	}
-	catch (std::exception& e) {
-		LOG((CLOG_CRIT "Uncaught exception: %s\n", e.what()));
-		throw;
-	}
 	catch (...) {
 		LOG((CLOG_CRIT "Uncaught exception: <unknown exception>\n"));
 		throw;

Property changes on: cmd\synergyc
___________________________________________________________________
Deleted: svn:ignore
   - *.aps


Index: cmd/synergys/synergys.cpp
===================================================================
--- cmd/synergys/synergys.cpp	(.../edge)	(revision 365)
+++ cmd/synergys/synergys.cpp	(.../crazy)	(revision 365)
@@ -47,21 +47,16 @@
 #include "CMSWindowsUtil.h"
 #include "CMSWindowsServerTaskBarReceiver.h"
 #include "resource.h"
+#include <conio.h>
 #include "CArchDaemonWindows.h"
-#include "CMSWindowsServerApp.h"
-#include "CMSWindowsAppUtil.h"
 #undef DAEMON_RUNNING
 #define DAEMON_RUNNING(running_) CArchMiscWindows::daemonRunning(running_)
 #elif WINAPI_XWINDOWS
 #include "CXWindowsScreen.h"
 #include "CXWindowsServerTaskBarReceiver.h"
-#include "CXWindowsServerApp.h"
-#include "CXWindowsAppUtil.h"
 #elif WINAPI_CARBON
 #include "COSXScreen.h"
 #include "COSXServerTaskBarReceiver.h"
-#include "COSXServerApp.h"
-#include "COSXAppUtil.h"
 #endif
 
 // platform dependent name of a daemon
@@ -72,20 +67,64 @@
 #define DAEMON_NAME "synergys"
 #endif
 
+// configuration file name
+#if SYSAPI_WIN32
+#define USR_CONFIG_NAME "synergy.sgc"
+#define SYS_CONFIG_NAME "synergy.sgc"
+#elif SYSAPI_UNIX
+#define USR_CONFIG_NAME ".synergy.conf"
+#define SYS_CONFIG_NAME "synergy.conf"
+#endif
+
 typedef int (*StartupFunc)(int, char**);
+static void parse(int argc, const char* const* argv);
 static bool loadConfig(const CString& pathname);
 static void loadConfig();
 
-#if WINAPI_MSWINDOWS
-CMSWindowsServerApp app;
-#elif WINAPI_XWINDOWS
-CXWindowsServerApp app;
-#elif WINAPI_CARBON
-COSXServerApp app;
-#endif
+//
+// program arguments
+//
 
-#define ARG ((CServerApp::CArgs*)&app.args())
+#define ARG CArgs::s_instance
 
+class CArgs {
+public:
+	CArgs() :
+		m_pname(NULL),
+		m_backend(false),
+		m_restartable(true),
+		m_daemon(true),
+		m_configFile(),
+		m_logFilter(NULL),
+		m_logFile(NULL),
+		m_display(NULL),
+		m_synergyAddress(NULL),
+		m_config(NULL),
+		m_installService(false),
+		m_uninstallService(false)
+		{ s_instance = this; }
+	~CArgs() { s_instance = NULL; }
+
+public:
+	static CArgs*		s_instance;
+	const char* 		m_pname;
+	bool				m_backend;
+	bool				m_restartable;
+	bool				m_daemon;
+	CString		 		m_configFile;
+	const char* 		m_logFilter;
+	const char*			m_logFile;
+	const char*			m_display;
+	CString 			m_name;
+	CNetworkAddress*	m_synergyAddress;
+	CConfig*			m_config;
+	bool				m_installService;
+	bool				m_uninstallService;
+};
+
+CArgs*					CArgs::s_instance = NULL;
+
+
 //
 // platform dependent factories
 //
@@ -745,7 +784,7 @@
 {
 
 	// parse command line
-	app.parse(argc, argv);
+	parse(argc, argv);
 
 	// load configuration
 	loadConfig();
@@ -798,8 +837,330 @@
 // command line parsing
 //
 
+#define BYE "\nTry `%s --help' for more information."
+
+#if SYSAPI_WIN32
 static
+void 
+exitPause(int code) 
+{
+	CString name;
+	CArchMiscWindows::getParentProcessName(name);
+
+	// if the user did not launch from the command prompt (i.e. it was launched
+	// by double clicking, or through a debugger), allow user to read any error
+	// messages (instead of the window closing automatically).
+	if (name != "cmd.exe") {
+		std::cout << std::endl << "Press any key to exit...";
+		int c = _getch();
+	}
+
+	exit(code);
+}
+static void	(*bye)(int) = &exitPause;
+#else
+static void	(*bye)(int) = &exit;
+#endif
+
+static
+void
+version()
+{
+	LOG((CLOG_PRINT
+"%s %s, protocol version %d.%d\n"
+"%s",
+								ARG->m_pname,
+								kVersion,
+								kProtocolMajorVersion,
+								kProtocolMinorVersion,
+								kCopyright));
+}
+
+static
+void
+help()
+{
+#if WINAPI_XWINDOWS
+#  define USAGE_DISPLAY_ARG		\
+" [--display <display>]"
+#  define USAGE_DISPLAY_INFO	\
+"      --display <display>  connect to the X server at <display>\n"
+#else
+#  define USAGE_DISPLAY_ARG
+#  define USAGE_DISPLAY_INFO
+#endif
+
+#if SYSAPI_WIN32
+
+#  define PLATFORM_ARGS														\
+" [--daemon|--no-daemon]"
+#  define PLATFORM_DESC
+#  define PLATFORM_EXTRA													\
+"At least one command line argument is required.  If you don't otherwise\n"	\
+"need an argument use `--daemon'.\n"										\
+"\n"
+
+#else
+
+#  define PLATFORM_ARGS														\
+" [--daemon|--no-daemon]"
+#  define PLATFORM_DESC
+#  define PLATFORM_EXTRA
+
+#endif
+
+	char buffer[2000];
+	sprintf(
+		buffer,
+		"Usage: %s"
+		" [--address <address>]"
+		" [--config <pathname>]"
+		" [--debug <level>]"
+		USAGE_DISPLAY_ARG
+		" [--name <screen-name>]"
+		" [--restart|--no-restart]"
+		PLATFORM_ARGS
+		"\n\n"
+		"Start the synergy mouse/keyboard sharing server.\n"
+		"\n"
+		"  -a, --address <address>  listen for clients on the given address.\n"
+		"  -c, --config <pathname>  use the named configuration file instead.\n"
+		"  -d, --debug <level>      filter out log messages with priorty below level.\n"
+		"                           level may be: FATAL, ERROR, WARNING, NOTE, INFO,\n"
+		"                           DEBUG, DEBUG1, DEBUG2.\n"
+		USAGE_DISPLAY_INFO
+		"  -f, --no-daemon          run the server in the foreground.\n"
+		"*     --daemon             run the server as a daemon.\n"
+		"  -n, --name <screen-name> use screen-name instead the hostname to identify\n"
+		"                           this screen in the configuration.\n"
+		"  -1, --no-restart         do not try to restart the server if it fails for\n"
+		"                           some reason.\n"
+		"*     --restart            restart the server automatically if it fails.\n"
+		"  -l  --log <file>         write log messages to file.\n"
+		PLATFORM_DESC
+		"  -h, --help               display this help and exit.\n"
+		"      --version            display version information and exit.\n"
+		"\n"
+		"* marks defaults.\n"
+		"\n"
+		PLATFORM_EXTRA
+		"The argument for --address is of the form: [<hostname>][:<port>].  The\n"
+		"hostname must be the address or hostname of an interface on the system.\n"
+		"The default is to listen on all interfaces.  The port overrides the\n"
+		"default port, %d.\n"
+		"\n"
+		"If no configuration file pathname is provided then the first of the\n"
+		"following to load successfully sets the configuration:\n"
+		"  %s\n"
+		"  %s\n"
+		"If no configuration file can be loaded then the configuration uses its\n"
+		"defaults with just the server screen.\n"
+		"\n"
+		"Where log messages go depends on the platform and whether or not the\n"
+		"server is running as a daemon.",
+		ARG->m_pname, kDefaultPort,
+		ARCH->concatPath(ARCH->getUserDirectory(), USR_CONFIG_NAME).c_str(),
+		ARCH->concatPath(ARCH->getSystemDirectory(), SYS_CONFIG_NAME).c_str()
+	);
+
+	std::cout << buffer << std::endl;
+}
+
+static
 bool
+isArg(int argi, int argc, const char* const* argv,
+				const char* name1, const char* name2,
+				int minRequiredParameters = 0)
+{
+	if ((name1 != NULL && strcmp(argv[argi], name1) == 0) ||
+		(name2 != NULL && strcmp(argv[argi], name2) == 0)) {
+		// match.  check args left.
+		if (argi + minRequiredParameters >= argc) {
+			LOG((CLOG_PRINT "%s: missing arguments for `%s'" BYE,
+								ARG->m_pname, argv[argi], ARG->m_pname));
+			bye(kExitArgs);
+		}
+		return true;
+	}
+
+	// no match
+	return false;
+}
+
+static
+void
+parse(int argc, const char* const* argv)
+{
+	bool argsValid = (ARG->m_pname != NULL) && (argv != NULL) && (argc >= 1);
+	assert(argsValid);
+
+	if (!argsValid) {
+		// fail silently for release (avoids compiler warning)
+		help();
+		bye(kExitSuccess);
+	}
+
+	// set defaults
+	ARG->m_name = ARCH->getHostName();
+
+	// parse options
+	int i = 1;
+	for (; i < argc; ++i) {
+		if (isArg(i, argc, argv, "-d", "--debug", 1)) {
+			// change logging level
+			ARG->m_logFilter = argv[++i];
+		}
+
+		else if (isArg(i, argc, argv, "-a", "--address", 1)) {
+			// save listen address
+			try {
+				*ARG->m_synergyAddress = CNetworkAddress(argv[i + 1],
+														kDefaultPort);
+				ARG->m_synergyAddress->resolve();
+			}
+			catch (XSocketAddress& e) {
+				LOG((CLOG_PRINT "%s: %s" BYE,
+								ARG->m_pname, e.what(), ARG->m_pname));
+				bye(kExitArgs);
+			}
+			++i;
+		}
+
+		else if (isArg(i, argc, argv, "-n", "--name", 1)) {
+			// save screen name
+			ARG->m_name = argv[++i];
+		}
+
+		else if (isArg(i, argc, argv, "-c", "--config", 1)) {
+			// save configuration file path
+			ARG->m_configFile = argv[++i];
+		}
+
+#if WINAPI_XWINDOWS
+		else if (isArg(i, argc, argv, "-display", "--display", 1)) {
+			// use alternative display
+			ARG->m_display = argv[++i];
+		}
+#endif
+
+		else if (isArg(i, argc, argv, "-f", "--no-daemon")) {
+			// not a daemon
+			ARG->m_daemon = false;
+		}
+
+		else if (isArg(i, argc, argv, NULL, "--daemon")) {
+			// daemonize
+			ARG->m_daemon = true;
+		}
+		else if (isArg(i, argc, argv, "-l", "--log", 1)) {
+			// logging to file
+			ARG->m_logFile = argv[++i];
+		}
+
+		else if (isArg(i, argc, argv, "-1", "--no-restart")) {
+			// don't try to restart
+			ARG->m_restartable = false;
+		}
+
+		else if (isArg(i, argc, argv, NULL, "--restart")) {
+			// try to restart
+			ARG->m_restartable = true;
+		}
+
+		else if (isArg(i, argc, argv, "-z", NULL)) {
+			ARG->m_backend = true;
+		}
+
+		else if (isArg(i, argc, argv, "-h", "--help")) {
+			help();
+			bye(kExitSuccess);
+		}
+
+		else if (isArg(i, argc, argv, NULL, "--version")) {
+			version();
+			bye(kExitSuccess);
+		}
+
+#if WINAPI_MSWINDOWS
+		else if (isArg(i, argc, argv, NULL, "--install-service")) {
+			// install windows service
+			ARG->m_installService = true;
+		}
+
+		else if (isArg(i, argc, argv, NULL, "--uninstall-service")) {
+			// uninstall windows service
+			ARG->m_uninstallService = true;
+		}
+#endif
+
+		else if (isArg(i, argc, argv, "--", NULL)) {
+			// remaining arguments are not options
+			++i;
+			break;
+		}
+
+		else if (argv[i][0] == '-') {
+			LOG((CLOG_PRINT "%s: unrecognized option `%s'" BYE,
+								ARG->m_pname, argv[i], ARG->m_pname));
+			bye(kExitArgs);
+		}
+
+		else {
+			// this and remaining arguments are not options
+			break;
+		}
+	}
+
+	// no non-option arguments are allowed
+	if (i != argc) {
+		LOG((CLOG_PRINT "%s: unrecognized option `%s'" BYE,
+								ARG->m_pname, argv[i], ARG->m_pname));
+		bye(kExitArgs);
+	}
+
+	// increase default filter level for daemon.  the user must
+	// explicitly request another level for a daemon.
+	if (ARG->m_daemon && ARG->m_logFilter == NULL) {
+#if SYSAPI_WIN32
+		if (CArchMiscWindows::isWindows95Family()) {
+			// windows 95 has no place for logging so avoid showing
+			// the log console window.
+			ARG->m_logFilter = "FATAL";
+		}
+		else
+#endif
+		{
+			ARG->m_logFilter = "NOTE";
+		}
+	}
+
+	// set log filter
+	if (!CLOG->setFilter(ARG->m_logFilter)) {
+		LOG((CLOG_PRINT "%s: unrecognized log level `%s'" BYE,
+								ARG->m_pname, ARG->m_logFilter, ARG->m_pname));
+		bye(kExitArgs);
+	}
+
+	// identify system
+	LOG((CLOG_INFO "%s Server on %s %s", kAppVersion, ARCH->getOSName().c_str(), ARCH->getPlatformName().c_str()));
+
+#ifdef WIN32
+#ifdef _AMD64_
+	LOG((CLOG_WARN "This is an experimental x64 build of %s. Use it at your own risk.", kApplication));
+#endif
+#endif
+
+	if (CLOG->getFilter() > CLog::kDEBUG) {
+		if (ARG->m_logFile == NULL) {
+			LOG((CLOG_WARN "verbose debug messages will not be sent to the console (use file logging)"));
+		} else {
+			LOG((CLOG_INFO "verbose debug messages will be sent to file: %s", ARG->m_logFile));
+		}
+	}
+}
+
+static
+bool
 loadConfig(const CString& pathname)
 {
 	try {
@@ -866,7 +1227,7 @@
 
 	if (!loaded) {
 		LOG((CLOG_PRINT "%s: no configuration available", ARG->m_pname));
-		app.m_bye(kExitConfig);
+		bye(kExitConfig);
 	}
 }
 
@@ -878,6 +1239,7 @@
 #if SYSAPI_WIN32
 
 static bool				s_hasImportantLogMessages = false;
+static HINSTANCE s_instance = NULL;
 
 //
 // CMessageBoxOutputter
@@ -928,7 +1290,7 @@
 int
 daemonNTMainLoop(int argc, const char** argv)
 {
-	app.parse(argc, argv);
+	parse(argc, argv);
 	ARG->m_backend = false;
 	loadConfig();
 	return CArchMiscWindows::runDaemon(mainLoop);
@@ -939,18 +1301,55 @@
 daemonNTStartup(int, char**)
 {
 	CSystemLogger sysLogger(DAEMON_NAME, false);
-	app.m_bye = &byeThrow;
+	bye = &byeThrow;
 	return ARCH->daemonize(DAEMON_NAME, &daemonNTMainLoop);
 }
 
+static
+int
+manageService() 
+{
+	assert(ARG->m_installService || ARG->m_uninstallService);
+
+	std::stringstream argBuf;
+	for (int i = 1; i < __argc; i++) {
+		char* arg = __argv[i];
+
+		// ignore service setup args
+		if ((_stricmp(arg, "--install-service") != 0) &&
+			(_stricmp(arg, "--uninstall-service") != 0)) {
+
+			argBuf << " " << __argv[i];
+		}
+	}
+
+	char thisPath[MAX_PATH];
+	GetModuleFileName(s_instance, thisPath, MAX_PATH);
+
+	if (ARG->m_installService) {
+		ARCH->installDaemon(DAEMON_NAME, DAEMON_INFO, thisPath, argBuf.str().c_str(), NULL, true);
+		LOG((CLOG_INFO "service '%s' installed with args: %s", DAEMON_NAME, argBuf.str().c_str()));
+		return kExitSuccess;
+	} else if (ARG->m_uninstallService) {
+		ARCH->uninstallDaemon(DAEMON_NAME, true);
+		LOG((CLOG_INFO, "service '%s' uninstalled", DAEMON_NAME));
+		return kExitSuccess;
+	}
+	return kExitFailed;
+}
+
 // used by windows nt (foreground)
 static
 int
 foregroundStartup(int argc, char** argv)
 {
 	// parse command line
-	app.parse(argc, argv);
+	parse(argc, argv);
 
+	if (ARG->m_installService || ARG->m_uninstallService) {
+		return manageService();
+	}
+
 	// load configuration
 	loadConfig();
 
@@ -964,18 +1363,13 @@
 {
 	CString fmt = CMSWindowsUtil::getString(instance, id);
 	CString msg = CStringUtil::format(fmt.c_str(), arg);
-	LOG((CLOG_ERR "%s", msg.c_str()));
-	app.m_bye(kExitFailed);
+	MessageBox(NULL, msg.c_str(), title, MB_OK | MB_ICONWARNING);
 }
 
 int main(int argc, char** argv) {
-	
-	app.m_daemonName = DAEMON_NAME;
-	app.m_daemonInfo = DAEMON_INFO;
-	app.util().m_instance = GetModuleHandle(NULL);
-
-	if (app.util().m_instance) {
-		return WinMain(app.util().m_instance, NULL, GetCommandLine(), SW_SHOWNORMAL);
+	s_instance = GetModuleHandle(NULL);
+	if (s_instance) {
+		return WinMain(s_instance, NULL, GetCommandLine(), SW_SHOWNORMAL);
 	} else {
 		return kExitFailed;
 	}
@@ -984,12 +1378,6 @@
 int WINAPI
 WinMain(HINSTANCE instance, HINSTANCE, LPSTR, int)
 {
-	// instantiate before the try-catch block, so they are destroyed after the
-	// exception handling (we may need to log exception message). these should
-	// not throw exceptions at this stage, so this code should be pretty safe.
-	CArch arch(instance);
-	CLOG;
-
 	try {
 		CArchMiscWindows::setIcons((HICON)LoadImage(instance,
 									MAKEINTRESOURCE(IDI_SYNERGY),
@@ -999,9 +1387,11 @@
 									MAKEINTRESOURCE(IDI_SYNERGY),
 									IMAGE_ICON,
 									16, 16, LR_SHARED));
-
+		CArch arch(instance);
 		CMSWindowsScreen::init(instance);
+		CLOG;
 		CThread::getCurrentThread().setPriority(-14);
+		CArgs args;
 		
 		StartupFunc startup;
 		if (!CArchMiscWindows::isWindows95Family()) {
@@ -1010,7 +1400,7 @@
 			// previously, we were assuming that the process is launched from the
 			// service host when no arguments were passed. if we wanted to launch
 			// from console or debugger, we had to remember to pass -f which was
-			// always the first pitfall for new committers. now, we are able to
+			// always the first pitfall for new comitters. now, we are able to
 			// check using the new `wasLaunchedAsService` function, which is a
 			// more elegant solution.
 			if (CArchMiscWindows::wasLaunchedAsService()) {
@@ -1037,9 +1427,6 @@
 	catch (XArch& e) {
 		showError(instance, __argv[0], IDS_INIT_FAILED, e.what().c_str());
 	}
-	catch (std::exception& e) {
-		showError(instance, __argv[0], IDS_UNCAUGHT_EXCEPTION, e.what());
-	}
 	catch (...) {
 		showError(instance, __argv[0], IDS_UNCAUGHT_EXCEPTION, "<unknown exception>");
 	}
@@ -1051,10 +1438,12 @@
 int
 main(int argc, char** argv)
 {
+	CArgs args;
 	try {
 		int result;
 		CArch arch;
 		CLOG;
+		CArgs args;
 		result = run(argc, argv, NULL, &standardStartup);
 		delete CLOG;
 		return result;
@@ -1067,10 +1456,6 @@
 		LOG((CLOG_CRIT "Initialization failed: %s" BYE, e.what().c_str()));
 		return kExitFailed;
 	}
-	catch (std::exception& e) {
-		LOG((CLOG_CRIT "Uncaught exception: %s\n", e.what()));
-		throw;
-	}
 	catch (...) {
 		LOG((CLOG_CRIT "Uncaught exception: <unknown exception>\n"));
 		throw;

Property changes on: cmd\synergys
___________________________________________________________________
Deleted: svn:ignore
   - *.aps


Index: branch_changes.txt
===================================================================
--- branch_changes.txt	(.../edge)	(revision 0)
+++ branch_changes.txt	(.../crazy)	(revision 365)
@@ -0,0 +1,2 @@
+* (huge) removal of character based processing on keyboard events, we'll use only scan codes and virtual keys. The local OS will decide what character it should generate.
+* removed Win95 family code, from now we'll support on NT family on Windows
Index: lib/synergy/CKeyState.h
===================================================================
--- lib/synergy/CKeyState.h	(.../edge)	(revision 365)
+++ lib/synergy/CKeyState.h	(.../crazy)	(revision 365)
@@ -1,216 +0,0 @@
-/*
- * synergy -- mouse and keyboard sharing utility
- * Copyright (C) 2004 Chris Schoeneman
- * 
- * This package is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * found in the file COPYING that should have accompanied this file.
- * 
- * This package is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef CKEYSTATE_H
-#define CKEYSTATE_H
-
-#include "IKeyState.h"
-#include "CKeyMap.h"
-
-//! Core key state
-/*!
-This class provides key state services.  Subclasses must implement a few
-platform specific methods.
-*/
-class CKeyState : public IKeyState {
-public:
-	CKeyState();
-	virtual ~CKeyState();
-
-	//! @name manipulators
-	//@{
-
-	//! Handle key event
-	/*!
-	Sets the state of \p button to down or up and updates the current
-	modifier state to \p newState.  This method should be called by
-	primary screens only in response to local events.  For auto-repeat
-	set \p down to \c true.  Overrides must forward to the superclass.
-	*/
-	virtual void		onKey(KeyButton button, bool down,
-							KeyModifierMask newState);
-
-	//! Post a key event
-	/*!
-	Posts a key event.  This may adjust the event or post additional
-	events in some circumstances.  If this is overridden it must forward
-	to the superclass.
-	*/
-	virtual void		sendKeyEvent(void* target,
-							bool press, bool isAutoRepeat,
-							KeyID key, KeyModifierMask mask,
-							SInt32 count, KeyButton button);
-
-	//@}
-	//! @name accessors
-	//@{
-
-	//@}
-
-	// IKeyState overrides
-	virtual void		updateKeyMap();
-	virtual void		updateKeyState();
-	virtual void		setHalfDuplexMask(KeyModifierMask);
-	virtual void		fakeKeyDown(KeyID id, KeyModifierMask mask,
-							KeyButton button);
-	virtual void		fakeKeyRepeat(KeyID id, KeyModifierMask mask,
-							SInt32 count, KeyButton button);
-	virtual void		fakeKeyUp(KeyButton button);
-	virtual void		fakeAllKeysUp();
-	virtual bool		fakeCtrlAltDel() = 0;
-	virtual bool		isKeyDown(KeyButton) const;
-	virtual KeyModifierMask
-						getActiveModifiers() const;
-	virtual KeyModifierMask
-						pollActiveModifiers() const = 0;
-	virtual SInt32		pollActiveGroup() const = 0;
-	virtual void		pollPressedKeys(KeyButtonSet& pressedKeys) const = 0;
-
-protected:
-	typedef CKeyMap::Keystroke Keystroke;
-
-	//! @name protected manipulators
-	//@{
-
-	//! Get the keyboard map
-	/*!
-	Fills \p keyMap with the current keyboard map.
-	*/
-	virtual void		getKeyMap(CKeyMap& keyMap) = 0;
-
-	//! Fake a key event
-	/*!
-	Synthesize an event for \p keystroke.
-	*/
-	virtual void		fakeKey(const Keystroke& keystroke) = 0;
-
-	//! Get the active modifiers
-	/*!
-	Returns the modifiers that are currently active according to our
-	shadowed state.  The state may be modified.
-	*/
-	virtual KeyModifierMask&
-						getActiveModifiersRValue();
-
-	//@}
-	//! @name protected accessors
-	//@{
-
-	//! Compute a group number
-	/*!
-	Returns the number of the group \p offset groups after group \p group.
-	*/
-	SInt32				getEffectiveGroup(SInt32 group, SInt32 offset) const;
-
-	//! Check if key is ignored
-	/*!
-	Returns \c true if and only if the key should always be ignored.
-	The default returns \c true only for the toggle keys.
-	*/
-	virtual bool		isIgnoredKey(KeyID key, KeyModifierMask mask) const;
-
-	//! Get button for a KeyID
-	/*!
-	Return the button mapped to key \p id in group \p group if any,
-	otherwise returns 0.
-	*/
-	KeyButton			getButton(KeyID id, SInt32 group) const;
-
-	//@}
-
-private:
-	typedef CKeyMap::Keystrokes Keystrokes;
-	typedef CKeyMap::ModifierToKeys ModifierToKeys;
-	struct CAddActiveModifierContext {
-	public:
-		CAddActiveModifierContext(SInt32 group, KeyModifierMask mask,
-							ModifierToKeys&	activeModifiers);
-
-	public:
-		SInt32			m_activeGroup;
-		KeyModifierMask	m_mask;
-		ModifierToKeys&	m_activeModifiers;
-
-	private:
-		// not implemented
-		CAddActiveModifierContext(const CAddActiveModifierContext&);
-		CAddActiveModifierContext& operator=(const CAddActiveModifierContext&);
-	};
-	
-	class ButtonToKeyLess {
-	public:
-		bool operator()(const CKeyMap::ButtonToKeyMap::value_type& a,
-						const CKeyMap::ButtonToKeyMap::value_type b) const
-		{
-			return (a.first < b.first);
-		}
-	};
-
-	// not implemented
-	CKeyState(const CKeyState&);
-	CKeyState& operator=(const CKeyState&);
-
-	// adds alias key sequences.  these are sequences that are equivalent
-	// to other sequences.
-	void				addAliasEntries();
-
-	// adds non-keypad key sequences for keypad KeyIDs
-	void				addKeypadEntries();
-
-	// adds key sequences for combination KeyIDs (those built using
-	// dead keys)
-	void				addCombinationEntries();
-
-	// synthesize key events.  synthesize auto-repeat events count times.
-	void				fakeKeys(const Keystrokes&, UInt32 count);
-
-	// update key state to match changes to modifiers
-	void				updateModifierKeyState(KeyButton button,
-							const ModifierToKeys& oldModifiers,
-							const ModifierToKeys& newModifiers);
-
-	// active modifiers collection callback
-	static void			addActiveModifierCB(KeyID id, SInt32 group,
-							CKeyMap::KeyItem& keyItem, void* vcontext);
-
-private:
-	// the keyboard map
-	CKeyMap				m_keyMap;
-
-	// current modifier state
-	KeyModifierMask		m_mask;
-
-	// the active modifiers and the buttons activating them
-	ModifierToKeys		m_activeModifiers;
-
-	// current keyboard state (> 0 if pressed, 0 otherwise).  this is
-	// initialized to the keyboard state according to the system then
-	// it tracks synthesized events.
-	SInt32				m_keys[kNumButtons];
-
-	// synthetic keyboard state (> 0 if pressed, 0 otherwise).  this
-	// tracks the synthesized keyboard state.  if m_keys[n] > 0 but
-	// m_syntheticKeys[n] == 0 then the key was pressed locally and
-	// not synthesized yet.
-	SInt32				m_syntheticKeys[kNumButtons];
-
-	// client data for each pressed key
-	UInt32				m_keyClientData[kNumButtons];
-
-	// server keyboard state.  an entry is 0 if not the key isn't pressed
-	// otherwise it's the local KeyButton synthesized for the server key.
-	KeyButton			m_serverKeys[kNumButtons];
-};
-
-#endif
Index: lib/synergy/CServerApp.cpp
===================================================================
--- lib/synergy/CServerApp.cpp	(.../edge)	(revision 365)
+++ lib/synergy/CServerApp.cpp	(.../crazy)	(revision 365)
@@ -1,218 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#include "CServerApp.h"
-#include "CLog.h"
-#include "CArch.h"
-#include "XSocket.h"
-#include "Version.h"
-
-#if SYSAPI_WIN32
-#include "CArchMiscWindows.h"
-#endif
-
-#include <iostream>
-#include <stdio.h>
-
-CServerApp::CServerApp(CAppUtil* util) :
-CApp(new CArgs(), util)
-{
-}
-
-CServerApp::~CServerApp()
-{
-}
-
-CServerApp::CArgs::CArgs() :
-m_synergyAddress(NULL),
-m_config(NULL)
-{
-}
-
-CServerApp::CArgs::~CArgs()
-{
-}
-
-bool
-CServerApp::parseArg(const int& argc, const char* const* argv, int& i)
-{
-	if (CApp::parseArg(argc, argv, i)) {
-		// found common arg
-		return true;
-	}
-
-	else if (isArg(i, argc, argv, "-a", "--address", 1)) {
-		// save listen address
-		try {
-			*args().m_synergyAddress = CNetworkAddress(argv[i + 1],
-				kDefaultPort);
-			args().m_synergyAddress->resolve();
-		}
-		catch (XSocketAddress& e) {
-			LOG((CLOG_PRINT "%s: %s" BYE,
-				args().m_pname, e.what(), args().m_pname));
-			m_bye(kExitArgs);
-		}
-		++i;
-	}
-
-	else if (isArg(i, argc, argv, "-c", "--config", 1)) {
-		// save configuration file path
-		args().m_configFile = argv[++i];
-	}
-
-	else {
-		// this and remaining arguments are not options
-		return false;
-	}
-
-	// argument was valid
-	return true;
-}
-
-void
-CServerApp::parse(int argc, const char* const* argv)
-{
-	// asserts values, sets defaults, and parses args
-	int i;
-	CApp::parse(argc, argv, i);
-
-	// no non-option arguments are allowed
-	if (i != argc) {
-		LOG((CLOG_PRINT "%s: unrecognized option `%s'" BYE,
-			args().m_pname, argv[i], args().m_pname));
-		m_bye(kExitArgs);
-	}
-
-#if SYSAPI_WIN32
-	// if user wants to run as daemon, but process not launched from service launcher...
-	if (args().m_daemon && !CArchMiscWindows::wasLaunchedAsService()) {
-		LOG((CLOG_ERR "cannot launch as daemon if process not started through "
-			"service host (use '--service start' argument instead)"));
-		m_bye(kExitArgs);
-	}
-#endif
-
-	// set log filter
-	if (!CLOG->setFilter(args().m_logFilter)) {
-		LOG((CLOG_PRINT "%s: unrecognized log level `%s'" BYE,
-			args().m_pname, args().m_logFilter, args().m_pname));
-		m_bye(kExitArgs);
-	}
-
-	// identify system
-	LOG((CLOG_INFO "%s Server on %s %s", kAppVersion, ARCH->getOSName().c_str(), ARCH->getPlatformName().c_str()));
-
-#ifdef WIN32
-#ifdef _AMD64_
-	LOG((CLOG_WARN "This is an experimental x64 build of %s. Use it at your own risk.", kApplication));
-#endif
-#endif
-
-	if (CLOG->getFilter() > CLOG->getConsoleMaxLevel()) {
-		if (args().m_logFile == NULL) {
-			LOG((CLOG_WARN "log messages above %s are NOT sent to console (use file logging)", 
-				CLOG->getFilterName(CLOG->getConsoleMaxLevel())));
-		}
-	}
-}
-
-void
-CServerApp::help()
-{
-#if WINAPI_XWINDOWS
-#  define USAGE_DISPLAY_ARG		\
-	" [--display <display>]"
-#  define USAGE_DISPLAY_INFO	\
-	"      --display <display>  connect to the X server at <display>\n"
-#else
-#  define USAGE_DISPLAY_ARG
-#  define USAGE_DISPLAY_INFO
-#endif
-
-#if SYSAPI_WIN32
-
-#  define PLATFORM_ARGS														\
-	" [--daemon|--no-daemon]"
-#  define PLATFORM_DESC
-#  define PLATFORM_EXTRA													\
-	"At least one command line argument is required.  If you don't otherwise\n"	\
-	"need an argument use `--daemon'.\n"										\
-	"\n"
-
-#else
-
-#  define PLATFORM_ARGS														\
-	" [--daemon|--no-daemon]"
-#  define PLATFORM_DESC
-#  define PLATFORM_EXTRA
-
-#endif
-
-	char buffer[2000];
-	sprintf(
-		buffer,
-		"Usage: %s"
-		" [--address <address>]"
-		" [--config <pathname>]"
-		" [--debug <level>]"
-		USAGE_DISPLAY_ARG
-		" [--name <screen-name>]"
-		" [--restart|--no-restart]"
-		PLATFORM_ARGS
-		"\n\n"
-		"Start the synergy mouse/keyboard sharing server.\n"
-		"\n"
-		"  -a, --address <address>  listen for clients on the given address.\n"
-		"  -c, --config <pathname>  use the named configuration file instead.\n"
-		"  -d, --debug <level>      filter out log messages with priorty below level.\n"
-		"                           level may be: FATAL, ERROR, WARNING, NOTE, INFO,\n"
-		"                           DEBUG, DEBUG1, DEBUG2.\n"
-		USAGE_DISPLAY_INFO
-		"  -f, --no-daemon          run the server in the foreground.\n"
-		"*     --daemon             run the server as a daemon.\n"
-		"  -n, --name <screen-name> use screen-name instead the hostname to identify\n"
-		"                           this screen in the configuration.\n"
-		"  -1, --no-restart         do not try to restart the server if it fails for\n"
-		"                           some reason.\n"
-		"*     --restart            restart the server automatically if it fails.\n"
-		"  -l  --log <file>         write log messages to file.\n"
-		PLATFORM_DESC
-		"  -h, --help               display this help and exit.\n"
-		"      --version            display version information and exit.\n"
-		"\n"
-		"* marks defaults.\n"
-		"\n"
-		PLATFORM_EXTRA
-		"The argument for --address is of the form: [<hostname>][:<port>].  The\n"
-		"hostname must be the address or hostname of an interface on the system.\n"
-		"The default is to listen on all interfaces.  The port overrides the\n"
-		"default port, %d.\n"
-		"\n"
-		"If no configuration file pathname is provided then the first of the\n"
-		"following to load successfully sets the configuration:\n"
-		"  %s\n"
-		"  %s\n"
-		"If no configuration file can be loaded then the configuration uses its\n"
-		"defaults with just the server screen.\n"
-		"\n"
-		"Where log messages go depends on the platform and whether or not the\n"
-		"server is running as a daemon.",
-		args().m_pname, kDefaultPort,
-		ARCH->concatPath(ARCH->getUserDirectory(), USR_CONFIG_NAME).c_str(),
-		ARCH->concatPath(ARCH->getSystemDirectory(), SYS_CONFIG_NAME).c_str()
-		);
-
-	std::cout << buffer << std::endl;
-}
Index: lib/synergy/CAppUtil.cpp
===================================================================
--- lib/synergy/CAppUtil.cpp	(.../edge)	(revision 365)
+++ lib/synergy/CAppUtil.cpp	(.../crazy)	(revision 365)
@@ -1,37 +0,0 @@
-/*
- * synergy -- mouse and keyboard sharing utility
- * Copyright (C) 2002 Chris Schoeneman
- * 
- * This package is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * found in the file COPYING that should have accompanied this file.
- * 
- * This package is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
- 
-#include "CAppUtil.h"
- 
-CAppUtil::CAppUtil() :
-m_app(nullptr)
-{
-}
-
-CAppUtil::~CAppUtil()
-{
-}
-
-void
-CAppUtil::adoptApp(CApp* app)
-{
-	m_app = app;
-}
-
-CApp&
-CAppUtil::app() const
-{
-	assert(m_app != nullptr);
-	return *m_app;
-}
\ No newline at end of file
Index: lib/synergy/CClientApp.h
===================================================================
--- lib/synergy/CClientApp.h	(.../edge)	(revision 365)
+++ lib/synergy/CClientApp.h	(.../crazy)	(revision 365)
@@ -1,49 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#pragma once
-
-#include "CApp.h"
-#include "CString.h"
-#include "CNetworkAddress.h"
-
-class CAppUtil;
-
-class CClientApp : public CApp {
-public:
-	class CArgs : public CApp::CArgsBase {
-	public:
-		CArgs();
-		~CArgs();
-
-	public:
-		int m_yscroll;
-		CNetworkAddress* m_serverAddress;
-	};
-
-	CClientApp(CAppUtil* util);
-	virtual ~CClientApp();
-
-	// Parse client specific command line arguments.
-	void parse(int argc, const char* const* argv);
-
-	// Prints help specific to client.
-	void help();
-
-	// Returns arguments that are common and for client.
-	CArgs& args() const { return (CArgs&)argsBase(); }
-
-private:
-	virtual bool parseArg(const int& argc, const char* const* argv, int& i);
-};
Index: lib/synergy/CApp.h
===================================================================
--- lib/synergy/CApp.h	(.../edge)	(revision 365)
+++ lib/synergy/CApp.h	(.../crazy)	(revision 365)
@@ -1,78 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#pragma once
-
-#include "common.h"
-#include "CString.h"
-
-class CAppUtil;
-
-class CApp {
-public:
-	class CArgsBase {
-	public:
-		CArgsBase();
-		virtual ~CArgsBase();
-		bool m_daemon;
-		bool m_backend;
-		bool m_restartable;
-		const char* m_pname;
-		const char* m_logFilter;
-		const char*	m_logFile;
-		const char*	m_display;
-		CString m_name;
-	};
-
-	CApp(CArgsBase* args, CAppUtil* bridge);
-	virtual ~CApp();
-
-	// Returns args that are common between server and client.
-	CArgsBase& argsBase() const { return *m_args; }
-
-	// Returns a platform specific utility (base type).
-	CAppUtil& utilBase() const { return *m_util; }
-
-	// Prints the current compiled version.
-	virtual void version();
-
-	// Prints help specific to client or server.
-	virtual void help() = 0;
-
-	// Parse command line arguments.
-	virtual void parse(int argc, const char* const* argv) = 0;
-
-	// Name of the daemon (used for Unix and Windows).
-	CString m_daemonName;
-
-	// A description of the daemon (used only on Windows).
-	CString m_daemonInfo;
-
-	// Function pointer for function to exit immediately.
-	// TODO: this is old C code - use inheritance to normalize
-	void (*m_bye)(int);
-
-protected:
-	virtual void parse(int argc, const char* const* argv, int &i);
-	virtual bool parseArg(const int& argc, const char* const* argv, int& i);
-	bool isArg(int argi, int argc, const char* const* argv,
-		const char* name1, const char* name2,
-		int minRequiredParameters = 0);
-
-private:
-	CArgsBase* m_args;
-	CAppUtil* m_util;
-};
-
-#define BYE "\nTry `%s --help' for more information."
Index: lib/synergy/CKeyState.cpp
===================================================================
--- lib/synergy/CKeyState.cpp	(.../edge)	(revision 365)
+++ lib/synergy/CKeyState.cpp	(.../crazy)	(revision 365)
@@ -1,888 +0,0 @@
-/*
- * synergy -- mouse and keyboard sharing utility
- * Copyright (C) 2004 Chris Schoeneman
- * 
- * This package is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * found in the file COPYING that should have accompanied this file.
- * 
- * This package is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include "CKeyState.h"
-#include "IEventQueue.h"
-#include "CLog.h"
-#include <cstring>
-#include <algorithm>
-#include <iterator>
-#include <list>
-
-static const KeyButton kButtonMask = (KeyButton)(IKeyState::kNumButtons - 1);
-
-static const KeyID s_decomposeTable[] = {
-	// spacing version of dead keys
-	0x0060, 0x0300, 0x0020, 0, // grave,        dead_grave,       space
-	0x00b4, 0x0301, 0x0020, 0, // acute,        dead_acute,       space
-	0x005e, 0x0302, 0x0020, 0, // asciicircum,  dead_circumflex,  space
-	0x007e, 0x0303, 0x0020, 0, // asciitilde,   dead_tilde,       space
-	0x00a8, 0x0308, 0x0020, 0, // diaeresis,    dead_diaeresis,   space
-	0x00b0, 0x030a, 0x0020, 0, // degree,       dead_abovering,   space
-	0x00b8, 0x0327, 0x0020, 0, // cedilla,      dead_cedilla,     space
-	0x02db, 0x0328, 0x0020, 0, // ogonek,       dead_ogonek,      space
-	0x02c7, 0x030c, 0x0020, 0, // caron,        dead_caron,       space
-	0x02d9, 0x0307, 0x0020, 0, // abovedot,     dead_abovedot,    space
-	0x02dd, 0x030b, 0x0020, 0, // doubleacute,  dead_doubleacute, space
-	0x02d8, 0x0306, 0x0020, 0, // breve,        dead_breve,       space
-	0x00af, 0x0304, 0x0020, 0, // macron,       dead_macron,      space
-
-	// Latin-1 (ISO 8859-1)
-	0x00c0, 0x0300, 0x0041, 0, // Agrave,       dead_grave,       A
-	0x00c1, 0x0301, 0x0041, 0, // Aacute,       dead_acute,       A
-	0x00c2, 0x0302, 0x0041, 0, // Acircumflex,  dead_circumflex,  A
-	0x00c3, 0x0303, 0x0041, 0, // Atilde,       dead_tilde,       A
-	0x00c4, 0x0308, 0x0041, 0, // Adiaeresis,   dead_diaeresis,   A
-	0x00c5, 0x030a, 0x0041, 0, // Aring,        dead_abovering,   A
-	0x00c7, 0x0327, 0x0043, 0, // Ccedilla,     dead_cedilla,     C
-	0x00c8, 0x0300, 0x0045, 0, // Egrave,       dead_grave,       E
-	0x00c9, 0x0301, 0x0045, 0, // Eacute,       dead_acute,       E
-	0x00ca, 0x0302, 0x0045, 0, // Ecircumflex,  dead_circumflex,  E
-	0x00cb, 0x0308, 0x0045, 0, // Ediaeresis,   dead_diaeresis,   E
-	0x00cc, 0x0300, 0x0049, 0, // Igrave,       dead_grave,       I
-	0x00cd, 0x0301, 0x0049, 0, // Iacute,       dead_acute,       I
-	0x00ce, 0x0302, 0x0049, 0, // Icircumflex,  dead_circumflex,  I
-	0x00cf, 0x0308, 0x0049, 0, // Idiaeresis,   dead_diaeresis,   I
-	0x00d1, 0x0303, 0x004e, 0, // Ntilde,       dead_tilde,       N
-	0x00d2, 0x0300, 0x004f, 0, // Ograve,       dead_grave,       O
-	0x00d3, 0x0301, 0x004f, 0, // Oacute,       dead_acute,       O
-	0x00d4, 0x0302, 0x004f, 0, // Ocircumflex,  dead_circumflex,  O
-	0x00d5, 0x0303, 0x004f, 0, // Otilde,       dead_tilde,       O
-	0x00d6, 0x0308, 0x004f, 0, // Odiaeresis,   dead_diaeresis,   O
-	0x00d9, 0x0300, 0x0055, 0, // Ugrave,       dead_grave,       U
-	0x00da, 0x0301, 0x0055, 0, // Uacute,       dead_acute,       U
-	0x00db, 0x0302, 0x0055, 0, // Ucircumflex,  dead_circumflex,  U
-	0x00dc, 0x0308, 0x0055, 0, // Udiaeresis,   dead_diaeresis,   U
-	0x00dd, 0x0301, 0x0059, 0, // Yacute,       dead_acute,       Y
-	0x00e0, 0x0300, 0x0061, 0, // agrave,       dead_grave,       a
-	0x00e1, 0x0301, 0x0061, 0, // aacute,       dead_acute,       a
-	0x00e2, 0x0302, 0x0061, 0, // acircumflex,  dead_circumflex,  a
-	0x00e3, 0x0303, 0x0061, 0, // atilde,       dead_tilde,       a
-	0x00e4, 0x0308, 0x0061, 0, // adiaeresis,   dead_diaeresis,   a
-	0x00e5, 0x030a, 0x0061, 0, // aring,        dead_abovering,   a
-	0x00e7, 0x0327, 0x0063, 0, // ccedilla,     dead_cedilla,     c
-	0x00e8, 0x0300, 0x0065, 0, // egrave,       dead_grave,       e
-	0x00e9, 0x0301, 0x0065, 0, // eacute,       dead_acute,       e
-	0x00ea, 0x0302, 0x0065, 0, // ecircumflex,  dead_circumflex,  e
-	0x00eb, 0x0308, 0x0065, 0, // ediaeresis,   dead_diaeresis,   e
-	0x00ec, 0x0300, 0x0069, 0, // igrave,       dead_grave,       i
-	0x00ed, 0x0301, 0x0069, 0, // iacute,       dead_acute,       i
-	0x00ee, 0x0302, 0x0069, 0, // icircumflex,  dead_circumflex,  i
-	0x00ef, 0x0308, 0x0069, 0, // idiaeresis,   dead_diaeresis,   i
-	0x00f1, 0x0303, 0x006e, 0, // ntilde,       dead_tilde,       n
-	0x00f2, 0x0300, 0x006f, 0, // ograve,       dead_grave,       o
-	0x00f3, 0x0301, 0x006f, 0, // oacute,       dead_acute,       o
-	0x00f4, 0x0302, 0x006f, 0, // ocircumflex,  dead_circumflex,  o
-	0x00f5, 0x0303, 0x006f, 0, // otilde,       dead_tilde,       o
-	0x00f6, 0x0308, 0x006f, 0, // odiaeresis,   dead_diaeresis,   o
-	0x00f9, 0x0300, 0x0075, 0, // ugrave,       dead_grave,       u
-	0x00fa, 0x0301, 0x0075, 0, // uacute,       dead_acute,       u
-	0x00fb, 0x0302, 0x0075, 0, // ucircumflex,  dead_circumflex,  u
-	0x00fc, 0x0308, 0x0075, 0, // udiaeresis,   dead_diaeresis,   u
-	0x00fd, 0x0301, 0x0079, 0, // yacute,       dead_acute,       y
-	0x00ff, 0x0308, 0x0079, 0, // ydiaeresis,   dead_diaeresis,   y
-
-	// Latin-2 (ISO 8859-2)
-	0x0104, 0x0328, 0x0041, 0, // Aogonek,      dead_ogonek,      A
-	0x013d, 0x030c, 0x004c, 0, // Lcaron,       dead_caron,       L
-	0x015a, 0x0301, 0x0053, 0, // Sacute,       dead_acute,       S
-	0x0160, 0x030c, 0x0053, 0, // Scaron,       dead_caron,       S
-	0x015e, 0x0327, 0x0053, 0, // Scedilla,     dead_cedilla,     S
-	0x0164, 0x030c, 0x0054, 0, // Tcaron,       dead_caron,       T
-	0x0179, 0x0301, 0x005a, 0, // Zacute,       dead_acute,       Z
-	0x017d, 0x030c, 0x005a, 0, // Zcaron,       dead_caron,       Z
-	0x017b, 0x0307, 0x005a, 0, // Zabovedot,    dead_abovedot,    Z
-	0x0105, 0x0328, 0x0061, 0, // aogonek,      dead_ogonek,      a
-	0x013e, 0x030c, 0x006c, 0, // lcaron,       dead_caron,       l
-	0x015b, 0x0301, 0x0073, 0, // sacute,       dead_acute,       s
-	0x0161, 0x030c, 0x0073, 0, // scaron,       dead_caron,       s
-	0x015f, 0x0327, 0x0073, 0, // scedilla,     dead_cedilla,     s
-	0x0165, 0x030c, 0x0074, 0, // tcaron,       dead_caron,       t
-	0x017a, 0x0301, 0x007a, 0, // zacute,       dead_acute,       z
-	0x017e, 0x030c, 0x007a, 0, // zcaron,       dead_caron,       z
-	0x017c, 0x0307, 0x007a, 0, // zabovedot,    dead_abovedot,    z
-	0x0154, 0x0301, 0x0052, 0, // Racute,       dead_acute,       R
-	0x0102, 0x0306, 0x0041, 0, // Abreve,       dead_breve,       A
-	0x0139, 0x0301, 0x004c, 0, // Lacute,       dead_acute,       L
-	0x0106, 0x0301, 0x0043, 0, // Cacute,       dead_acute,       C
-	0x010c, 0x030c, 0x0043, 0, // Ccaron,       dead_caron,       C
-	0x0118, 0x0328, 0x0045, 0, // Eogonek,      dead_ogonek,      E
-	0x011a, 0x030c, 0x0045, 0, // Ecaron,       dead_caron,       E
-	0x010e, 0x030c, 0x0044, 0, // Dcaron,       dead_caron,       D
-	0x0143, 0x0301, 0x004e, 0, // Nacute,       dead_acute,       N
-	0x0147, 0x030c, 0x004e, 0, // Ncaron,       dead_caron,       N
-	0x0150, 0x030b, 0x004f, 0, // Odoubleacute, dead_doubleacute, O
-	0x0158, 0x030c, 0x0052, 0, // Rcaron,       dead_caron,       R
-	0x016e, 0x030a, 0x0055, 0, // Uring,        dead_abovering,   U
-	0x0170, 0x030b, 0x0055, 0, // Udoubleacute, dead_doubleacute, U
-	0x0162, 0x0327, 0x0054, 0, // Tcedilla,     dead_cedilla,     T
-	0x0155, 0x0301, 0x0072, 0, // racute,       dead_acute,       r
-	0x0103, 0x0306, 0x0061, 0, // abreve,       dead_breve,       a
-	0x013a, 0x0301, 0x006c, 0, // lacute,       dead_acute,       l
-	0x0107, 0x0301, 0x0063, 0, // cacute,       dead_acute,       c
-	0x010d, 0x030c, 0x0063, 0, // ccaron,       dead_caron,       c
-	0x0119, 0x0328, 0x0065, 0, // eogonek,      dead_ogonek,      e
-	0x011b, 0x030c, 0x0065, 0, // ecaron,       dead_caron,       e
-	0x010f, 0x030c, 0x0064, 0, // dcaron,       dead_caron,       d
-	0x0144, 0x0301, 0x006e, 0, // nacute,       dead_acute,       n
-	0x0148, 0x030c, 0x006e, 0, // ncaron,       dead_caron,       n
-	0x0151, 0x030b, 0x006f, 0, // odoubleacute, dead_doubleacute, o
-	0x0159, 0x030c, 0x0072, 0, // rcaron,       dead_caron,       r
-	0x016f, 0x030a, 0x0075, 0, // uring,        dead_abovering,   u
-	0x0171, 0x030b, 0x0075, 0, // udoubleacute, dead_doubleacute, u
-	0x0163, 0x0327, 0x0074, 0, // tcedilla,     dead_cedilla,     t
-
-	// Latin-3 (ISO 8859-3)
-	0x0124, 0x0302, 0x0048, 0, // Hcircumflex,  dead_circumflex,  H
-	0x0130, 0x0307, 0x0049, 0, // Iabovedot,	dead_abovedot,    I
-	0x011e, 0x0306, 0x0047, 0, // Gbreve,		dead_breve, 	  G
-	0x0134, 0x0302, 0x004a, 0, // Jcircumflex,  dead_circumflex,  J
-	0x0125, 0x0302, 0x0068, 0, // hcircumflex,  dead_circumflex,  h
-	0x011f, 0x0306, 0x0067, 0, // gbreve,		dead_breve, 	  g
-	0x0135, 0x0302, 0x006a, 0, // jcircumflex,  dead_circumflex,  j
-	0x010a, 0x0307, 0x0043, 0, // Cabovedot,	dead_abovedot,    C
-	0x0108, 0x0302, 0x0043, 0, // Ccircumflex,  dead_circumflex,  C
-	0x0120, 0x0307, 0x0047, 0, // Gabovedot,	dead_abovedot,    G
-	0x011c, 0x0302, 0x0047, 0, // Gcircumflex,  dead_circumflex,  G
-	0x016c, 0x0306, 0x0055, 0, // Ubreve,		dead_breve, 	  U
-	0x015c, 0x0302, 0x0053, 0, // Scircumflex,  dead_circumflex,  S
-	0x010b, 0x0307, 0x0063, 0, // cabovedot,	dead_abovedot,    c
-	0x0109, 0x0302, 0x0063, 0, // ccircumflex,  dead_circumflex,  c
-	0x0121, 0x0307, 0x0067, 0, // gabovedot,	dead_abovedot,    g
-	0x011d, 0x0302, 0x0067, 0, // gcircumflex,  dead_circumflex,  g
-	0x016d, 0x0306, 0x0075, 0, // ubreve,		dead_breve, 	  u
-	0x015d, 0x0302, 0x0073, 0, // scircumflex,  dead_circumflex,  s
-
-	// Latin-4 (ISO 8859-4)
-	0x0156, 0x0327, 0x0052, 0, // Rcedilla, 	dead_cedilla,	  R
-	0x0128, 0x0303, 0x0049, 0, // Itilde,		dead_tilde, 	  I
-	0x013b, 0x0327, 0x004c, 0, // Lcedilla, 	dead_cedilla,	  L
-	0x0112, 0x0304, 0x0045, 0, // Emacron,  	dead_macron,	  E
-	0x0122, 0x0327, 0x0047, 0, // Gcedilla, 	dead_cedilla,	  G
-	0x0157, 0x0327, 0x0072, 0, // rcedilla, 	dead_cedilla,	  r
-	0x0129, 0x0303, 0x0069, 0, // itilde,		dead_tilde, 	  i
-	0x013c, 0x0327, 0x006c, 0, // lcedilla, 	dead_cedilla,	  l
-	0x0113, 0x0304, 0x0065, 0, // emacron,  	dead_macron,	  e
-	0x0123, 0x0327, 0x0067, 0, // gcedilla, 	dead_cedilla,	  g
-	0x0100, 0x0304, 0x0041, 0, // Amacron,  	dead_macron,	  A
-	0x012e, 0x0328, 0x0049, 0, // Iogonek,  	dead_ogonek,	  I
-	0x0116, 0x0307, 0x0045, 0, // Eabovedot,	dead_abovedot,    E
-	0x012a, 0x0304, 0x0049, 0, // Imacron,  	dead_macron,	  I
-	0x0145, 0x0327, 0x004e, 0, // Ncedilla, 	dead_cedilla,	  N
-	0x014c, 0x0304, 0x004f, 0, // Omacron,  	dead_macron,	  O
-	0x0136, 0x0327, 0x004b, 0, // Kcedilla, 	dead_cedilla,	  K
-	0x0172, 0x0328, 0x0055, 0, // Uogonek,  	dead_ogonek,	  U
-	0x0168, 0x0303, 0x0055, 0, // Utilde,		dead_tilde, 	  U
-	0x016a, 0x0304, 0x0055, 0, // Umacron,  	dead_macron,	  U
-	0x0101, 0x0304, 0x0061, 0, // amacron,  	dead_macron,	  a
-	0x012f, 0x0328, 0x0069, 0, // iogonek,  	dead_ogonek,	  i
-	0x0117, 0x0307, 0x0065, 0, // eabovedot,	dead_abovedot,    e
-	0x012b, 0x0304, 0x0069, 0, // imacron,  	dead_macron,	  i
-	0x0146, 0x0327, 0x006e, 0, // ncedilla, 	dead_cedilla,	  n
-	0x014d, 0x0304, 0x006f, 0, // omacron,  	dead_macron,	  o
-	0x0137, 0x0327, 0x006b, 0, // kcedilla, 	dead_cedilla,	  k
-	0x0173, 0x0328, 0x0075, 0, // uogonek,  	dead_ogonek,	  u
-	0x0169, 0x0303, 0x0075, 0, // utilde,		dead_tilde, 	  u
-	0x016b, 0x0304, 0x0075, 0, // umacron,  	dead_macron,	  u
-
-	// Latin-8 (ISO 8859-14)
-	0x1e02, 0x0307, 0x0042, 0, // Babovedot,	dead_abovedot,    B
-	0x1e03, 0x0307, 0x0062, 0, // babovedot,	dead_abovedot,    b
-	0x1e0a, 0x0307, 0x0044, 0, // Dabovedot,	dead_abovedot,    D
-	0x1e80, 0x0300, 0x0057, 0, // Wgrave,		dead_grave, 	  W
-	0x1e82, 0x0301, 0x0057, 0, // Wacute,		dead_acute, 	  W
-	0x1e0b, 0x0307, 0x0064, 0, // dabovedot,	dead_abovedot,    d
-	0x1ef2, 0x0300, 0x0059, 0, // Ygrave,		dead_grave, 	  Y
-	0x1e1e, 0x0307, 0x0046, 0, // Fabovedot,	dead_abovedot,    F
-	0x1e1f, 0x0307, 0x0066, 0, // fabovedot,	dead_abovedot,    f
-	0x1e40, 0x0307, 0x004d, 0, // Mabovedot,	dead_abovedot,    M
-	0x1e41, 0x0307, 0x006d, 0, // mabovedot,	dead_abovedot,    m
-	0x1e56, 0x0307, 0x0050, 0, // Pabovedot,	dead_abovedot,    P
-	0x1e81, 0x0300, 0x0077, 0, // wgrave,		dead_grave, 	  w
-	0x1e57, 0x0307, 0x0070, 0, // pabovedot,	dead_abovedot,    p
-	0x1e83, 0x0301, 0x0077, 0, // wacute,		dead_acute, 	  w
-	0x1e60, 0x0307, 0x0053, 0, // Sabovedot,	dead_abovedot,    S
-	0x1ef3, 0x0300, 0x0079, 0, // ygrave,		dead_grave, 	  y
-	0x1e84, 0x0308, 0x0057, 0, // Wdiaeresis,	dead_diaeresis,   W
-	0x1e85, 0x0308, 0x0077, 0, // wdiaeresis,	dead_diaeresis,   w
-	0x1e61, 0x0307, 0x0073, 0, // sabovedot,	dead_abovedot,    s
-	0x0174, 0x0302, 0x0057, 0, // Wcircumflex,  dead_circumflex,  W
-	0x1e6a, 0x0307, 0x0054, 0, // Tabovedot,	dead_abovedot,    T
-	0x0176, 0x0302, 0x0059, 0, // Ycircumflex,  dead_circumflex,  Y
-	0x0175, 0x0302, 0x0077, 0, // wcircumflex,  dead_circumflex,  w
-	0x1e6b, 0x0307, 0x0074, 0, // tabovedot,	dead_abovedot,    t
-	0x0177, 0x0302, 0x0079, 0, // ycircumflex,  dead_circumflex,  y
-
-	// Latin-9 (ISO 8859-15)
-	0x0178, 0x0308, 0x0059, 0, // Ydiaeresis,   dead_diaeresis,   Y
-
-	// Compose key sequences
-	0x00c6, kKeyCompose, 0x0041, 0x0045, 0, // AE,  		   A,		   E
-	0x00c1, kKeyCompose, 0x0041, 0x0027, 0, // Aacute,  	   A,		   apostrophe
-	0x00c2, kKeyCompose, 0x0041, 0x0053, 0, // Acircumflex,    A,		   asciicircum
-	0x00c3, kKeyCompose, 0x0041, 0x0022, 0, // Adiaeresis,     A,		   quotedbl
-	0x00c0, kKeyCompose, 0x0041, 0x0060, 0, // Agrave,  	   A,		   grave
-	0x00c5, kKeyCompose, 0x0041, 0x002a, 0, // Aring,		   A,		   asterisk
-	0x00c3, kKeyCompose, 0x0041, 0x007e, 0, // Atilde,  	   A,		   asciitilde
-	0x00c7, kKeyCompose, 0x0043, 0x002c, 0, // Ccedilla,	   C,		   comma
-	0x00d0, kKeyCompose, 0x0044, 0x002d, 0, // ETH, 		   D,		   minus
-	0x00c9, kKeyCompose, 0x0045, 0x0027, 0, // Eacute,  	   E,		   apostrophe
-	0x00ca, kKeyCompose, 0x0045, 0x0053, 0, // Ecircumflex,    E,		   asciicircum
-	0x00cb, kKeyCompose, 0x0045, 0x0022, 0, // Ediaeresis,     E,		   quotedbl
-	0x00c8, kKeyCompose, 0x0045, 0x0060, 0, // Egrave,  	   E,		   grave
-	0x00cd, kKeyCompose, 0x0049, 0x0027, 0, // Iacute,  	   I,		   apostrophe
-	0x00ce, kKeyCompose, 0x0049, 0x0053, 0, // Icircumflex,    I,		   asciicircum
-	0x00cf, kKeyCompose, 0x0049, 0x0022, 0, // Idiaeresis,     I,		   quotedbl
-	0x00cc, kKeyCompose, 0x0049, 0x0060, 0, // Igrave,  	   I,		   grave
-	0x00d1, kKeyCompose, 0x004e, 0x007e, 0, // Ntilde,  	   N,		   asciitilde
-	0x00d3, kKeyCompose, 0x004f, 0x0027, 0, // Oacute,  	   O,		   apostrophe
-	0x00d4, kKeyCompose, 0x004f, 0x0053, 0, // Ocircumflex,    O,		   asciicircum
-	0x00d6, kKeyCompose, 0x004f, 0x0022, 0, // Odiaeresis,     O,		   quotedbl
-	0x00d2, kKeyCompose, 0x004f, 0x0060, 0, // Ograve,  	   O,		   grave
-	0x00d8, kKeyCompose, 0x004f, 0x002f, 0, // Ooblique,	   O,		   slash
-	0x00d5, kKeyCompose, 0x004f, 0x007e, 0, // Otilde,  	   O,		   asciitilde
-	0x00de, kKeyCompose, 0x0054, 0x0048, 0, // THORN,		   T,		   H
-	0x00da, kKeyCompose, 0x0055, 0x0027, 0, // Uacute,  	   U,		   apostrophe
-	0x00db, kKeyCompose, 0x0055, 0x0053, 0, // Ucircumflex,    U,		   asciicircum
-	0x00dc, kKeyCompose, 0x0055, 0x0022, 0, // Udiaeresis,     U,		   quotedbl
-	0x00d9, kKeyCompose, 0x0055, 0x0060, 0, // Ugrave,  	   U,		   grave
-	0x00dd, kKeyCompose, 0x0059, 0x0027, 0, // Yacute,  	   Y,		   apostrophe
-	0x00e1, kKeyCompose, 0x0061, 0x0027, 0, // aacute,  	   a,		   apostrophe
-	0x00e2, kKeyCompose, 0x0061, 0x0053, 0, // acircumflex,    a,		   asciicircum
-	0x00b4, kKeyCompose, 0x0027, 0x0027, 0, // acute,		   apostrophe, apostrophe
-	0x00e4, kKeyCompose, 0x0061, 0x0022, 0, // adiaeresis,     a,		   quotedbl
-	0x00e6, kKeyCompose, 0x0061, 0x0065, 0, // ae,  		   a,		   e
-	0x00e0, kKeyCompose, 0x0061, 0x0060, 0, // agrave,  	   a,		   grave
-	0x00e5, kKeyCompose, 0x0061, 0x002a, 0, // aring,		   a,		   asterisk
-	0x0040, kKeyCompose, 0x0041, 0x0054, 0, // at,  		   A,		   T
-	0x00e3, kKeyCompose, 0x0061, 0x007e, 0, // atilde,  	   a,		   asciitilde
-	0x005c, kKeyCompose, 0x002f, 0x002f, 0, // backslash,	   slash,	   slash
-	0x007c, kKeyCompose, 0x004c, 0x0056, 0, // bar, 		   L,		   V
-	0x007b, kKeyCompose, 0x0028, 0x002d, 0, // braceleft,	   parenleft,  minus
-	0x007d, kKeyCompose, 0x0029, 0x002d, 0, // braceright,     parenright, minus
-	0x005b, kKeyCompose, 0x0028, 0x0028, 0, // bracketleft,    parenleft,  parenleft
-	0x005d, kKeyCompose, 0x0029, 0x0029, 0, // bracketright,   parenright, parenright
-	0x00a6, kKeyCompose, 0x0042, 0x0056, 0, // brokenbar,	   B,		   V
-	0x00e7, kKeyCompose, 0x0063, 0x002c, 0, // ccedilla,	   c,		   comma
-	0x00b8, kKeyCompose, 0x002c, 0x002c, 0, // cedilla, 	   comma,	   comma
-	0x00a2, kKeyCompose, 0x0063, 0x002f, 0, // cent,		   c,		   slash
-	0x00a9, kKeyCompose, 0x0028, 0x0063, 0, // copyright,	   parenleft,  c
-	0x00a4, kKeyCompose, 0x006f, 0x0078, 0, // currency,	   o,		   x
-	0x00b0, kKeyCompose, 0x0030, 0x0053, 0, // degree,  	   0,		   asciicircum
-	0x00a8, kKeyCompose, 0x0022, 0x0022, 0, // diaeresis,	   quotedbl,   quotedbl
-	0x00f7, kKeyCompose, 0x003a, 0x002d, 0, // division,	   colon,	   minus
-	0x00e9, kKeyCompose, 0x0065, 0x0027, 0, // eacute,  	   e,		   apostrophe
-	0x00ea, kKeyCompose, 0x0065, 0x0053, 0, // ecircumflex,    e,		   asciicircum
-	0x00eb, kKeyCompose, 0x0065, 0x0022, 0, // ediaeresis,     e,		   quotedbl
-	0x00e8, kKeyCompose, 0x0065, 0x0060, 0, // egrave,  	   e,		   grave
-	0x00f0, kKeyCompose, 0x0064, 0x002d, 0, // eth, 		   d,		   minus
-	0x00a1, kKeyCompose, 0x0021, 0x0021, 0, // exclamdown,     exclam,     exclam
-	0x00ab, kKeyCompose, 0x003c, 0x003c, 0, // guillemotleft,  less,	   less
-	0x00bb, kKeyCompose, 0x003e, 0x003e, 0, // guillemotright, greater,    greater
-	0x0023, kKeyCompose, 0x002b, 0x002b, 0, // numbersign,     plus,	   plus
-	0x00ad, kKeyCompose, 0x002d, 0x002d, 0, // hyphen,  	   minus,	   minus
-	0x00ed, kKeyCompose, 0x0069, 0x0027, 0, // iacute,  	   i,		   apostrophe
-	0x00ee, kKeyCompose, 0x0069, 0x0053, 0, // icircumflex,    i,		   asciicircum
-	0x00ef, kKeyCompose, 0x0069, 0x0022, 0, // idiaeresis,     i,		   quotedbl
-	0x00ec, kKeyCompose, 0x0069, 0x0060, 0, // igrave,  	   i,		   grave
-	0x00af, kKeyCompose, 0x002d, 0x0053, 0, // macron,  	   minus,	   asciicircum
-	0x00ba, kKeyCompose, 0x006f, 0x005f, 0, // masculine,	   o,		   underscore
-	0x00b5, kKeyCompose, 0x0075, 0x002f, 0, // mu,  		   u,		   slash
-	0x00d7, kKeyCompose, 0x0078, 0x0078, 0, // multiply,	   x,		   x
-	0x00a0, kKeyCompose, 0x0020, 0x0020, 0, // nobreakspace,   space,	   space
-	0x00ac, kKeyCompose, 0x002c, 0x002d, 0, // notsign, 	   comma,	   minus
-	0x00f1, kKeyCompose, 0x006e, 0x007e, 0, // ntilde,  	   n,		   asciitilde
-	0x00f3, kKeyCompose, 0x006f, 0x0027, 0, // oacute,  	   o,		   apostrophe
-	0x00f4, kKeyCompose, 0x006f, 0x0053, 0, // ocircumflex,    o,		   asciicircum
-	0x00f6, kKeyCompose, 0x006f, 0x0022, 0, // odiaeresis,     o,		   quotedbl
-	0x00f2, kKeyCompose, 0x006f, 0x0060, 0, // ograve,  	   o,		   grave
-	0x00bd, kKeyCompose, 0x0031, 0x0032, 0, // onehalf, 	   1,		   2
-	0x00bc, kKeyCompose, 0x0031, 0x0034, 0, // onequarter,     1,		   4
-	0x00b9, kKeyCompose, 0x0031, 0x0053, 0, // onesuperior,    1,		   asciicircum
-	0x00aa, kKeyCompose, 0x0061, 0x005f, 0, // ordfeminine,    a,		   underscore
-	0x00f8, kKeyCompose, 0x006f, 0x002f, 0, // oslash,  	   o,		   slash
-	0x00f5, kKeyCompose, 0x006f, 0x007e, 0, // otilde,  	   o,		   asciitilde
-	0x00b6, kKeyCompose, 0x0070, 0x0021, 0, // paragraph,	   p,		   exclam
-	0x00b7, kKeyCompose, 0x002e, 0x002e, 0, // periodcentered, period,     period
-	0x00b1, kKeyCompose, 0x002b, 0x002d, 0, // plusminus,	   plus,	   minus
-	0x00bf, kKeyCompose, 0x003f, 0x003f, 0, // questiondown,   question,   question
-	0x00ae, kKeyCompose, 0x0028, 0x0072, 0, // registered,     parenleft,  r
-	0x00a7, kKeyCompose, 0x0073, 0x006f, 0, // section, 	   s,		   o
-	0x00df, kKeyCompose, 0x0073, 0x0073, 0, // ssharp,  	   s,		   s
-	0x00a3, kKeyCompose, 0x004c, 0x002d, 0, // sterling,	   L,		   minus
-	0x00fe, kKeyCompose, 0x0074, 0x0068, 0, // thorn,		   t,		   h
-	0x00be, kKeyCompose, 0x0033, 0x0034, 0, // threequarters,  3,		   4
-	0x00b3, kKeyCompose, 0x0033, 0x0053, 0, // threesuperior,  3,		   asciicircum
-	0x00b2, kKeyCompose, 0x0032, 0x0053, 0, // twosuperior,    2,		   asciicircum
-	0x00fa, kKeyCompose, 0x0075, 0x0027, 0, // uacute,  	   u,		   apostrophe
-	0x00fb, kKeyCompose, 0x0075, 0x0053, 0, // ucircumflex,    u,		   asciicircum
-	0x00fc, kKeyCompose, 0x0075, 0x0022, 0, // udiaeresis,     u,		   quotedbl
-	0x00f9, kKeyCompose, 0x0075, 0x0060, 0, // ugrave,  	   u,		   grave
-	0x00fd, kKeyCompose, 0x0079, 0x0027, 0, // yacute,  	   y,		   apostrophe
-	0x00ff, kKeyCompose, 0x0079, 0x0022, 0, // ydiaeresis,     y,		   quotedbl
-	0x00a5, kKeyCompose, 0x0079, 0x003d, 0, // yen, 		   y,		   equal
-
-	// end of table
-	0
-};
-
-static const KeyID s_numpadTable[] = {
-	kKeyKP_Space,		0x0020,
-	kKeyKP_Tab,			kKeyTab,
-	kKeyKP_Enter,		kKeyReturn,
-	kKeyKP_F1,			kKeyF1,
-	kKeyKP_F2,			kKeyF2,
-	kKeyKP_F3,			kKeyF3,
-	kKeyKP_F4,			kKeyF4,
-	kKeyKP_Home,		kKeyHome,
-	kKeyKP_Left,		kKeyLeft,
-	kKeyKP_Up,			kKeyUp,
-	kKeyKP_Right,		kKeyRight,
-	kKeyKP_Down,		kKeyDown,
-	kKeyKP_PageUp,		kKeyPageUp,
-	kKeyKP_PageDown,	kKeyPageDown,
-	kKeyKP_End,			kKeyEnd,
-	kKeyKP_Begin,		kKeyBegin,
-	kKeyKP_Insert,		kKeyInsert,
-	kKeyKP_Delete,		kKeyDelete,
-	kKeyKP_Equal,		0x003d,
-	kKeyKP_Multiply,	0x002a,
-	kKeyKP_Add,			0x002b,
-	kKeyKP_Separator,	0x002c,
-	kKeyKP_Subtract,	0x002d,
-	kKeyKP_Decimal,		0x002e,
-	kKeyKP_Divide,		0x002f,
-	kKeyKP_0,			0x0030,
-	kKeyKP_1,			0x0031,
-	kKeyKP_2,			0x0032,
-	kKeyKP_3,			0x0033,
-	kKeyKP_4,			0x0034,
-	kKeyKP_5,			0x0035,
-	kKeyKP_6,			0x0036,
-	kKeyKP_7,			0x0037,
-	kKeyKP_8,			0x0038,
-	kKeyKP_9,			0x0039
-};
-
-//
-// CKeyState
-//
-
-CKeyState::CKeyState() :
-	m_mask(0)
-{
-	memset(&m_keys, 0, sizeof(m_keys));
-	memset(&m_syntheticKeys, 0, sizeof(m_syntheticKeys));
-	memset(&m_keyClientData, 0, sizeof(m_keyClientData));
-	memset(&m_serverKeys, 0, sizeof(m_serverKeys));
-}
-
-CKeyState::~CKeyState()
-{
-	// do nothing
-}
-
-void
-CKeyState::onKey(KeyButton button, bool down, KeyModifierMask newState)
-{
-	// update modifier state
-	m_mask = newState;
-	LOG((CLOG_DEBUG1 "new mask: 0x%04x", m_mask));
-
-	// ignore bogus buttons
-	button &= kButtonMask;
-	if (button == 0) {
-		return;
-	}
-
-	// update key state
-	if (down) {
-		m_keys[button]          = 1;
-		m_syntheticKeys[button] = 1;
-	}
-	else {
-		m_keys[button]          = 0;
-		m_syntheticKeys[button] = 0;
-	}
-}
-
-void
-CKeyState::sendKeyEvent(
-				void* target, bool press, bool isAutoRepeat,
-				KeyID key, KeyModifierMask mask,
-				SInt32 count, KeyButton button)
-{
-	if (m_keyMap.isHalfDuplex(key, button)) {
-		if (isAutoRepeat) {
-			// ignore auto-repeat on half-duplex keys
-		}
-		else {
-			EVENTQUEUE->addEvent(CEvent(getKeyDownEvent(), target,
-							CKeyInfo::alloc(key, mask, button, 1)));
-			EVENTQUEUE->addEvent(CEvent(getKeyUpEvent(), target,
-							CKeyInfo::alloc(key, mask, button, 1)));
-		}
-	}
-	else {
-		if (isAutoRepeat) {
-			EVENTQUEUE->addEvent(CEvent(getKeyRepeatEvent(), target,
-							 CKeyInfo::alloc(key, mask, button, count)));
-		}
-		else if (press) {
-			EVENTQUEUE->addEvent(CEvent(getKeyDownEvent(), target,
-							CKeyInfo::alloc(key, mask, button, 1)));
-		}
-		else {
-			EVENTQUEUE->addEvent(CEvent(getKeyUpEvent(), target,
-							CKeyInfo::alloc(key, mask, button, 1)));
-		}
-	}
-}
-
-void
-CKeyState::updateKeyMap()
-{
-	// get the current keyboard map
-	CKeyMap keyMap;
-	getKeyMap(keyMap);
-	m_keyMap.swap(keyMap);
-	m_keyMap.finish();
-
-	// add special keys
-	addCombinationEntries();
-	addKeypadEntries();
-	addAliasEntries();
-}
-
-void
-CKeyState::updateKeyState()
-{
-	// reset our state
-	memset(&m_keys, 0, sizeof(m_keys));
-	memset(&m_syntheticKeys, 0, sizeof(m_syntheticKeys));
-	memset(&m_keyClientData, 0, sizeof(m_keyClientData));
-	memset(&m_serverKeys, 0, sizeof(m_serverKeys));
-	m_activeModifiers.clear();
-
-	// get the current keyboard state
-	KeyButtonSet keysDown;
-	pollPressedKeys(keysDown);
-	for (KeyButtonSet::const_iterator i = keysDown.begin();
-								i != keysDown.end(); ++i) {
-		m_keys[*i] = 1;
-	}
-
-	// get the current modifier state
-	m_mask = pollActiveModifiers();
-
-	// set active modifiers
-	CAddActiveModifierContext addModifierContext(pollActiveGroup(), m_mask,
-												m_activeModifiers);
-	m_keyMap.foreachKey(&CKeyState::addActiveModifierCB, &addModifierContext);
-
-	LOG((CLOG_DEBUG1 "modifiers on update: 0x%04x", m_mask));
-}
-
-void
-CKeyState::addActiveModifierCB(KeyID, SInt32 group,
-				CKeyMap::KeyItem& keyItem, void* vcontext)
-{
-	CAddActiveModifierContext* context =
-		reinterpret_cast<CAddActiveModifierContext*>(vcontext);
-	if (group == context->m_activeGroup &&
-		(keyItem.m_generates & context->m_mask) != 0) {
-		context->m_activeModifiers.insert(std::make_pair(
-								keyItem.m_generates, keyItem));
-	}	
-}
-
-void
-CKeyState::setHalfDuplexMask(KeyModifierMask mask)
-{
-	m_keyMap.clearHalfDuplexModifiers();
-	if ((mask & KeyModifierCapsLock) != 0) {
-		m_keyMap.addHalfDuplexModifier(kKeyCapsLock);
-	}
-	if ((mask & KeyModifierNumLock) != 0) {
-		m_keyMap.addHalfDuplexModifier(kKeyNumLock);
-	}
-	if ((mask & KeyModifierScrollLock) != 0) {
-		m_keyMap.addHalfDuplexModifier(kKeyScrollLock);
-	}
-}
-
-void
-CKeyState::fakeKeyDown(KeyID id, KeyModifierMask mask, KeyButton serverID)
-{
-	// if this server key is already down then this is probably a
-	// mis-reported autorepeat.
-	serverID &= kButtonMask;
-	if (m_serverKeys[serverID] != 0) {
-		fakeKeyRepeat(id, mask, 1, serverID);
-		return;
-	}
-
-	// ignore certain keys
-	if (isIgnoredKey(id, mask)) {
-		LOG((CLOG_DEBUG1 "ignored key %04x %04x", id, mask));
-		return;
-	}
-
-	// get keys for key press
-	Keystrokes keys;
-	ModifierToKeys oldActiveModifiers = m_activeModifiers;
-	const CKeyMap::KeyItem* keyItem =
-		m_keyMap.mapKey(keys, id, pollActiveGroup(), m_activeModifiers,
-								getActiveModifiersRValue(), mask, false);
-	if (keyItem == NULL) {
-		return;
-	}
-	KeyButton localID = (KeyButton)(keyItem->m_button & kButtonMask);
-	updateModifierKeyState(localID, oldActiveModifiers, m_activeModifiers);
-	if (localID != 0) {
-		// note keys down
-		++m_keys[localID];
-		++m_syntheticKeys[localID];
-		m_keyClientData[localID] = keyItem->m_client;
-		m_serverKeys[serverID]   = localID;
-	}
-
-	// generate key events
-	fakeKeys(keys, 1);
-}
-
-void
-CKeyState::fakeKeyRepeat(
-				KeyID id, KeyModifierMask mask,
-				SInt32 count, KeyButton serverID)
-{
-	serverID &= kButtonMask;
-
-	// if we haven't seen this button go down then ignore it
-	KeyButton oldLocalID = m_serverKeys[serverID];
-	if (oldLocalID == 0) {
-		return;
-	}
-
-	// get keys for key repeat
-	Keystrokes keys;
-	ModifierToKeys oldActiveModifiers = m_activeModifiers;
-	const CKeyMap::KeyItem* keyItem =
-		m_keyMap.mapKey(keys, id, pollActiveGroup(), m_activeModifiers,
-								getActiveModifiersRValue(), mask, true);
-	if (keyItem == NULL) {
-		return;
-	}
-	KeyButton localID = (KeyButton)(keyItem->m_button & kButtonMask);
-	if (localID == 0) {
-		return;
-	}
-
-	// if the KeyButton for the auto-repeat is not the same as for the
-	// initial press then mark the initial key as released and the new
-	// key as pressed.  this can happen when we auto-repeat after a
-	// dead key.  for example, a dead accent followed by 'a' will
-	// generate an 'a with accent' followed by a repeating 'a'.  the
-	// KeyButtons for the two KeyIDs might be different.
-	if (localID != oldLocalID) {
-		// replace key up with previous KeyButton but leave key down
-		// alone so it uses the new KeyButton.
-		for (Keystrokes::iterator index = keys.begin();
-								index != keys.end(); ++index) {
-			if (index->m_type == Keystroke::kButton &&
-				index->m_data.m_button.m_button == localID) {
-				index->m_data.m_button.m_button = oldLocalID;
-				break;
-			}
-		}
-
-		// note that old key is now up
-		--m_keys[oldLocalID];
-		--m_syntheticKeys[oldLocalID];
-
-		// note keys down
-		updateModifierKeyState(localID, oldActiveModifiers, m_activeModifiers);
-		++m_keys[localID];
-		++m_syntheticKeys[localID];
-		m_keyClientData[localID] = keyItem->m_client;
-		m_serverKeys[serverID]   = localID;
-	}
-
-	// generate key events
-	fakeKeys(keys, count);
-}
-
-void
-CKeyState::fakeKeyUp(KeyButton serverID)
-{
-	// if we haven't seen this button go down then ignore it
-	KeyButton localID = m_serverKeys[serverID & kButtonMask];
-	if (localID == 0) {
-		return;
-	}
-
-	// get the sequence of keys to simulate key release
-	Keystrokes keys;
-	keys.push_back(Keystroke(localID, false, false, m_keyClientData[localID]));
-
-	// note keys down
-	--m_keys[localID];
-	--m_syntheticKeys[localID];
-	m_serverKeys[serverID] = 0;
-
-	// check if this is a modifier
-	for (ModifierToKeys::iterator i = m_activeModifiers.begin();
-								i != m_activeModifiers.end(); ++i) {
-		if (i->second.m_button == localID && !i->second.m_lock) {
-			// modifier is no longer down
-			KeyModifierMask mask = i->first;
-			m_activeModifiers.erase(i);
-
-			if (m_activeModifiers.count(mask) == 0) {
-				// no key for modifier is down so deactivate modifier
-				m_mask &= ~mask;
-				LOG((CLOG_DEBUG1 "new state %04x", m_mask));
-			}
-
-			break;
-		}
-	}
-
-	// generate key events
-	fakeKeys(keys, 1);
-}
-
-void
-CKeyState::fakeAllKeysUp()
-{
-	Keystrokes keys;
-	for (KeyButton i = 0; i < IKeyState::kNumButtons; ++i) {
-		if (m_syntheticKeys[i] > 0) {
-			keys.push_back(Keystroke(i, false, false, m_keyClientData[i]));
-			m_keys[i]          = 0;
-			m_syntheticKeys[i] = 0;
-		}
-	}
-	fakeKeys(keys, 1);
-	memset(&m_serverKeys, 0, sizeof(m_serverKeys));
-	m_activeModifiers.clear();
-	m_mask = pollActiveModifiers();
-}
-
-bool
-CKeyState::isKeyDown(KeyButton button) const
-{
-	return (m_keys[button & kButtonMask] > 0);
-}
-
-KeyModifierMask
-CKeyState::getActiveModifiers() const
-{
-	return m_mask;
-}
-
-KeyModifierMask&
-CKeyState::getActiveModifiersRValue()
-{
-	return m_mask;
-}
-
-SInt32
-CKeyState::getEffectiveGroup(SInt32 group, SInt32 offset) const
-{
-	return m_keyMap.getEffectiveGroup(group, offset);
-}
-
-bool
-CKeyState::isIgnoredKey(KeyID key, KeyModifierMask) const
-{
-	switch (key) {
-	case kKeyCapsLock:
-	case kKeyNumLock:
-	case kKeyScrollLock:
-		return true;
-
-	default:
-		return false;
-	}
-}
-
-KeyButton
-CKeyState::getButton(KeyID id, SInt32 group) const
-{
-	const CKeyMap::KeyItemList* items =
-		m_keyMap.findCompatibleKey(id, group, 0, 0);
-	if (items == NULL) {
-		return 0;
-	}
-	else {
-		return items->back().m_button;
-	}
-}
-
-void
-CKeyState::addAliasEntries()
-{
-	for (SInt32 g = 0, n = m_keyMap.getNumGroups(); g < n; ++g) {
-		// if we can't shift any kKeyTab key in a particular group but we can
-		// shift kKeyLeftTab then add a shifted kKeyTab entry that matches a
-		// shifted kKeyLeftTab entry.
-		m_keyMap.addKeyAliasEntry(kKeyTab, g,
-								KeyModifierShift, KeyModifierShift,
-								kKeyLeftTab,
-								KeyModifierShift, KeyModifierShift);
-
-		// if we have no kKeyLeftTab but we do have a kKeyTab that can be
-		// shifted then add kKeyLeftTab that matches a kKeyTab.
-		m_keyMap.addKeyAliasEntry(kKeyLeftTab, g,
-								KeyModifierShift, KeyModifierShift,
-								kKeyTab,
-								0, KeyModifierShift);
-
-		// map non-breaking space to space
-		m_keyMap.addKeyAliasEntry(0x20, g, 0, 0, 0xa0, 0, 0);
-	}
-}
-
-void
-CKeyState::addKeypadEntries()
-{
-	// map every numpad key to its equivalent non-numpad key if it's not
-	// on the keyboard.
-	for (SInt32 g = 0, n = m_keyMap.getNumGroups(); g < n; ++g) {
-		for (size_t i = 0; i < sizeof(s_numpadTable) /
-								sizeof(s_numpadTable[0]); i += 2) {
-			m_keyMap.addKeyCombinationEntry(s_numpadTable[i], g,
-								s_numpadTable + i + 1, 1);
-		}
-	}
-}
-
-void
-CKeyState::addCombinationEntries()
-{
-	for (SInt32 g = 0, n = m_keyMap.getNumGroups(); g < n; ++g) {
-		// add dead and compose key composition sequences
-		for (const KeyID* i = s_decomposeTable; *i != 0; ++i) {
-			// count the decomposed keys for this key
-			UInt32 numKeys = 0;
-			for (const KeyID* j = i; *++j != 0; ) {
-				++numKeys;
-			}
-
-			// add an entry for this key
-			m_keyMap.addKeyCombinationEntry(*i, g, i + 1, numKeys);
-
-			// next key
-			i += numKeys + 1;
-		}
-	}
-}
-
-void
-CKeyState::fakeKeys(const Keystrokes& keys, UInt32 count)
-{
-	// do nothing if no keys or no repeats
-	if (count == 0 || keys.empty()) {
-		return;
-	}
-
-	// generate key events
-	LOG((CLOG_DEBUG1 "keystrokes:"));
-	for (Keystrokes::const_iterator k = keys.begin(); k != keys.end(); ) {
-		if (k->m_type == Keystroke::kButton && k->m_data.m_button.m_repeat) {
-			// repeat from here up to but not including the next key
-			// with m_repeat == false count times.
-			Keystrokes::const_iterator start = k;
-			while (count-- > 0) {
-				// send repeating events
-				for (k = start; k != keys.end() &&
-								k->m_type == Keystroke::kButton &&
-								k->m_data.m_button.m_repeat; ++k) {
-					fakeKey(*k);
-				}
-			}
-
-			// note -- k is now on the first non-repeat key after the
-			// repeat keys, exactly where we'd like to continue from.
-		}
-		else {
-			// send event
-			fakeKey(*k);
-
-			// next key
-			++k;
-		}
-	}
-}
-
-void
-CKeyState::updateModifierKeyState(KeyButton button,
-				const ModifierToKeys& oldModifiers,
-				const ModifierToKeys& newModifiers)
-{
-	// get the pressed modifier buttons before and after
-	CKeyMap::ButtonToKeyMap oldKeys, newKeys;
-	for (ModifierToKeys::const_iterator i = oldModifiers.begin();
-								i != oldModifiers.end(); ++i) {
-		oldKeys.insert(std::make_pair(i->second.m_button, &i->second));
-	}
-	for (ModifierToKeys::const_iterator i = newModifiers.begin();
-								i != newModifiers.end(); ++i) {
-		newKeys.insert(std::make_pair(i->second.m_button, &i->second));
-	}
-
-	// get the modifier buttons that were pressed or released
-	CKeyMap::ButtonToKeyMap pressed, released;
-	std::set_difference(oldKeys.begin(), oldKeys.end(),
-						newKeys.begin(), newKeys.end(),
-						std::inserter(released, released.end()),
-						ButtonToKeyLess());
-	std::set_difference(newKeys.begin(), newKeys.end(),
-						oldKeys.begin(), oldKeys.end(),
-						std::inserter(pressed, pressed.end()),
-						ButtonToKeyLess());
-
-	// update state
-	for (CKeyMap::ButtonToKeyMap::const_iterator i = released.begin();
-								i != released.end(); ++i) {
-		if (i->first != button) {
-			m_keys[i->first]          = 0;
-			m_syntheticKeys[i->first] = 0;
-		}
-	}
-	for (CKeyMap::ButtonToKeyMap::const_iterator i = pressed.begin();
-								i != pressed.end(); ++i) {
-		if (i->first != button) {
-			m_keys[i->first]          = 1;
-			m_syntheticKeys[i->first] = 1;
-			m_keyClientData[i->first] = i->second->m_client;
-		}
-	}
-}
-
-
-//
-// CKeyState::CAddActiveModifierContext
-//
-
-CKeyState::CAddActiveModifierContext::CAddActiveModifierContext(
-				SInt32 group, KeyModifierMask mask,
-				ModifierToKeys&	activeModifiers) :
-	m_activeGroup(group),
-	m_mask(mask),
-	m_activeModifiers(activeModifiers)
-{
-	// do nothing
-}
Index: lib/synergy/CServerApp.h
===================================================================
--- lib/synergy/CServerApp.h	(.../edge)	(revision 365)
+++ lib/synergy/CServerApp.h	(.../crazy)	(revision 365)
@@ -1,60 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#pragma once
-
-#include "CApp.h"
-#include "CString.h"
-#include "CConfig.h"
-#include "CNetworkAddress.h"
-
-class CAppUtil;
-
-class CServerApp : public CApp {
-public:
-	class CArgs : public CApp::CArgsBase {
-	public:
-		CArgs();
-		~CArgs();
-
-	public:
-		CString	m_configFile;
-		CNetworkAddress* m_synergyAddress;
-		CConfig* m_config;
-	};
-
-	CServerApp(CAppUtil* util);
-	virtual ~CServerApp();
-	
-	// Parse server specific command line arguments.
-	void parse(int argc, const char* const* argv);
-
-	// Prints help specific to server.
-	void help();
-
-	// Returns arguments that are common and for server.
-	CArgs& args() const { return (CArgs&)argsBase(); }
-
-private:
-	virtual bool parseArg(const int& argc, const char* const* argv, int& i);
-};
-
-// configuration file name
-#if SYSAPI_WIN32
-#define USR_CONFIG_NAME "synergy.sgc"
-#define SYS_CONFIG_NAME "synergy.sgc"
-#elif SYSAPI_UNIX
-#define USR_CONFIG_NAME ".synergy.conf"
-#define SYS_CONFIG_NAME "synergy.conf"
-#endif
Index: lib/synergy/CClientApp.cpp
===================================================================
--- lib/synergy/CClientApp.cpp	(.../edge)	(revision 365)
+++ lib/synergy/CClientApp.cpp	(.../crazy)	(revision 365)
@@ -1,194 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#include "CClientApp.h"
-#include "CLog.h"
-#include "CArch.h"
-#include "XSocket.h"
-#include "Version.h"
-#include "ProtocolTypes.h"
-
-#if SYSAPI_WIN32
-#include "CArchMiscWindows.h"
-#endif
-
-#include <iostream>
-#include <stdio.h>
-
-CClientApp::CClientApp(CAppUtil* util) :
-CApp(new CArgs(), util)
-{
-}
-
-CClientApp::~CClientApp()
-{
-}
-
-CClientApp::CArgs::CArgs() :
-m_yscroll(0),
-m_serverAddress(NULL)
-{
-}
-
-CClientApp::CArgs::~CArgs()
-{
-}
-
-bool
-CClientApp::parseArg(const int& argc, const char* const* argv, int& i)
-{
-	if (CApp::parseArg(argc, argv, i)) {
-		// found common arg
-		return true;
-	}
-
-	else if (isArg(i, argc, argv, NULL, "--camp")) {
-		// ignore -- included for backwards compatibility
-	}
-
-	else if (isArg(i, argc, argv, NULL, "--no-camp")) {
-		// ignore -- included for backwards compatibility
-	}
-
-	else if (isArg(i, argc, argv, NULL, "--yscroll", 1)) {
-		// define scroll 
-		args().m_yscroll = atoi(argv[++i]);
-	}
-
-	else {
-		// this and remaining arguments are not options
-		return false;
-	}
-
-	// argument was valid
-	return true;
-}
-
-void
-CClientApp::parse(int argc, const char* const* argv)
-{
-	// asserts values, sets defaults, and parses args
-	int i;
-	CApp::parse(argc, argv, i);
-
-	// exactly one non-option argument (server-address)
-	if (i == argc) {
-		LOG((CLOG_PRINT "%s: a server address or name is required" BYE,
-			args().m_pname, args().m_pname));
-		m_bye(kExitArgs);
-	}
-	if (i + 1 != argc) {
-		LOG((CLOG_PRINT "%s: unrecognized option `%s'" BYE,
-			args().m_pname, argv[i], args().m_pname));
-		m_bye(kExitArgs);
-	}
-
-	// save server address
-	try {
-		*args().m_serverAddress = CNetworkAddress(argv[i], kDefaultPort);
-		args().m_serverAddress->resolve();
-	}
-	catch (XSocketAddress& e) {
-		// allow an address that we can't look up if we're restartable.
-		// we'll try to resolve the address each time we connect to the
-		// server.  a bad port will never get better.  patch by Brent
-		// Priddy.
-		if (!args().m_restartable || e.getError() == XSocketAddress::kBadPort) {
-			LOG((CLOG_PRINT "%s: %s" BYE,
-				args().m_pname, e.what(), args().m_pname));
-			m_bye(kExitFailed);
-		}
-	}
-
-	// set log filter
-	if (!CLOG->setFilter(args().m_logFilter)) {
-		LOG((CLOG_PRINT "%s: unrecognized log level `%s'" BYE,
-			args().m_pname, args().m_logFilter, args().m_pname));
-		m_bye(kExitArgs);
-	}
-
-	// identify system
-	LOG((CLOG_INFO "%s Client on %s %s", kAppVersion, ARCH->getOSName().c_str(), ARCH->getPlatformName().c_str()));
-
-#ifdef WIN32
-#ifdef _AMD64_
-	LOG((CLOG_WARN "This is an experimental x64 build of %s. Use it at your own risk.", kApplication));
-#endif
-#endif
-
-	if (CLOG->getFilter() > CLOG->getConsoleMaxLevel()) {
-		if (args().m_logFile == NULL) {
-			LOG((CLOG_WARN "log messages above %s are NOT sent to console (use file logging)", 
-				CLOG->getFilterName(CLOG->getConsoleMaxLevel())));
-		}
-	}
-}
-
-void
-CClientApp::help()
-{
-#if WINAPI_XWINDOWS
-#  define USAGE_DISPLAY_ARG		\
-	" [--display <display>]"
-#  define USAGE_DISPLAY_INFO	\
-	"      --display <display>  connect to the X server at <display>\n"
-#else
-#  define USAGE_DISPLAY_ARG
-#  define USAGE_DISPLAY_INFO
-#endif
-
-	char buffer[2000];
-	sprintf(
-		buffer,
-		"Usage: %s"
-		" [--daemon|--no-daemon]"
-		" [--debug <level>]"
-		USAGE_DISPLAY_ARG
-		" [--name <screen-name>]"
-		" [--yscroll <delta>]"
-		" [--restart|--no-restart]"
-		" <server-address>"
-		"\n\n"
-		"Start the synergy mouse/keyboard sharing server.\n"
-		"\n"
-		"  -d, --debug <level>      filter out log messages with priorty below level.\n"
-		"                           level may be: FATAL, ERROR, WARNING, NOTE, INFO,\n"
-		"                           DEBUG, DEBUG1, DEBUG2.\n"
-		USAGE_DISPLAY_INFO
-		"  -f, --no-daemon          run the client in the foreground.\n"
-		"*     --daemon             run the client as a daemon.\n"
-		"  -n, --name <screen-name> use screen-name instead the hostname to identify\n"
-		"                           ourself to the server.\n"
-		"      --yscroll <delta>    defines the vertical scrolling delta, which is\n"
-		"                           120 by default.\n"
-		"  -1, --no-restart         do not try to restart the client if it fails for\n"
-		"                           some reason.\n"
-		"*     --restart            restart the client automatically if it fails.\n"
-		"  -l  --log <file>         write log messages to file.\n"
-		"  -h, --help               display this help and exit.\n"
-		"      --version            display version information and exit.\n"
-		"\n"
-		"* marks defaults.\n"
-		"\n"
-		"The server address is of the form: [<hostname>][:<port>].  The hostname\n"
-		"must be the address or hostname of the server.  The port overrides the\n"
-		"default port, %d.\n"
-		"\n"
-		"Where log messages go depends on the platform and whether or not the\n"
-		"client is running as a daemon.",
-		args().m_pname, kDefaultPort
-		);
-
-	std::cout << buffer << std::endl;
-}
Index: lib/synergy/CApp.cpp
===================================================================
--- lib/synergy/CApp.cpp	(.../edge)	(revision 365)
+++ lib/synergy/CApp.cpp	(.../crazy)	(revision 365)
@@ -1,216 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#include "CApp.h"
-#include "CLog.h"
-#include "Version.h"
-#include "CAppUtil.h"
-#include "ProtocolTypes.h"
-
-#if WINAPI_MSWINDOWS
-#include "CMSWindowsAppUtil.h"
-#endif
-
-#include <iostream>
-
-CApp::CApp(CArgsBase* args, CAppUtil* util) :
-m_args(args),
-m_bye(&exit),
-m_util(util)
-{
-	util->adoptApp(this);
-}
-
-CApp::~CApp()
-{
-	delete m_util;
-	delete m_args;
-}
-
-CApp::CArgsBase::CArgsBase() :
-m_daemon(true),
-m_backend(false),
-m_restartable(true),
-m_pname(NULL),
-m_logFilter(NULL),
-m_logFile(NULL),
-m_display(NULL)
-{
-}
-
-CApp::CArgsBase::~CArgsBase()
-{
-}
-
-bool
-CApp::isArg(
-	int argi, int argc, const char* const* argv,
-	const char* name1, const char* name2,
-	int minRequiredParameters)
-{
-	if ((name1 != NULL && strcmp(argv[argi], name1) == 0) ||
-		(name2 != NULL && strcmp(argv[argi], name2) == 0)) {
-			// match.  check args left.
-			if (argi + minRequiredParameters >= argc) {
-				LOG((CLOG_PRINT "%s: missing arguments for `%s'" BYE,
-					argsBase().m_pname, argv[argi], argsBase().m_pname));
-				m_bye(kExitArgs);
-			}
-			return true;
-	}
-
-	// no match
-	return false;
-}
-
-bool
-CApp::parseArg(const int& argc, const char* const* argv, int& i)
-{
-	if (isArg(i, argc, argv, "-d", "--debug", 1)) {
-		// change logging level
-		argsBase().m_logFilter = argv[++i];
-	}
-
-	else if (isArg(i, argc, argv, "-l", "--log", 1)) {
-		argsBase().m_logFile = argv[++i];
-	}
-
-	else if (isArg(i, argc, argv, "-f", "--no-daemon")) {
-		// not a daemon
-		argsBase().m_daemon = false;
-	}
-
-	else if (isArg(i, argc, argv, NULL, "--daemon")) {
-		// daemonize
-		argsBase().m_daemon = true;
-	}
-
-	else if (isArg(i, argc, argv, "-n", "--name", 1)) {
-		// save screen name
-		argsBase().m_name = argv[++i];
-	}
-
-	else if (isArg(i, argc, argv, "-1", "--no-restart")) {
-		// don't try to restart
-		argsBase().m_restartable = false;
-	}
-
-	else if (isArg(i, argc, argv, NULL, "--restart")) {
-		// try to restart
-		argsBase().m_restartable = true;
-	}
-
-	else if (isArg(i, argc, argv, "-z", NULL)) {
-		argsBase().m_backend = true;
-	}
-
-	else if (isArg(i, argc, argv, "-h", "--help")) {
-		help();
-		m_bye(kExitSuccess);
-	}
-
-	else if (isArg(i, argc, argv, NULL, "--version")) {
-		version();
-		m_bye(kExitSuccess);
-	}
-
-#if WINAPI_MSWINDOWS
-
-	else if (isArg(i, argc, argv, NULL, "--service")) {
-
-		// HACK: assume instance is an ms windows app, and call service
-		// arg handler.
-		// TODO: use inheritance model to fix this.
-		((CMSWindowsAppUtil&)utilBase()).handleServiceArg(argv[++i]);
-	}
-
-#elif WINAPI_XWINDOWS
-
-	else if (isArg(i, argc, argv, "-display", "--display", 1)) {
-		// use alternative display
-		argsBase().m_display = argv[++i];
-	}
-
-#endif
-
-	else if (isArg(i, argc, argv, "--", NULL)) {
-		// remaining arguments are not options
-		++i;
-		return false;
-	}
-
-	else if (argv[i][0] == '-') {
-		LOG((CLOG_PRINT "%s: unrecognized option `%s'" BYE,
-			argsBase().m_pname, argv[i], argsBase().m_pname));
-		m_bye(kExitArgs);
-	}
-
-	else {
-		// arg is not common to server and client
-		return false;
-	}
-
-	return true;
-}
-
-void
-CApp::parse(int argc, const char* const* argv, int& i)
-{
-	// about these use of assert() here:
-	// previously an /analyze warning was displayed if we only used assert and
-	// did not return on failure. however, this warning does not appear to show
-	// any more (could be because new compiler args have been added).
-	// the asserts are programmer benefit only; the os should never pass 0 args,
-	// because the first is always the binary name. the only way assert would 
-	// evaluate to true, is if this parse function were implemented incorrectly,
-	// which is unlikely because it's old code and has a specific use.
-	// we should avoid using anything other than assert here, because it will
-	// look like important code, which it's not really.
-	assert(argsBase().m_pname != NULL);
-	assert(argv != NULL);
-	assert(argc >= 1);
-
-	// set defaults
-	argsBase().m_name = ARCH->getHostName();
-
-	// parse options
-	for (i = 1; i < argc; ++i) {
-		if (!parseArg(argc, argv, i)) {
-			break;
-		}
-	}
-
-	// increase default filter level for daemon.  the user must
-	// explicitly request another level for a daemon.
-	if (argsBase().m_daemon && argsBase().m_logFilter == NULL) {
-		argsBase().m_logFilter = "NOTE";
-	}
-}
-
-void
-CApp::version()
-{
-	char buffer[500];
-	sprintf(
-		buffer,
-		"%s %s, protocol version %d.%d\n%s",
-		argsBase().m_pname,
-		kVersion,
-		kProtocolMajorVersion,
-		kProtocolMinorVersion,
-		kCopyright
-		);
-
-	std::cout << buffer << std::endl;
-}
Index: lib/synergy/CAppUtil.h
===================================================================
--- lib/synergy/CAppUtil.h	(.../edge)	(revision 365)
+++ lib/synergy/CAppUtil.h	(.../crazy)	(revision 365)
@@ -1,31 +0,0 @@
-/*
- * synergy -- mouse and keyboard sharing utility
- * Copyright (C) 2002 Chris Schoeneman
- * 
- * This package is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * found in the file COPYING that should have accompanied this file.
- * 
- * This package is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
- 
-#pragma once
-
-#include "common.h"
-
-class CApp;
-
-class CAppUtil {
-friend class CApp;
-public:
-	CAppUtil();
-	virtual ~CAppUtil();
-protected:
-	virtual void adoptApp(CApp* app);
-	CApp& app() const;
-private:
-	CApp* m_app;
-};
Index: lib/synergy/CKeyMap.h
===================================================================
--- lib/synergy/CKeyMap.h	(.../edge)	(revision 365)
+++ lib/synergy/CKeyMap.h	(.../crazy)	(revision 365)
@@ -30,28 +30,31 @@
 public:
 	CKeyMap();
 	~CKeyMap();
+	std::map<KeyID, KeyButton> map_key_to_button;
+	std::map<KeyButton, KeyID> map_button_to_key;
+	KeyID getKeyID(KeyButton button);
+	KeyButton getKeyButton(KeyID keyid);
 
 	//! KeyID synthesis info
 	/*!
-	This structure contains the information necessary to synthesize a
-	keystroke that generates a KeyID (stored elsewhere).  \c m_sensitive
-	lists the modifiers that the key is affected by and must therefore
-	be in the correct state, which is listed in \c m_required.  If the
-	key is mapped to a modifier, that modifier is in \c m_generates and
-	is not in \c m_sensitive.
-	*/
-	struct KeyItem {
-	public:
-		KeyID			m_id;			//!< KeyID
-		SInt32			m_group;		//!< Group for key
-		KeyButton		m_button;		//!< Button to generate KeyID
-		KeyModifierMask	m_required;		//!< Modifiers required for KeyID
-		KeyModifierMask	m_sensitive;	//!< Modifiers key is sensitive to
-		KeyModifierMask	m_generates;	//!< Modifiers key is mapped to
-		bool			m_dead;			//!< \c true if this is a dead KeyID
-		bool			m_lock;			//!< \c true if this locks a modifier
-		UInt32			m_client;		//!< Client data
+This structure contains the information necessary to synthesize a
+keystroke that generates a KeyID (stored elsewhere).  \c m_sensitive
+lists the modifiers that the key is affected by and must therefore
+be in the correct state, which is listed in \c m_required.  If the
+key is mapped to a modifier, that modifier is in \c m_generates and
+is not in \c m_sensitive.
+*/
+struct KeyItem {
+public:
 
+	KeyID			m_id;			//!< KeyID
+	KeyButton		m_button;		//!< Button to generate KeyID (platform dependent)
+	KeyModifierMask	m_required;		//!< Modifiers required for KeyID
+	KeyModifierMask	m_sensitive;	//!< Modifiers key is sensitive to
+	KeyModifierMask	m_generates;	//!< Modifiers key is mapped to
+	bool			m_lock;			//!< \c true if this locks a modifier
+	UInt32			m_client;		//!< Client data
+
 	public:
 		bool			operator==(const KeyItem&) const;
 	};
@@ -73,11 +76,10 @@
 	public:
 		enum EType {
 			kButton,					//!< Synthesize button
-			kGroup						//!< Set new group
 		};
 
 		Keystroke(KeyButton, bool press, bool repeat, UInt32 clientData);
-		Keystroke(SInt32 group, bool absolute, bool restore);
+		Keystroke(bool absolute, bool restore);
 
 	public:
 		struct CButton {
@@ -87,22 +89,16 @@
 			bool		m_repeat;		//!< \c true iff for an autorepeat
 			UInt32		m_client;		//!< Client data
 		};
-		struct CGroup {
-		public:
-			SInt32		m_group;		//!< Group/offset to change to/by
-			bool		m_absolute;		//!< \c true iff change to, else by
-			bool		m_restore;		//!< \c true iff for restoring state
-		};
 		union CData {
 		public:
 			CButton		m_button;
-			CGroup		m_group;
 		};
 
 		EType			m_type;
 		CData			m_data;
 	};
-
+	
+	
 	//! A sequence of keystrokes
 	typedef std::vector<Keystroke> Keystrokes;
 
@@ -119,33 +115,13 @@
 	//! @name manipulators
 	//@{
 
-	//! Swap with another \c CKeyMap
-	void				swap(CKeyMap&);
-
 	//! Add a key entry
 	/*!
 	Adds \p item to the entries for the item's id and group.  The
 	\c m_dead member is set automatically.
 	*/
 	void				addKeyEntry(const KeyItem& item);
-
-	//! Add an alias key entry
-	/*!
-	If \p targetID with the modifiers given by \p targetRequired and
-	\p targetSensitive is not available in group \p group then find an
-	entry for \p sourceID with modifiers given by \p sourceRequired and
-	\p sourceSensitive in any group with exactly one item and, if found,
-	add a new item just like it except using id \p targetID.  This
-	effectively makes the \p sourceID an alias for \p targetID (i.e. we
-	can generate \p targetID using \p sourceID).
-	*/
-	void				addKeyAliasEntry(KeyID targetID, SInt32 group,
-							KeyModifierMask targetRequired,
-							KeyModifierMask targetSensitive,
-							KeyID sourceID,
-							KeyModifierMask sourceRequired,
-							KeyModifierMask sourceSensitive);
-
+	
 	//! Add a key sequence entry
 	/*!
 	Adds the sequence of keys \p keys (\p numKeys elements long) to
@@ -194,55 +170,12 @@
 	*/
 	void				finish();
 
-	//! Iterate over all added keys items
-	/*!
-	Calls \p cb for every key item.
-	*/
-	void				foreachKey(ForeachKeyCallback cb, void* userData);
-
 	//@}
 	//! @name accessors
 	//@{
 
-	//! Map key press/repeat to keystrokes.
-	/*!
-	Converts press/repeat of key \p id in group \p group with current
-	modifiers as given in \p currentState and the desired modifiers in
-	\p desiredMask into the keystrokes necessary to synthesize that key
-	event in \p keys.  It returns the \c KeyItem of the key being
-	pressed/repeated, or NULL if the key cannot be mapped.
-	*/
-	const KeyItem*		mapKey(Keystrokes& keys, KeyID id, SInt32 group,
-							ModifierToKeys& activeModifiers,
-							KeyModifierMask& currentState,
-							KeyModifierMask desiredMask,
-							bool isAutoRepeat) const;
+	
 
-	//! Get number of groups
-	/*!
-	Returns the number of keyboard groups (independent layouts) in the map.
-	*/
-	SInt32				getNumGroups() const;
-
-	//! Compute a group number
-	/*!
-	Returns the number of the group \p offset groups after group \p group.
-	*/
-	SInt32				getEffectiveGroup(SInt32 group, SInt32 offset) const;
-
-	//! Find key entry compatible with modifiers
-	/*!
-	Returns the \c KeyItemList for the first entry for \p id in group
-	\p group that is compatible with the given modifiers, or NULL
-	if there isn't one.  A button list is compatible with a modifiers
-	if it is either insensitive to all modifiers in \p sensitive or
-	it requires the modifiers to be in the state indicated by \p required
-	for every modifier indicated by \p sensitive.
-	*/
-	const KeyItemList*	findCompatibleKey(KeyID id, SInt32 group,
-							KeyModifierMask required,
-							KeyModifierMask sensitive) const;
-
 	//! Test if modifier is half-duplex
 	/*!
 	Returns \c true iff modifier key \p key or button \p button is
@@ -282,19 +215,6 @@
 	*/
 	static void			initModifierKey(KeyItem& item);
 
-	//! Test for a dead key
-	/*!
-	Returns \c true if \p key is a dead key.
-	*/
-	static bool			isDeadKey(KeyID key);
-
-	//! Get corresponding dead key
-	/*!
-	Returns the dead key corresponding to \p key if one exists, otherwise
-	return \c kKeyNone.  This returns \p key if it's already a dead key.
-	*/
-	static KeyID		getDeadKey(KeyID key);
-
 	//! Get string for a key and modifier mask
 	/*!
 	Converts a key and modifier mask into a string representing the
@@ -333,63 +253,13 @@
 		
 	// A list of ways to synthesize a KeyID
 	typedef std::vector<KeyItemList> KeyEntryList;
+	KeyEntryList entries;
 
-	// computes the number of groups
-	SInt32				findNumGroups() const;
-
-	// computes the map of modifiers to the keys that generate the modifiers
-	void				setModifierKeys();
-
-	// maps a command key.  a command key is a keyboard shortcut and we're
-	// trying to synthesize a button press with an exact sets of modifiers,
-	// not trying to synthesize a character.  so we just need to find the
-	// right button and synthesize the requested modifiers without regard
-	// to what character they would synthesize.  we disallow multikey
-	// entries since they don't make sense as hotkeys.
-	const KeyItem*		mapCommandKey(Keystrokes& keys,
-							KeyID id, SInt32 group,
-							ModifierToKeys& activeModifiers,
-							KeyModifierMask& currentState,
-							KeyModifierMask desiredMask,
-							bool isAutoRepeat) const;
-
-	// maps a character key.  a character key is trying to synthesize a
-	// particular KeyID and isn't entirely concerned with the modifiers
-	// used to do it.
-	const KeyItem*		mapCharacterKey(Keystrokes& keys,
-							KeyID id, SInt32 group,
-							ModifierToKeys& activeModifiers,
-							KeyModifierMask& currentState,
-							KeyModifierMask desiredMask,
-							bool isAutoRepeat) const;
-
-	// maps a modifier key
-	const KeyItem*		mapModifierKey(Keystrokes& keys,
-							KeyID id, SInt32 group,
-							ModifierToKeys& activeModifiers,
-							KeyModifierMask& currentState,
-							KeyModifierMask desiredMask,
-							bool isAutoRepeat) const;
-
-	// returns the index into \p entryList of the KeyItemList requiring
-	// the fewest modifier changes between \p currentState and
-	// \p desiredState.
-	SInt32				findBestKey(const KeyEntryList& entryList,
-							KeyModifierMask currentState,
-							KeyModifierMask desiredState) const;
-
-	// gets the \c KeyItem used to synthesize the modifier who's bit is
-	// given by \p modifierBit in group \p group and does not synthesize
-	// the key \p button.
-	const KeyItem*		keyForModifier(KeyButton button, SInt32 group,
-							SInt32 modifierBit) const;
-
 	// fills \p keystrokes with the keys to synthesize the key in
 	// \p keyItem taking the modifiers into account.  returns \c true
 	// iff successful and sets \p currentState to the
 	// resulting modifier state.
 	bool				keysForKeyItem(const KeyItem& keyItem,
-							SInt32& group,
 							ModifierToKeys& activeModifiers,
 							KeyModifierMask& currentState,
 							KeyModifierMask desiredState,
@@ -408,19 +278,6 @@
 							const ModifierToKeys& desiredModifiers,
 							Keystrokes& keystrokes) const;
 
-	// fills \p keystrokes and \p undo with the keys to change the
-	// current modifier state in \p currentState to match the state in
-	// \p requiredState for each modifier indicated in \p sensitiveMask.
-	// returns \c true iff successful and sets \p currentState to the
-	// resulting modifier state.
-	bool				keysForModifierState(KeyButton button, SInt32 group,
-							ModifierToKeys& activeModifiers,
-							KeyModifierMask& currentState,
-							KeyModifierMask requiredState,
-							KeyModifierMask sensitiveMask,
-							KeyModifierMask notRequiredMask,
-							Keystrokes& keystrokes) const;
-
 	// Adds keystrokes to synthesize key \p keyItem in mode \p type to
 	// \p keystrokes and to undo the synthesis to \p undo.
 	void				addKeystrokes(EKeystroke type,
@@ -468,12 +325,8 @@
 
 	// KeyID info
 	KeyIDMap			m_keyIDMap;
-	SInt32				m_numGroups;
 	ModifierToKeyTable	m_modifierKeys;
 
-	// composition info
-	bool				m_composeAcrossGroups;
-
 	// half-duplex info
 	KeyButtonSet		m_halfDuplex;			// half-duplex set by synergy
 	KeySet				m_halfDuplexMods;		// half-duplex set by user
Index: lib/synergy/IKeyState.h
===================================================================
--- lib/synergy/IKeyState.h	(.../edge)	(revision 365)
+++ lib/synergy/IKeyState.h	(.../crazy)	(revision 365)
@@ -60,20 +60,7 @@
 	//! @name manipulators
 	//@{
 
-	//! Update the keyboard map
-	/*!
-	Causes the key state to get updated to reflect the current keyboard
-	mapping.
-	*/
-	virtual void		updateKeyMap() = 0;
 
-	//! Update the key state
-	/*!
-	Causes the key state to get updated to reflect the physical keyboard
-	state.
-	*/
-	virtual void		updateKeyState() = 0;
-
 	//! Set half-duplex mask
 	/*!
 	Sets which modifier toggle keys are half-duplex.  A half-duplex
@@ -143,12 +130,6 @@
 	virtual KeyModifierMask
 						pollActiveModifiers() const = 0;
 
-	//! Get the active keyboard layout from OS
-	/*!
-	Returns the active keyboard layout according to the operating system.
-	*/
-	virtual SInt32		pollActiveGroup() const = 0;
-
 	//! Get the keys currently pressed from OS
 	/*!
 	Adds any keys that are currently pressed according to the operating
Index: lib/synergy/KeyTypes.h
===================================================================
--- lib/synergy/KeyTypes.h	(.../edge)	(revision 365)
+++ lib/synergy/KeyTypes.h	(.../crazy)	(revision 365)
@@ -85,196 +85,30 @@
 static const KeyModifierID		kKeyModifierIDLast     = 6;
 //@}
 
-//! @name Key identifiers
+//! @name Key identifiers - now using USB HID codes
 //@{
-// all identifiers except kKeyNone and those in 0xE000 to 0xE0FF
-// inclusive are equal to the corresponding X11 keysym - 0x1000.
 
 // no key
-static const KeyID		kKeyNone		= 0x0000;
+static const KeyID		kKeyNone		= 0x00;
+static const KeyID		kKeyCapsLock	= 0x39;
+static const KeyID		kKeyScrollLock	= 0x47;
+static const KeyID		kKeyDelete		= 0x4C;
+static const KeyID		kKeyNumLock		= 0x53;
+static const KeyID		kKeyControl_L	= 0xE0;
+static const KeyID		kKeyShift_L		= 0xE1;
+static const KeyID		kKeyAlt_L		= 0xE2;
+static const KeyID		kKeySuper_L		= 0xE3; // Left GUI / Super / Mac
+static const KeyID		kKeyControl_R	= 0xE4;
+static const KeyID		kKeyShift_R		= 0xE5;
+static const KeyID		kKeyAlt_R		= 0xE6;
+static const KeyID		kKeySuper_R		= 0xE7;
 
-// TTY functions
-static const KeyID		kKeyBackSpace	= 0xEF08;	/* back space, back char */
-static const KeyID		kKeyTab			= 0xEF09;
-static const KeyID		kKeyLinefeed	= 0xEF0A;	/* Linefeed, LF */
-static const KeyID		kKeyClear		= 0xEF0B;
-static const KeyID		kKeyReturn		= 0xEF0D;	/* Return, enter */
-static const KeyID		kKeyPause		= 0xEF13;	/* Pause, hold */
-static const KeyID		kKeyScrollLock	= 0xEF14;
-static const KeyID		kKeySysReq		= 0xEF15;
-static const KeyID		kKeyEscape		= 0xEF1B;
-static const KeyID		kKeyHenkan		= 0xEF23;	/* Start/Stop Conversion */
-static const KeyID		kKeyHangulKana	= 0xEF26;	/* Hangul, Kana */
-static const KeyID		kKeyHiraganaKatakana = 0xEF27;	/* Hiragana/Katakana toggle */
-static const KeyID		kKeyZenkaku		= 0xEF2A;	/* Zenkaku/Hankaku */
-static const KeyID		kKeyHanjaKanzi	= 0xEF2A;	/* Hanja, Kanzi */
-static const KeyID		kKeyDelete		= 0xEFFF;	/* Delete, rubout */
+static const KeyID		kKeyMeta_L		= kKeySuper_L;
+static const KeyID		kKeyMeta_R		= kKeySuper_R;
 
-// cursor control
-static const KeyID		kKeyHome		= 0xEF50;
-static const KeyID		kKeyLeft		= 0xEF51;	/* Move left, left arrow */
-static const KeyID		kKeyUp			= 0xEF52;	/* Move up, up arrow */
-static const KeyID		kKeyRight		= 0xEF53;	/* Move right, right arrow */
-static const KeyID		kKeyDown		= 0xEF54;	/* Move down, down arrow */
-static const KeyID		kKeyPageUp		= 0xEF55;
-static const KeyID		kKeyPageDown	= 0xEF56;
-static const KeyID		kKeyEnd			= 0xEF57;	/* EOL */
-static const KeyID		kKeyBegin		= 0xEF58;	/* BOL */
+static const KeyID		kKeySetModifiers	= 0xFFFF;
+static const KeyID		kKeyClearModifiers	= 0xFFFE;
 
-// misc functions
-static const KeyID		kKeySelect		= 0xEF60;	/* Select, mark */
-static const KeyID		kKeyPrint		= 0xEF61;
-static const KeyID		kKeyExecute		= 0xEF62;	/* Execute, run, do */
-static const KeyID		kKeyInsert		= 0xEF63;	/* Insert, insert here */
-static const KeyID		kKeyUndo		= 0xEF65;	/* Undo, oops */
-static const KeyID		kKeyRedo		= 0xEF66;	/* redo, again */
-static const KeyID		kKeyMenu		= 0xEF67;
-static const KeyID		kKeyFind		= 0xEF68;	/* Find, search */
-static const KeyID		kKeyCancel		= 0xEF69;	/* Cancel, stop, abort, exit */
-static const KeyID		kKeyHelp		= 0xEF6A;	/* Help */
-static const KeyID		kKeyBreak		= 0xEF6B;
-static const KeyID		kKeyAltGr	 	= 0xEF7E;	/* Character set switch */
-static const KeyID		kKeyNumLock		= 0xEF7F;
-
-// keypad
-static const KeyID		kKeyKP_Space	= 0xEF80;	/* space */
-static const KeyID		kKeyKP_Tab		= 0xEF89;
-static const KeyID		kKeyKP_Enter	= 0xEF8D;	/* enter */
-static const KeyID		kKeyKP_F1		= 0xEF91;	/* PF1, KP_A, ... */
-static const KeyID		kKeyKP_F2		= 0xEF92;
-static const KeyID		kKeyKP_F3		= 0xEF93;
-static const KeyID		kKeyKP_F4		= 0xEF94;
-static const KeyID		kKeyKP_Home		= 0xEF95;
-static const KeyID		kKeyKP_Left		= 0xEF96;
-static const KeyID		kKeyKP_Up		= 0xEF97;
-static const KeyID		kKeyKP_Right	= 0xEF98;
-static const KeyID		kKeyKP_Down		= 0xEF99;
-static const KeyID		kKeyKP_PageUp	= 0xEF9A;
-static const KeyID		kKeyKP_PageDown	= 0xEF9B;
-static const KeyID		kKeyKP_End		= 0xEF9C;
-static const KeyID		kKeyKP_Begin	= 0xEF9D;
-static const KeyID		kKeyKP_Insert	= 0xEF9E;
-static const KeyID		kKeyKP_Delete	= 0xEF9F;
-static const KeyID		kKeyKP_Equal	= 0xEFBD;	/* equals */
-static const KeyID		kKeyKP_Multiply	= 0xEFAA;
-static const KeyID		kKeyKP_Add		= 0xEFAB;
-static const KeyID		kKeyKP_Separator= 0xEFAC;	/* separator, often comma */
-static const KeyID		kKeyKP_Subtract	= 0xEFAD;
-static const KeyID		kKeyKP_Decimal	= 0xEFAE;
-static const KeyID		kKeyKP_Divide	= 0xEFAF;
-static const KeyID		kKeyKP_0		= 0xEFB0; 
-static const KeyID		kKeyKP_1		= 0xEFB1;
-static const KeyID		kKeyKP_2		= 0xEFB2;
-static const KeyID		kKeyKP_3		= 0xEFB3;
-static const KeyID		kKeyKP_4		= 0xEFB4;
-static const KeyID		kKeyKP_5		= 0xEFB5;
-static const KeyID		kKeyKP_6		= 0xEFB6;
-static const KeyID		kKeyKP_7		= 0xEFB7;
-static const KeyID		kKeyKP_8		= 0xEFB8;
-static const KeyID		kKeyKP_9		= 0xEFB9;
-
-// function keys
-static const KeyID		kKeyF1			= 0xEFBE;
-static const KeyID		kKeyF2			= 0xEFBF;
-static const KeyID		kKeyF3			= 0xEFC0;
-static const KeyID		kKeyF4			= 0xEFC1;
-static const KeyID		kKeyF5			= 0xEFC2;
-static const KeyID		kKeyF6			= 0xEFC3;
-static const KeyID		kKeyF7			= 0xEFC4;
-static const KeyID		kKeyF8			= 0xEFC5;
-static const KeyID		kKeyF9			= 0xEFC6;
-static const KeyID		kKeyF10			= 0xEFC7;
-static const KeyID		kKeyF11			= 0xEFC8;
-static const KeyID		kKeyF12			= 0xEFC9;
-static const KeyID		kKeyF13			= 0xEFCA;
-static const KeyID		kKeyF14			= 0xEFCB;
-static const KeyID		kKeyF15			= 0xEFCC;
-static const KeyID		kKeyF16			= 0xEFCD;
-static const KeyID		kKeyF17			= 0xEFCE;
-static const KeyID		kKeyF18			= 0xEFCF;
-static const KeyID		kKeyF19			= 0xEFD0;
-static const KeyID		kKeyF20			= 0xEFD1;
-static const KeyID		kKeyF21			= 0xEFD2;
-static const KeyID		kKeyF22			= 0xEFD3;
-static const KeyID		kKeyF23			= 0xEFD4;
-static const KeyID		kKeyF24			= 0xEFD5;
-static const KeyID		kKeyF25			= 0xEFD6;
-static const KeyID		kKeyF26			= 0xEFD7;
-static const KeyID		kKeyF27			= 0xEFD8;
-static const KeyID		kKeyF28			= 0xEFD9;
-static const KeyID		kKeyF29			= 0xEFDA;
-static const KeyID		kKeyF30			= 0xEFDB;
-static const KeyID		kKeyF31			= 0xEFDC;
-static const KeyID		kKeyF32			= 0xEFDD;
-static const KeyID		kKeyF33			= 0xEFDE;
-static const KeyID		kKeyF34			= 0xEFDF;
-static const KeyID		kKeyF35			= 0xEFE0;
-
-// modifiers
-static const KeyID		kKeyShift_L		= 0xEFE1;	/* Left shift */
-static const KeyID		kKeyShift_R		= 0xEFE2;	/* Right shift */
-static const KeyID		kKeyControl_L	= 0xEFE3;	/* Left control */
-static const KeyID		kKeyControl_R	= 0xEFE4;	/* Right control */
-static const KeyID		kKeyCapsLock	= 0xEFE5;	/* Caps lock */
-static const KeyID		kKeyShiftLock	= 0xEFE6;	/* Shift lock */
-static const KeyID		kKeyMeta_L		= 0xEFE7;	/* Left meta */
-static const KeyID		kKeyMeta_R		= 0xEFE8;	/* Right meta */
-static const KeyID		kKeyAlt_L		= 0xEFE9;	/* Left alt */
-static const KeyID		kKeyAlt_R		= 0xEFEA;	/* Right alt */
-static const KeyID		kKeySuper_L		= 0xEFEB;	/* Left super */
-static const KeyID		kKeySuper_R		= 0xEFEC;	/* Right super */
-static const KeyID		kKeyHyper_L		= 0xEFED;	/* Left hyper */
-static const KeyID		kKeyHyper_R		= 0xEFEE;	/* Right hyper */
-
-// multi-key character composition
-static const KeyID		kKeyCompose			= 0xEF20;
-static const KeyID		kKeyDeadGrave		= 0x0300;
-static const KeyID		kKeyDeadAcute		= 0x0301;
-static const KeyID		kKeyDeadCircumflex	= 0x0302;
-static const KeyID		kKeyDeadTilde		= 0x0303;
-static const KeyID		kKeyDeadMacron		= 0x0304;
-static const KeyID		kKeyDeadBreve		= 0x0306;
-static const KeyID		kKeyDeadAbovedot	= 0x0307;
-static const KeyID		kKeyDeadDiaeresis	= 0x0308;
-static const KeyID		kKeyDeadAbovering	= 0x030a;
-static const KeyID		kKeyDeadDoubleacute	= 0x030b;
-static const KeyID		kKeyDeadCaron		= 0x030c;
-static const KeyID		kKeyDeadCedilla		= 0x0327;
-static const KeyID		kKeyDeadOgonek		= 0x0328;
-
-// more function and modifier keys
-static const KeyID		kKeyLeftTab			= 0xEE20;
-
-// update modifiers
-static const KeyID		kKeySetModifiers	= 0xEE06;
-static const KeyID		kKeyClearModifiers	= 0xEE07;
-
-// group change
-static const KeyID		kKeyNextGroup		= 0xEE08;
-static const KeyID		kKeyPrevGroup		= 0xEE0A;
-
-// extended keys
-static const KeyID		kKeyEject			= 0xE001;
-static const KeyID		kKeySleep			= 0xE05F;
-static const KeyID		kKeyWWWBack			= 0xE0A6;
-static const KeyID		kKeyWWWForward		= 0xE0A7;
-static const KeyID		kKeyWWWRefresh		= 0xE0A8;
-static const KeyID		kKeyWWWStop			= 0xE0A9;
-static const KeyID		kKeyWWWSearch		= 0xE0AA;
-static const KeyID		kKeyWWWFavorites	= 0xE0AB;
-static const KeyID		kKeyWWWHome			= 0xE0AC;
-static const KeyID		kKeyAudioMute		= 0xE0AD;
-static const KeyID		kKeyAudioDown		= 0xE0AE;
-static const KeyID		kKeyAudioUp			= 0xE0AF;
-static const KeyID		kKeyAudioNext		= 0xE0B0;
-static const KeyID		kKeyAudioPrev		= 0xE0B1;
-static const KeyID		kKeyAudioStop		= 0xE0B2;
-static const KeyID		kKeyAudioPlay		= 0xE0B3;
-static const KeyID		kKeyAppMail			= 0xE0B4;
-static const KeyID		kKeyAppMedia		= 0xE0B5;
-static const KeyID		kKeyAppUser1		= 0xE0B6;
-static const KeyID		kKeyAppUser2		= 0xE0B7;
-
 //@}
 
 struct KeyNameMapEntry {
@@ -290,8 +124,7 @@
 
 //! Key name to KeyID table
 /*!
-A table of key names to the corresponding KeyID.  Only the keys listed
-above plus non-alphanumeric ASCII characters are in the table.  The end
+A table of key names to the corresponding KeyID.  The end
 of the table is the first pair with a NULL m_name.
 */
 extern const KeyNameMapEntry kKeyNameMap[];
Index: lib/synergy/CScreen.cpp
===================================================================
--- lib/synergy/CScreen.cpp	(.../edge)	(revision 365)
+++ lib/synergy/CScreen.cpp	(.../crazy)	(revision 365)
@@ -54,8 +54,6 @@
 {
 	assert(!m_enabled);
 
-	m_screen->updateKeyMap();
-	m_screen->updateKeyState();
 	m_screen->enable();
 	if (m_isPrimary) {
 		enablePrimary();
@@ -477,7 +475,7 @@
 	// we don't track keys while on the primary screen so update our
 	// idea of them now.  this is particularly to update the state of
 	// the toggle modifiers.
-	m_screen->updateKeyState();
+	
 }
 
 void
Index: lib/synergy/CKeyMap.cpp
===================================================================
--- lib/synergy/CKeyMap.cpp	(.../edge)	(revision 365)
+++ lib/synergy/CKeyMap.cpp	(.../crazy)	(revision 365)
@@ -24,17 +24,13 @@
 CKeyMap::CKeyToNameMap*			CKeyMap::s_keyToNameMap      = NULL;
 CKeyMap::CModifierToNameMap*	CKeyMap::s_modifierToNameMap = NULL;
 
-CKeyMap::CKeyMap() :
-	m_numGroups(0),
-	m_composeAcrossGroups(false)
+CKeyMap::CKeyMap()
 {
 	m_modifierKeyItem.m_id        = kKeyNone;
-	m_modifierKeyItem.m_group     = 0;
 	m_modifierKeyItem.m_button    = 0;
 	m_modifierKeyItem.m_required  = 0;
 	m_modifierKeyItem.m_sensitive = 0;
 	m_modifierKeyItem.m_generates = 0;
-	m_modifierKeyItem.m_dead      = false;
 	m_modifierKeyItem.m_lock      = false;
 	m_modifierKeyItem.m_client    = 0;
 }
@@ -45,21 +41,6 @@
 }
 
 void
-CKeyMap::swap(CKeyMap& x)
-{
-	m_keyIDMap.swap(x.m_keyIDMap);
-	m_modifierKeys.swap(x.m_modifierKeys);
-	m_halfDuplex.swap(x.m_halfDuplex);
-	m_halfDuplexMods.swap(x.m_halfDuplexMods);
-	SInt32 tmp1   = m_numGroups;
-	m_numGroups   = x.m_numGroups;
-	x.m_numGroups = tmp1;
-	bool tmp2               = m_composeAcrossGroups;
-	m_composeAcrossGroups   = x.m_composeAcrossGroups;
-	x.m_composeAcrossGroups = tmp2;
-}
-
-void
 CKeyMap::addKeyEntry(const KeyItem& item)
 {
 	// ignore kKeyNone
@@ -67,138 +48,22 @@
 		return;
 	}
 
-	// resize number of groups for key
-	SInt32 numGroups = item.m_group + 1;
-	if (getNumGroups() > numGroups) {
-		numGroups = getNumGroups();
-	}
-	KeyGroupTable& groupTable = m_keyIDMap[item.m_id];
-	if (groupTable.size() < static_cast<size_t>(numGroups)) {
-		groupTable.resize(numGroups);
-	}
-
 	// make a list from the item
 	KeyItemList items;
 	items.push_back(item);
 
 	// set group and dead key flag on the item
 	KeyItem& newItem = items.back();
-	newItem.m_dead   = isDeadKey(item.m_id);
 
 	// mask the required bits with the sensitive bits
 	newItem.m_required &= newItem.m_sensitive;
 
-	// see if we already have this item;  just return if so
-	KeyEntryList& entries = groupTable[item.m_group];
-	for (size_t i = 0, n = entries.size(); i < n; ++i) {
-		if (entries[i].size() == 1 && newItem == entries[i][0]) {
-			return;
-		}
-	}
-
 	// add item list
 	entries.push_back(items);
-	LOG((CLOG_DEBUG3 "add key: %04x %d %03x %04x (%04x %04x %04x)%s", newItem.m_id, newItem.m_group, newItem.m_button, newItem.m_client, newItem.m_required, newItem.m_sensitive, newItem.m_generates, newItem.m_dead ? " dead" : ""));
+	LOG((CLOG_DEBUG3 "add key: %04x %03x %04x (%04x %04x %04x)s", newItem.m_id, newItem.m_button, newItem.m_client, newItem.m_required, newItem.m_sensitive, newItem.m_generates));
 }
 
 void
-CKeyMap::addKeyAliasEntry(KeyID targetID, SInt32 group,
-				KeyModifierMask targetRequired,
-				KeyModifierMask targetSensitive,
-				KeyID sourceID,
-				KeyModifierMask sourceRequired,
-				KeyModifierMask sourceSensitive)
-{
-	// if we can already generate the target as desired then we're done.
-	if (findCompatibleKey(targetID, group, targetRequired,
-								targetSensitive) != NULL) {
-		return;
-	}
-
-	// find a compatible source, preferably in the same group
-	for (SInt32 gd = 0, n = getNumGroups(); gd < n; ++gd) {
-		SInt32 eg = getEffectiveGroup(group, gd);
-		const KeyItemList* sourceEntry =
-			findCompatibleKey(sourceID, eg,
-								sourceRequired, sourceSensitive);
-		if (sourceEntry != NULL && sourceEntry->size() == 1) {
-			CKeyMap::KeyItem targetItem = sourceEntry->back();
-			targetItem.m_id    = targetID;
-			targetItem.m_group = eg;
-			addKeyEntry(targetItem);
-			break;
-		}
-	}
-}
-
-bool
-CKeyMap::addKeyCombinationEntry(KeyID id, SInt32 group,
-				const KeyID* keys, UInt32 numKeys)
-{
-	// disallow kKeyNone
-	if (id == kKeyNone) {
-		return false;
-	}
-
-	SInt32 numGroups = group + 1;
-	if (getNumGroups() > numGroups) {
-		numGroups = getNumGroups();
-	}
-	KeyGroupTable& groupTable = m_keyIDMap[id];
-	if (groupTable.size() < static_cast<size_t>(numGroups)) {
-		groupTable.resize(numGroups);
-	}
-	if (!groupTable[group].empty()) {
-		// key is already in the table
-		return false;
-	}
-
-	// convert to buttons
-	KeyItemList items;
-	for (UInt32 i = 0; i < numKeys; ++i) {
-		KeyIDMap::const_iterator gtIndex = m_keyIDMap.find(keys[i]);
-		if (gtIndex == m_keyIDMap.end()) {
-			return false;
-		}
-		groupTable = gtIndex->second;
-
-		// if we allow group switching during composition then search all
-		// groups for keys, otherwise search just the given group.
-		SInt32 n = 1;
-		if (m_composeAcrossGroups) {
-			n = (SInt32)groupTable.size();
-		}
-
-		bool found = false;
-		for (SInt32 gd = 0; gd < n && !found; ++gd) {
-			SInt32 eg = (group + gd) % getNumGroups();
-			const KeyEntryList& entries = groupTable[eg];
-			for (size_t j = 0; j < entries.size(); ++j) {
-				if (entries[j].size() == 1) {
-					found = true;
-					items.push_back(entries[j][0]);
-					break;
-				}
-			}
-		}
-		if (!found) {
-			// required key is not in keyboard group
-			return false;
-		}
-	}
-
-	// add key
-	groupTable[group].push_back(items);
-	return true;
-}
-
-void
-CKeyMap::allowGroupSwitchDuringCompose()
-{
-	m_composeAcrossGroups = true;
-}
-
-void
 CKeyMap::addHalfDuplexButton(KeyButton button)
 {
 	m_halfDuplex.insert(button);
@@ -219,146 +84,9 @@
 void
 CKeyMap::finish()
 {
-	m_numGroups = findNumGroups();
-
-	// make sure every key has the same number of groups
-	for (KeyIDMap::iterator i = m_keyIDMap.begin();
-								i != m_keyIDMap.end(); ++i) {
-		i->second.resize(m_numGroups);
-	}
-
-	// compute keys that generate each modifier
-	setModifierKeys();
+	
 }
 
-void
-CKeyMap::foreachKey(ForeachKeyCallback cb, void* userData)
-{
-	for (KeyIDMap::iterator i = m_keyIDMap.begin();
-								i != m_keyIDMap.end(); ++i) {
-		KeyGroupTable& groupTable = i->second;
-		for (size_t group = 0; group < groupTable.size(); ++group) {
-			KeyEntryList& entryList = groupTable[group];
-			for (size_t j = 0; j < entryList.size(); ++j) {
-				KeyItemList& itemList = entryList[j];
-				for (size_t k = 0; k < itemList.size(); ++k) {
-					(*cb)(i->first, static_cast<SInt32>(group),
-								itemList[k], userData);
-				}
-			}
-		}
-	}
-}
-
-const CKeyMap::KeyItem*
-CKeyMap::mapKey(Keystrokes& keys, KeyID id, SInt32 group,
-				ModifierToKeys& activeModifiers,
-				KeyModifierMask& currentState,
-				KeyModifierMask desiredMask,
-				bool isAutoRepeat) const
-{
-	LOG((CLOG_DEBUG1 "mapKey %04x (%d) with mask %04x, start state: %04x", id, id, desiredMask, currentState));
-
-	// handle group change
-	if (id == kKeyNextGroup) {
-		keys.push_back(Keystroke(1, false, false));
-		return NULL;
-	}
-	else if (id == kKeyPrevGroup) {
-		keys.push_back(Keystroke(-1, false, false));
-		return NULL;
-	}
-
-	const KeyItem* item;
-	switch (id) {
-	case kKeyShift_L:
-	case kKeyShift_R:
-	case kKeyControl_L:
-	case kKeyControl_R:
-	case kKeyAlt_L:
-	case kKeyAlt_R:
-	case kKeyMeta_L:
-	case kKeyMeta_R:
-	case kKeySuper_L:
-	case kKeySuper_R:
-	case kKeyAltGr:
-	case kKeyCapsLock:
-	case kKeyNumLock:
-	case kKeyScrollLock:
-		item = mapModifierKey(keys, id, group, activeModifiers,
-								currentState, desiredMask, isAutoRepeat);
-		break;
-
-	case kKeySetModifiers:
-		if (!keysForModifierState(0, group, activeModifiers, currentState,
-								desiredMask, desiredMask, 0, keys)) {
-			LOG((CLOG_DEBUG1 "unable to set modifiers %04x", desiredMask));
-			return NULL;
-		}
-		return &m_modifierKeyItem;
-
-	case kKeyClearModifiers:
-		if (!keysForModifierState(0, group, activeModifiers, currentState,
-								currentState & ~desiredMask,
-								desiredMask, 0, keys)) {
-			LOG((CLOG_DEBUG1 "unable to clear modifiers %04x", desiredMask));
-			return NULL;
-		}
-		return &m_modifierKeyItem;
-
-	default:
-		if (isCommand(desiredMask)) {
-			item = mapCommandKey(keys, id, group, activeModifiers,
-								currentState, desiredMask, isAutoRepeat);
-		}
-		else {
-			item = mapCharacterKey(keys, id, group, activeModifiers,
-								currentState, desiredMask, isAutoRepeat);
-		}
-		break;
-	}
-
-	if (item != NULL) {
-		LOG((CLOG_DEBUG1 "mapped to %03x, new state %04x", item->m_button, currentState));
-	}
-	return item;
-}
-
-SInt32
-CKeyMap::getNumGroups() const
-{
-	return m_numGroups;
-}
-
-SInt32
-CKeyMap::getEffectiveGroup(SInt32 group, SInt32 offset) const
-{
-	return (group + offset + getNumGroups()) % getNumGroups();
-}
-
-const CKeyMap::KeyItemList*
-CKeyMap::findCompatibleKey(KeyID id, SInt32 group,
-				KeyModifierMask required, KeyModifierMask sensitive) const
-{
-	assert(group >= 0 && group < getNumGroups());
-
-    KeyIDMap::const_iterator i = m_keyIDMap.find(id);
-	if (i == m_keyIDMap.end()) {
-		return NULL;
-	}
-
-	const KeyEntryList& entries = i->second[group];
-	for (size_t j = 0; j < entries.size(); ++j) {
-		if ((entries[j].back().m_sensitive & sensitive) == 0 ||
-			(entries[j].back().m_required & sensitive) ==
-				(required & sensitive)) {
-			return &entries[j];
-		}
-	}
-
-	return NULL;
-}
-
 bool
 CKeyMap::isHalfDuplex(KeyID key, KeyButton button) const
 {
@@ -413,21 +141,21 @@
 	case kKeyAlt_R:
 		item.m_generates = KeyModifierAlt;
 		break;
-
+/*
 	case kKeyMeta_L:
 	case kKeyMeta_R:
 		item.m_generates = KeyModifierMeta;
 		break;
-
+*/
 	case kKeySuper_L:
 	case kKeySuper_R:
 		item.m_generates = KeyModifierSuper;
 		break;
-
+/*
 	case kKeyAltGr:
 		item.m_generates = KeyModifierAltGr;
 		break;
-
+*/
 	case kKeyCapsLock:
 		item.m_generates = KeyModifierCapsLock;
 		item.m_lock      = true;
@@ -449,296 +177,8 @@
 	}
 }
 
-SInt32
-CKeyMap::findNumGroups() const
-{
-	size_t max = 0;
-	for (KeyIDMap::const_iterator i = m_keyIDMap.begin();
-								i != m_keyIDMap.end(); ++i) {
-		if (i->second.size() > max) {
-			max = i->second.size();
-		}
-	}
-	return static_cast<SInt32>(max);
-}
-
-void
-CKeyMap::setModifierKeys()
-{
-	m_modifierKeys.clear();
-	m_modifierKeys.resize(kKeyModifierNumBits * getNumGroups());
-	for (KeyIDMap::const_iterator i = m_keyIDMap.begin();
-								i != m_keyIDMap.end(); ++i) {
-		const KeyGroupTable& groupTable = i->second;
-		for (size_t g = 0; g < groupTable.size(); ++g) {
-			const KeyEntryList& entries = groupTable[g];
-			for (size_t j = 0; j < entries.size(); ++j) {
-				// skip multi-key sequences
-				if (entries[j].size() != 1) {
-					continue;
-				}
-
-				// skip keys that don't generate a modifier
-				const KeyItem& item = entries[j].back();
-				if (item.m_generates == 0) {
-					continue;
-				}
-
-				// add key to each indicated modifier in this group
-				for (SInt32 b = 0; b < kKeyModifierNumBits; ++b) {
-					// skip if item doesn't generate bit b
-					if (((1u << b) & item.m_generates) != 0) {
-						SInt32 mIndex = (SInt32)g * kKeyModifierNumBits + b;
-						m_modifierKeys[mIndex].push_back(&item);
-					}
-				}
-			}
-		}
-	}
-}
-
-const CKeyMap::KeyItem*
-CKeyMap::mapCommandKey(Keystrokes& keys, KeyID id, SInt32 group,
-				ModifierToKeys& activeModifiers,
-				KeyModifierMask& currentState,
-				KeyModifierMask desiredMask,
-				bool isAutoRepeat) const
-{
-	static const KeyModifierMask s_overrideModifiers = 0xffffu;
-
-	// find KeySym in table
-	KeyIDMap::const_iterator i = m_keyIDMap.find(id);
-	if (i == m_keyIDMap.end()) {
-		// unknown key
-		LOG((CLOG_DEBUG1 "key %04x is not on keyboard", id));
-		return NULL;
-	}
-	const KeyGroupTable& keyGroupTable = i->second;
-
-	// find the first key that generates this KeyID
-	const KeyItem* keyItem = NULL;
-	SInt32 numGroups       = getNumGroups();
-	for (SInt32 groupOffset = 0; groupOffset < numGroups; ++groupOffset) {
-		SInt32 effectiveGroup = getEffectiveGroup(group, groupOffset);
-		const KeyEntryList& entryList = keyGroupTable[effectiveGroup];
-		for (size_t j = 0; j < entryList.size(); ++j) {
-			if (entryList[j].size() != 1) {
-				// ignore multikey entries
-				continue;
-			}
-
-			// only match based on shift;  we're after the right button
-			// not the right character.  we'll use desiredMask as-is,
-			// overriding the key's required modifiers, when synthesizing
-			// this button.
-			const KeyItem& item = entryList[j].back();
-			if ((item.m_required & KeyModifierShift & desiredMask) ==
-				(item.m_sensitive & KeyModifierShift & desiredMask)) {
-				LOG((CLOG_DEBUG1 "found key in group %d", effectiveGroup));
-				keyItem = &item;
-				break;
-			}
-		}
-		if (keyItem != NULL) {
-			break;
-		}
-	}
-	if (keyItem == NULL) {
-		// no mapping for this keysym
-		LOG((CLOG_DEBUG1 "no mapping for key %04x", id));
-		return NULL;
-	}
-
-	// make working copy of modifiers
-	ModifierToKeys newModifiers = activeModifiers;
-	KeyModifierMask newState    = currentState;
-	SInt32 newGroup             = group;
-
-	// don't try to change CapsLock
-	desiredMask = (desiredMask & ~KeyModifierCapsLock) |
-					(currentState & KeyModifierCapsLock);
-
-	// add the key
-	if (!keysForKeyItem(*keyItem, newGroup, newModifiers,
-							newState, desiredMask,
-							s_overrideModifiers, isAutoRepeat, keys)) {
-		LOG((CLOG_DEBUG1 "can't map key"));
-		keys.clear();
-		return NULL;
-	}
-
-	// add keystrokes to restore modifier keys
-	if (!keysToRestoreModifiers(*keyItem, group, newModifiers, newState,
-								activeModifiers, keys)) {
-		LOG((CLOG_DEBUG1 "failed to restore modifiers"));
-		keys.clear();
-		return NULL;
-	}
-
-	// add keystrokes to restore group
-	if (newGroup != group) {
-		keys.push_back(Keystroke(group, true, true));
-	}
-
-	// save new modifiers
-	activeModifiers = newModifiers;
-	currentState    = newState;
-
-	return keyItem;
-}
-
-const CKeyMap::KeyItem*
-CKeyMap::mapCharacterKey(Keystrokes& keys, KeyID id, SInt32 group,
-				ModifierToKeys& activeModifiers,
-				KeyModifierMask& currentState,
-				KeyModifierMask desiredMask,
-				bool isAutoRepeat) const
-{
-	// find KeySym in table
-	KeyIDMap::const_iterator i = m_keyIDMap.find(id);
-	if (i == m_keyIDMap.end()) {
-		// unknown key
-		LOG((CLOG_DEBUG1 "key %04x is not on keyboard", id));
-		return NULL;
-	}
-	const KeyGroupTable& keyGroupTable = i->second;
-
-	// find best key in any group, starting with the active group
-	SInt32 keyIndex  = -1;
-	SInt32 numGroups = getNumGroups();
-	SInt32 groupOffset;
-	LOG((CLOG_DEBUG1 "find best:  %04x %04x", currentState, desiredMask));
-	for (groupOffset = 0; groupOffset < numGroups; ++groupOffset) {
-		SInt32 effectiveGroup = getEffectiveGroup(group, groupOffset);
-		keyIndex = findBestKey(keyGroupTable[effectiveGroup],
-								currentState, desiredMask);
-		if (keyIndex != -1) {
-			LOG((CLOG_DEBUG1 "found key in group %d", effectiveGroup));
-			break;
-		}
-	}
-	if (keyIndex == -1) {
-		// no mapping for this keysym
-		LOG((CLOG_DEBUG1 "no mapping for key %04x", id));
-		return NULL;
-	}
-
-	// get keys to press for key
-	SInt32 effectiveGroup = getEffectiveGroup(group, groupOffset);
-	const KeyItemList& itemList = keyGroupTable[effectiveGroup][keyIndex];
-	if (itemList.empty()) {
-		return NULL;
-	}
-	const KeyItem& keyItem = itemList.back();
-
-	// make working copy of modifiers
-	ModifierToKeys newModifiers = activeModifiers;
-	KeyModifierMask newState    = currentState;
-	SInt32 newGroup             = group;
-
-	// add each key
-	for (size_t j = 0; j < itemList.size(); ++j) {
-		if (!keysForKeyItem(itemList[j], newGroup, newModifiers,
-							newState, desiredMask,
-							0, isAutoRepeat, keys)) {
-			LOG((CLOG_DEBUG1 "can't map key"));
-			keys.clear();
-			return NULL;
-		}
-	}
-
-	// add keystrokes to restore modifier keys
-	if (!keysToRestoreModifiers(keyItem, group, newModifiers, newState,
-								activeModifiers, keys)) {
-		LOG((CLOG_DEBUG1 "failed to restore modifiers"));
-		keys.clear();
-		return NULL;
-	}
-
-	// add keystrokes to restore group
-	if (newGroup != group) {
-		keys.push_back(Keystroke(group, true, true));
-	}
-
-	// save new modifiers
-	activeModifiers = newModifiers;
-	currentState    = newState;
-
-	return &keyItem;
-}
-
-const CKeyMap::KeyItem*
-CKeyMap::mapModifierKey(Keystrokes& keys, KeyID id, SInt32 group,
-				ModifierToKeys& activeModifiers,
-				KeyModifierMask& currentState,
-				KeyModifierMask desiredMask,
-				bool isAutoRepeat) const
-{
-	return mapCharacterKey(keys, id, group, activeModifiers,
-								currentState, desiredMask, isAutoRepeat);
-}
-
-SInt32
-CKeyMap::findBestKey(const KeyEntryList& entryList,
-				KeyModifierMask /*currentState*/,
-				KeyModifierMask desiredState) const
-{
-	// check for an item that can accommodate the desiredState exactly
-	for (SInt32 i = 0; i < (SInt32)entryList.size(); ++i) {
-		const KeyItem& item = entryList[i].back();
-		if ((item.m_required & desiredState) ==
-			(item.m_sensitive & desiredState)) {
-			LOG((CLOG_DEBUG1 "best key index %d of %d (exact)", i, entryList.size()));
-			return i;
-		}
-	}
-
-	// choose the item that requires the fewest modifier changes
-	SInt32 bestCount = 32;
-	SInt32 bestIndex = -1;
-	for (SInt32 i = 0; i < (SInt32)entryList.size(); ++i) {
-		const KeyItem& item = entryList[i].back();
-		KeyModifierMask change =
-			((item.m_required ^ desiredState) & item.m_sensitive);
-		SInt32 n = getNumModifiers(change);
-		if (n < bestCount) {
-			bestCount = n;
-			bestIndex = i;
-		}
-	}
-	if (bestIndex != -1) {
-		LOG((CLOG_DEBUG1 "best key index %d of %d (%d modifiers)", bestIndex, entryList.size(), bestCount));
-	}
-
-	return bestIndex;
-}
-
-
-const CKeyMap::KeyItem*
-CKeyMap::keyForModifier(KeyButton button, SInt32 group,
-				SInt32 modifierBit) const
-{
-	assert(modifierBit >= 0 && modifierBit < kKeyModifierNumBits);
-	assert(group >= 0 && group < getNumGroups());
-
-	// find a key that generates the given modifier in the given group 
-	// but doesn't use the given button, presumably because we're trying
-	// to generate a KeyID that's only bound the the given button.
-	// this is important when a shift button is modified by shift;  we
-	// must use the other shift button to do the shifting.
-	const ModifierKeyItemList& items =
-		m_modifierKeys[group * kKeyModifierNumBits + modifierBit];
-	for (ModifierKeyItemList::const_iterator i = items.begin();
-								i != items.end(); ++i) {
-		if ((*i)->m_button != button) {
-			return (*i);
-		}
-	}
-	return NULL;
-}
-
 bool
-CKeyMap::keysForKeyItem(const KeyItem& keyItem, SInt32& group,
+CKeyMap::keysForKeyItem(const KeyItem& keyItem, 
 				ModifierToKeys& activeModifiers,
 				KeyModifierMask& currentState, KeyModifierMask desiredState,
 				KeyModifierMask overrideModifiers,
@@ -748,27 +188,8 @@
 	static const KeyModifierMask s_notRequiredMask =
 		KeyModifierAltGr | KeyModifierNumLock | KeyModifierScrollLock;
 
-	// add keystrokes to adjust the group
-	if (group != keyItem.m_group) {
-		group = keyItem.m_group;
-		keystrokes.push_back(Keystroke(group, true, false));
-	}
-
 	EKeystroke type;
-	if (keyItem.m_dead) {
-		// adjust modifiers for dead key
-		if (!keysForModifierState(keyItem.m_button, group,
-								activeModifiers, currentState,
-								keyItem.m_required, keyItem.m_sensitive,
-								0, keystrokes)) {
-			LOG((CLOG_DEBUG1 "unable to match modifier state for dead key %d", keyItem.m_button));
-			return false;
-		}
 
-		// press and release the dead key
-		type = kKeystrokeClick;
-	}
-	else {
 		// if this a command key then we don't have to match some of the
 		// key's required modifiers.
 		KeyModifierMask sensitive = keyItem.m_sensitive & ~overrideModifiers;
@@ -781,30 +202,16 @@
 		// the Shift_L button.
 		// match key's required state
 		LOG((CLOG_DEBUG1 "state: %04x,%04x,%04x", currentState, keyItem.m_required, sensitive));
-		if (!keysForModifierState(keyItem.m_button, group,
-								activeModifiers, currentState,
-								keyItem.m_required, sensitive,
-								0, keystrokes)) {
-			LOG((CLOG_DEBUG1 "unable to match modifier state (%04x,%04x) for key %d", keyItem.m_required, keyItem.m_sensitive, keyItem.m_button));
-			return false;
-		}
 
+
 		// match desiredState as closely as possible.  we must not
 		// change any modifiers in keyItem.m_sensitive.  and if the key
 		// is a modifier, we don't want to change that modifier.
 		LOG((CLOG_DEBUG1 "desired state: %04x %04x,%04x,%04x", desiredState, currentState, keyItem.m_required, keyItem.m_sensitive));
-		if (!keysForModifierState(keyItem.m_button, group,
-								activeModifiers, currentState,
-								desiredState,
-								~(sensitive | keyItem.m_generates),
-								s_notRequiredMask, keystrokes)) {
-			LOG((CLOG_DEBUG1 "unable to match desired modifier state (%04x,%04x) for key %d", desiredState, ~keyItem.m_sensitive & 0xffffu, keyItem.m_button));
-			return false;
-		}
-
+		
 		// repeat or press of key
 		type = isAutoRepeat ? kKeystrokeRepeat : kKeystrokePress;
-	}
+	
 	addKeystrokes(type, keyItem, activeModifiers, currentState, keystrokes);
 
 	return true;
@@ -857,101 +264,6 @@
 	return true;
 }
 
-bool
-CKeyMap::keysForModifierState(KeyButton button, SInt32 group,
-				ModifierToKeys& activeModifiers,
-				KeyModifierMask& currentState,
-				KeyModifierMask requiredState, KeyModifierMask sensitiveMask,
-				KeyModifierMask notRequiredMask,
-				Keystrokes& keystrokes) const
-{
-	// compute which modifiers need changing
-	KeyModifierMask flipMask = ((currentState ^ requiredState) & sensitiveMask);
-	// if a modifier is not required then don't even try to match it.  if
-	// we don't mask out notRequiredMask then we'll try to match those
-	// modifiers but succeed if we can't.  however, this is known not
-	// to work if the key itself is a modifier (the numlock toggle can
-	// interfere) so we don't try to match at all.
-	flipMask &= ~notRequiredMask;
-	LOG((CLOG_DEBUG1 "flip: %04x (%04x vs %04x in %04x - %04x)", flipMask, currentState, requiredState, sensitiveMask & 0xffffu, notRequiredMask & 0xffffu));
-	if (flipMask == 0) {
-		return true;
-	}
-
-	// fix modifiers.  this is complicated by the fact that a modifier may
-	// be sensitive to other modifiers!  (who thought that up?)
-	//
-	// we'll assume that modifiers with higher bits are affected by modifiers
-	// with lower bits.  there's not much basis for that assumption except
-	// that we're pretty sure shift isn't changed by other modifiers.
-	for (SInt32 bit = kKeyModifierNumBits; bit-- > 0; ) {
-		KeyModifierMask mask = (1u << bit);
-		if ((flipMask & mask) == 0) {
-			// modifier is already correct
-			continue;
-		}
-
-		// do we want the modifier active or inactive?
-		bool active = ((requiredState & mask) != 0);
-
-		// get the KeyItem for the modifier in the group
-		const KeyItem* keyItem = keyForModifier(button, group, bit);
-		if (keyItem == NULL) {
-			if ((mask & notRequiredMask) == 0) {
-				LOG((CLOG_DEBUG1 "no key for modifier %04x", mask));
-				return false;
-			}
-			else {
-				continue;
-			}
-		}
-
-		// if this modifier is sensitive to modifiers then adjust those
-		// modifiers.  also check if our assumption was correct.  note
-		// that we only need to adjust the modifiers on key down.
-		KeyModifierMask sensitive = keyItem->m_sensitive;
-		if ((sensitive & mask) != 0) {
-			// modifier is sensitive to itself.  that makes no sense
-			// so ignore it.
-			LOG((CLOG_DEBUG1 "modifier %04x modified by itself", mask));
-			sensitive &= ~mask;
-		}
-		if (sensitive != 0) {
-			if (sensitive > mask) {
-				// our assumption is incorrect
-				LOG((CLOG_DEBUG1 "modifier %04x modified by %04x", mask, sensitive));
-				return false;
-			}
-			if (active && !keysForModifierState(button, group,
-								activeModifiers, currentState,
-								keyItem->m_required, sensitive,
-								notRequiredMask, keystrokes)) {
-				return false;
-			}
-			else if (!active) {
-				// release the modifier
-				// XXX -- this doesn't work!  if Alt and Meta are mapped
-				// to one key and we want to release Meta we can't do
-				// that without also releasing Alt.
-				// need to think about support for modified modifiers.
-			}
-		}
-
-		// current state should match required state
-		if ((currentState & sensitive) != (keyItem->m_required & sensitive)) {
-			LOG((CLOG_DEBUG1 "unable to match modifier state for modifier %04x (%04x vs %04x in %04x)", mask, currentState, keyItem->m_required, sensitive));
-			return false;
-		}
-
-		// add keystrokes
-		EKeystroke type = active ? kKeystrokeModify : kKeystrokeUnmodify;
-		addKeystrokes(type, *keyItem, activeModifiers, currentState,
-								keystrokes);
-	}
-
-	return true;
-}
-
 void
 CKeyMap::addKeystrokes(EKeystroke type, const KeyItem& keyItem,
 				ModifierToKeys& activeModifiers,
@@ -1074,70 +386,6 @@
 	return n;
 }
 
-bool
-CKeyMap::isDeadKey(KeyID key)
-{
-	return (key == kKeyCompose || (key >= 0x0300 && key <= 0x036f));
-}
-
-KeyID
-CKeyMap::getDeadKey(KeyID key)
-{
-	if (isDeadKey(key)) {
-		// already dead
-		return key;
-	}
-
-	switch (key) {
-	case '`':
-		return kKeyDeadGrave;
-
-	case 0xb4u:
-		return kKeyDeadAcute;
-
-	case '^':
-	case 0x2c6:
-		return kKeyDeadCircumflex;
-
-	case '~':
-	case 0x2dcu:
-		return kKeyDeadTilde;
-
-	case 0xafu:
-		return kKeyDeadMacron;
-
-	case 0x2d8u:
-		return kKeyDeadBreve;
-
-	case 0x2d9u:
-		return kKeyDeadAbovedot;
-
-	case 0xa8u:
-		return kKeyDeadDiaeresis;
-
-	case 0xb0u:
-	case 0x2dau:
-		return kKeyDeadAbovering;
-
-	case '\"':
-	case 0x2ddu:
-		return kKeyDeadDoubleacute;
-
-	case 0x2c7u:
-		return kKeyDeadCaron;
-
-	case 0xb8u:
-		return kKeyDeadCedilla;
-
-	case 0x2dbu:
-		return kKeyDeadOgonek;
-
-	default:
-		// unknown
-		return kKeyNone;
-	}
-}
-
 CString
 CKeyMap::formatKey(KeyID key, KeyModifierMask mask)
 {
@@ -1296,12 +544,10 @@
 CKeyMap::KeyItem::operator==(const KeyItem& x) const
 {
 	return (m_id        == x.m_id        &&
-			m_group     == x.m_group     &&
 			m_button    == x.m_button    &&
 			m_required  == x.m_required  &&
 			m_sensitive == x.m_sensitive &&
 			m_generates == x.m_generates &&
-			m_dead      == x.m_dead      &&
 			m_lock      == x.m_lock      &&
 			m_client    == x.m_client);
 }
@@ -1320,11 +566,3 @@
 	m_data.m_button.m_repeat = repeat;
 	m_data.m_button.m_client = data;
 }
-
-CKeyMap::Keystroke::Keystroke(SInt32 group, bool absolute, bool restore) :
-	m_type(kGroup)
-{
-	m_data.m_group.m_group    = group;
-	m_data.m_group.m_absolute = absolute;
-	m_data.m_group.m_restore  = restore;
-}
Index: lib/synergy/CPlatformScreen.h
===================================================================
--- lib/synergy/CPlatformScreen.h	(.../edge)	(revision 365)
+++ lib/synergy/CPlatformScreen.h	(.../crazy)	(revision 365)
@@ -54,8 +54,6 @@
 	virtual void		fakeMouseWheel(SInt32 xDelta, SInt32 yDelta) const = 0;
 
 	// IKeyState overrides
-	virtual void		updateKeyMap();
-	virtual void		updateKeyState();
 	virtual void		setHalfDuplexMask(KeyModifierMask);
 	virtual void		fakeKeyDown(KeyID id, KeyModifierMask mask,
 							KeyButton button);
@@ -69,7 +67,6 @@
 						getActiveModifiers() const;
 	virtual KeyModifierMask
 						pollActiveModifiers() const;
-	virtual SInt32		pollActiveGroup() const;
 	virtual void		pollPressedKeys(KeyButtonSet& pressedKeys) const;
 
 	// IPlatformScreen overrides
@@ -88,20 +85,7 @@
 	virtual bool		isPrimary() const = 0;
 
 protected:
-	//! Update mouse buttons
-	/*!
-	Subclasses must implement this method to update their internal mouse
-	button mapping and, if desired, state tracking.
-	*/
-	virtual void		updateButtons() = 0;
 
-	//! Get the key state
-	/*!
-	Subclasses must implement this method to return the platform specific
-	key state object that each subclass must have.
-	*/
-	virtual IKeyState*	getKeyState() const = 0;
-
 	// IPlatformScreen overrides
 	virtual void		handleSystemEvent(const CEvent& event, void*) = 0;
 };
Index: lib/synergy/IPlatformScreen.h
===================================================================
--- lib/synergy/IPlatformScreen.h	(.../edge)	(revision 365)
+++ lib/synergy/IPlatformScreen.h	(.../crazy)	(revision 365)
@@ -161,8 +161,6 @@
 	virtual void		fakeMouseWheel(SInt32 xDelta, SInt32 yDelta) const = 0;
 
 	// IKeyState overrides
-	virtual void		updateKeyMap() = 0;
-	virtual void		updateKeyState() = 0;
 	virtual void		setHalfDuplexMask(KeyModifierMask) = 0;
 	virtual void		fakeKeyDown(KeyID id, KeyModifierMask mask,
 							KeyButton button) = 0;
@@ -176,7 +174,6 @@
 						getActiveModifiers() const = 0;
 	virtual KeyModifierMask
 						pollActiveModifiers() const = 0;
-	virtual SInt32		pollActiveGroup() const = 0;
 	virtual void		pollPressedKeys(KeyButtonSet& pressedKeys) const = 0;
 
 protected:
Index: lib/synergy/KeyTypes.cpp
===================================================================
--- lib/synergy/KeyTypes.cpp	(.../edge)	(revision 365)
+++ lib/synergy/KeyTypes.cpp	(.../crazy)	(revision 365)
@@ -15,6 +15,7 @@
 #include "KeyTypes.h"
 
 const KeyNameMapEntry kKeyNameMap[] = {
+	/*
 	{ "AltGr",			kKeyAltGr },
 	{ "Alt_L",			kKeyAlt_L },
 	{ "Alt_R",			kKeyAlt_R },
@@ -186,7 +187,7 @@
 	{ "BraceL",			0x007b },
 	{ "Bar",			0x007c },
 	{ "BraceR",			0x007d },
-	{ "Tilde",			0x007e },
+	{ "Tilde",			0x007e }, */
 	{ NULL, 0 },
 };
 
Index: lib/synergy/CPlatformScreen.cpp
===================================================================
--- lib/synergy/CPlatformScreen.cpp	(.../edge)	(revision 365)
+++ lib/synergy/CPlatformScreen.cpp	(.../crazy)	(revision 365)
@@ -25,82 +25,68 @@
 }
 
 void
-CPlatformScreen::updateKeyMap()
-{
-	getKeyState()->updateKeyMap();
-}
-
-void
-CPlatformScreen::updateKeyState()
-{
-	getKeyState()->updateKeyState();
-	updateButtons();
-}
-
-void
 CPlatformScreen::setHalfDuplexMask(KeyModifierMask mask)
 {
-	getKeyState()->setHalfDuplexMask(mask);
+	//getKeyState()->setHalfDuplexMask(mask);
 }
 
 void
 CPlatformScreen::fakeKeyDown(KeyID id, KeyModifierMask mask,
 				KeyButton button)
 {
-	getKeyState()->fakeKeyDown(id, mask, button);
+	//getKeyState()->fakeKeyDown(id, mask, button);
 }
 
 void
 CPlatformScreen::fakeKeyRepeat(KeyID id, KeyModifierMask mask,
 				SInt32 count, KeyButton button)
 {
-	getKeyState()->fakeKeyRepeat(id, mask, count, button);
+	//getKeyState()->fakeKeyRepeat(id, mask, count, button);
 }
 
 void
 CPlatformScreen::fakeKeyUp(KeyButton button)
 {
-	getKeyState()->fakeKeyUp(button);
+	//getKeyState()->fakeKeyUp(button);
 }
 
 void
 CPlatformScreen::fakeAllKeysUp()
 {
-	getKeyState()->fakeAllKeysUp();
+	//getKeyState()->fakeAllKeysUp();
 }
 
 bool
 CPlatformScreen::fakeCtrlAltDel()
 {
-	return getKeyState()->fakeCtrlAltDel();
+	//return getKeyState()->fakeCtrlAltDel();
+	return true;
 }
 
 bool
 CPlatformScreen::isKeyDown(KeyButton button) const
 {
-	return getKeyState()->isKeyDown(button);
+	//return getKeyState()->isKeyDown(button);
+	return false;
+
 }
 
 KeyModifierMask
 CPlatformScreen::getActiveModifiers() const
 {
-	return getKeyState()->getActiveModifiers();
+	//return getKeyState()->getActiveModifiers();
+	return 0;
 }
 
 KeyModifierMask
 CPlatformScreen::pollActiveModifiers() const
 {
-	return getKeyState()->pollActiveModifiers();
+	//return getKeyState()->pollActiveModifiers();
+	return 0;
 }
 
-SInt32
-CPlatformScreen::pollActiveGroup() const
-{
-	return getKeyState()->pollActiveGroup();
-}
-
 void
 CPlatformScreen::pollPressedKeys(KeyButtonSet& pressedKeys) const
 {
-	getKeyState()->pollPressedKeys(pressedKeys);
+	//getKeyState()->pollPressedKeys(pressedKeys);
 }
Index: lib/platform/CMSWindowsClientApp.h
===================================================================
--- lib/platform/CMSWindowsClientApp.h	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsClientApp.h	(.../crazy)	(revision 365)
@@ -1,27 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#pragma once
-
-#include "CClientApp.h"
-
-class CMSWindowsAppUtil;
-
-class CMSWindowsClientApp : public CClientApp {
-public:
-	CMSWindowsClientApp();
-	virtual ~CMSWindowsClientApp();
-
-	CMSWindowsAppUtil& util() const { return (CMSWindowsAppUtil&)utilBase(); }
-};
\ No newline at end of file
Index: lib/platform/CMSWindowsKeyState.h
===================================================================
--- lib/platform/CMSWindowsKeyState.h	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsKeyState.h	(.../crazy)	(revision 365)
@@ -1,212 +0,0 @@
-/*
- * synergy -- mouse and keyboard sharing utility
- * Copyright (C) 2003 Chris Schoeneman
- * 
- * This package is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * found in the file COPYING that should have accompanied this file.
- * 
- * This package is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef CMSWINDOWSKEYSTATE_H
-#define CMSWINDOWSKEYSTATE_H
-
-#include "CKeyState.h"
-#include "CString.h"
-#include "stdvector.h"
-#define WIN32_LEAN_AND_MEAN
-#include <windows.h>
-
-class CEvent;
-class CEventQueueTimer;
-class CMSWindowsDesks;
-
-//! Microsoft Windows key mapper
-/*!
-This class maps KeyIDs to keystrokes.
-*/
-class CMSWindowsKeyState : public CKeyState {
-public:
-	CMSWindowsKeyState(CMSWindowsDesks* desks, void* eventTarget);
-	virtual ~CMSWindowsKeyState();
-
-	//! @name manipulators
-	//@{
-
-	//! Handle screen disabling
-	/*!
-	Called when screen is disabled.  This is needed to deal with platform
-	brokenness.
-	*/
-	void				disable();
-
-	//! Set the active keyboard layout
-	/*!
-	Uses \p keyLayout when querying the keyboard.
-	*/
-	void				setKeyLayout(HKL keyLayout);
-
-	//! Test and set autorepeat state
-	/*!
-	Returns true if the given button is autorepeating and updates internal
-	state.
-	*/
-	bool				testAutoRepeat(bool press, bool isRepeat, KeyButton);
-
-	//! Remember modifier state
-	/*!
-	Records the current non-toggle modifier state.
-	*/
-	void				saveModifiers();
-
-	//! Set effective modifier state
-	/*!
-	Temporarily sets the non-toggle modifier state to those saved by the
-	last call to \c saveModifiers if \p enable is \c true.  Restores the
-	modifier state to the current modifier state if \p enable is \c false.
-	This is for synthesizing keystrokes on the primary screen when the
-	cursor is on a secondary screen.  When on a secondary screen we capture
-	all non-toggle modifier state, track the state internally and do not
-	pass it on.  So if Alt+F1 synthesizes Alt+X we need to synthesize
-	not just X but also Alt, despite the fact that our internal modifier
-	state indicates Alt is down, because local apps never saw the Alt down
-	event.
-	*/
-	void				useSavedModifiers(bool enable);
-
-	//@}
-	//! @name accessors
-	//@{
-
-	//! Map a virtual key to a button
-	/*!
-	Returns the button for the \p virtualKey.
-	*/
-	KeyButton			virtualKeyToButton(UINT virtualKey) const;
-
-	//! Map key event to a key
-	/*!
-	Converts a key event into a KeyID and the shadow modifier state
-	to a modifier mask.
-	*/
-	KeyID				mapKeyFromEvent(WPARAM charAndVirtKey,
-							LPARAM info, KeyModifierMask* maskOut) const;
-
-	//! Check if keyboard groups have changed
-	/*!
-	Returns true iff the number or order of the keyboard groups have
-	changed since the last call to updateKeys().
-	*/
-	bool				didGroupsChange() const;
-
-	//! Map key to virtual key
-	/*!
-	Returns the virtual key for key \p key or 0 if there's no such virtual
-	key.
-	*/
-	UINT				mapKeyToVirtualKey(KeyID key) const;
-
-	//! Map virtual key and button to KeyID
-	/*!
-	Returns the KeyID for virtual key \p virtualKey and button \p button
-	(button should include the extended key bit), or kKeyNone if there is
-	no such key.
-	*/
-	static KeyID		getKeyID(UINT virtualKey, KeyButton button);
-
-	//@}
-
-	// IKeyState overrides
-	virtual void		fakeKeyDown(KeyID id, KeyModifierMask mask,
-							KeyButton button);
-	virtual void		fakeKeyRepeat(KeyID id, KeyModifierMask mask,
-							SInt32 count, KeyButton button);
-	virtual bool		fakeCtrlAltDel();
-	virtual KeyModifierMask
-						pollActiveModifiers() const;
-	virtual SInt32		pollActiveGroup() const;
-	virtual void		pollPressedKeys(KeyButtonSet& pressedKeys) const;
-
-	// CKeyState overrides
-	virtual void		onKey(KeyButton button, bool down,
-							KeyModifierMask newState);
-	virtual void		sendKeyEvent(void* target,
-							bool press, bool isAutoRepeat,
-							KeyID key, KeyModifierMask mask,
-							SInt32 count, KeyButton button);
-
-protected:
-	// CKeyState overrides
-	virtual void		getKeyMap(CKeyMap& keyMap);
-	virtual void		fakeKey(const Keystroke& keystroke);
-	virtual KeyModifierMask&
-						getActiveModifiersRValue();
-
-private:
-	typedef std::vector<HKL> GroupList;
-
-	// send ctrl+alt+del hotkey event on NT family
-	static void			ctrlAltDelThread(void*);
-
-	bool				getGroups(GroupList&) const;
-	void				setWindowGroup(SInt32 group);
-
-	KeyID				getIDForKey(CKeyMap::KeyItem& item,
-							KeyButton button, UINT virtualKey,
-							PBYTE keyState, HKL hkl) const;
-
-	void				addKeyEntry(CKeyMap& keyMap, CKeyMap::KeyItem& item);
-
-private:
-	// not implemented
-	CMSWindowsKeyState(const CMSWindowsKeyState&);
-	CMSWindowsKeyState& operator=(const CMSWindowsKeyState&);
-
-private:
-	typedef std::map<HKL, SInt32> GroupMap;
-	typedef std::map<KeyID, UINT> KeyToVKMap;
-
-	void*				m_eventTarget;
-	CMSWindowsDesks*	m_desks;
-	HKL					m_keyLayout;
-	UINT				m_buttonToVK[512];
-	UINT				m_buttonToNumpadVK[512];
-	KeyButton			m_virtualKeyToButton[256];
-	KeyToVKMap			m_keyToVKMap;
-
-	// the timer used to check for fixing key state
-	CEventQueueTimer*	m_fixTimer;
-
-	// the groups (keyboard layouts)
-	GroupList			m_groups;
-	GroupMap			m_groupMap;
-
-	// the last button that we generated a key down event for.  this
-	// is zero if the last key event was a key up.  we use this to
-	// synthesize key repeats since the low level keyboard hook can't
-	// tell us if an event is a key repeat.
-	KeyButton			m_lastDown;
-
-	// modifier tracking
-	bool				m_useSavedModifiers;
-	KeyModifierMask		m_savedModifiers;
-	KeyModifierMask		m_originalSavedModifiers;
-
-	// pointer to ToUnicodeEx.  on win95 family this will be NULL.
-	typedef int (WINAPI *ToUnicodeEx_t)(UINT wVirtKey,
-										UINT wScanCode,
-										PBYTE lpKeyState,
-										LPWSTR pwszBuff,
-										int cchBuff,
-										UINT wFlags,
-										HKL dwhkl);
-	ToUnicodeEx_t		m_ToUnicodeEx;
-
-	static const KeyID	s_virtualKey[];
-};
-
-#endif
Index: lib/platform/CMSWindowsServerApp.h
===================================================================
--- lib/platform/CMSWindowsServerApp.h	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsServerApp.h	(.../crazy)	(revision 365)
@@ -1,27 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#pragma once
-
-#include "CServerApp.h"
-
-class CMSWindowsAppUtil;
-
-class CMSWindowsServerApp : public CServerApp {
-public:
-	CMSWindowsServerApp();
-	virtual ~CMSWindowsServerApp();
-
-	CMSWindowsAppUtil& util() const { return (CMSWindowsAppUtil&)utilBase(); }
-};
\ No newline at end of file
Index: lib/platform/CMSWindowsClientApp.cpp
===================================================================
--- lib/platform/CMSWindowsClientApp.cpp	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsClientApp.cpp	(.../crazy)	(revision 365)
@@ -1,24 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#include "CMSWindowsClientApp.h"
-#include "CMSWindowsAppUtil.h"
-
-CMSWindowsClientApp::CMSWindowsClientApp() : CClientApp(new CMSWindowsAppUtil())
-{
-}
-
-CMSWindowsClientApp::~CMSWindowsClientApp()
-{
-}
Index: lib/platform/CMSWindowsAppUtil.h
===================================================================
--- lib/platform/CMSWindowsAppUtil.h	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsAppUtil.h	(.../crazy)	(revision 365)
@@ -1,55 +0,0 @@
-/*
- * synergy -- mouse and keyboard sharing utility
- * Copyright (C) 2002 Chris Schoeneman
- * 
- * This package is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * found in the file COPYING that should have accompanied this file.
- * 
- * This package is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
- 
-#pragma once
-
-#include "CAppUtil.h"
-#include "CString.h"
-
-#include "Windows.h"
-
-class CApp;
-
-class CMSWindowsAppUtil : public CAppUtil {
-public:
-	CMSWindowsAppUtil();
-	virtual ~CMSWindowsAppUtil();
-
-	// Instance of MFC Windows application.
-	HINSTANCE m_instance;
-
-	// Gets the arguments to be used with a service.
-	CString getServiceArgs() const;
-
-	// Install application as Windows service.
-	void installService();
-
-	// Uninstall a Windows service with matching daemon name.
-	void uninstallService();
-
-	// Start a Windows service with matching daemon name.
-	void startService();
-
-	// Stop a Windows service with matching daemon name.
-	void stopService();
-
-	// Will install, uninstall, start, or stop the service depending on arg.
-	void handleServiceArg(const char* serviceAction);
-
-protected:
-	void adoptApp(CApp* app);
-};
-
-// TODO: move to class
-void exitPause(int code);
Index: lib/platform/CMSWindowsKeyState.cpp
===================================================================
--- lib/platform/CMSWindowsKeyState.cpp	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsKeyState.cpp	(.../crazy)	(revision 365)
@@ -1,1341 +0,0 @@
-/*
- * synergy -- mouse and keyboard sharing utility
- * Copyright (C) 2003 Chris Schoeneman
- * 
- * This package is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * found in the file COPYING that should have accompanied this file.
- * 
- * This package is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include "CMSWindowsKeyState.h"
-#include "CMSWindowsDesks.h"
-#include "CThread.h"
-#include "CFunctionJob.h"
-#include "CLog.h"
-#include "CStringUtil.h"
-#include "IEventQueue.h"
-#include "TMethodEventJob.h"
-#include "CArchMiscWindows.h"
-
-// extended mouse buttons
-#if !defined(VK_XBUTTON1)
-#define VK_XBUTTON1				0x05
-#define VK_XBUTTON2				0x06
-#endif
-
-//
-// CMSWindowsKeyState
-//
-
-// map virtual keys to synergy key enumeration
-const KeyID				CMSWindowsKeyState::s_virtualKey[] =
-{
-	/* 0x000 */ { kKeyNone },		// reserved
-	/* 0x001 */ { kKeyNone },		// VK_LBUTTON
-	/* 0x002 */ { kKeyNone },		// VK_RBUTTON
-	/* 0x003 */ { kKeyNone },		// VK_CANCEL
-	/* 0x004 */ { kKeyNone },		// VK_MBUTTON
-	/* 0x005 */ { kKeyNone },		// VK_XBUTTON1
-	/* 0x006 */ { kKeyNone },		// VK_XBUTTON2
-	/* 0x007 */ { kKeyNone },		// undefined
-	/* 0x008 */ { kKeyBackSpace },	// VK_BACK
-	/* 0x009 */ { kKeyTab },		// VK_TAB
-	/* 0x00a */ { kKeyNone },		// undefined
-	/* 0x00b */ { kKeyNone },		// undefined
-	/* 0x00c */ { kKeyClear },		// VK_CLEAR
-	/* 0x00d */ { kKeyReturn },		// VK_RETURN
-	/* 0x00e */ { kKeyNone },		// undefined
-	/* 0x00f */ { kKeyNone },		// undefined
-	/* 0x010 */ { kKeyShift_L },	// VK_SHIFT
-	/* 0x011 */ { kKeyControl_L },	// VK_CONTROL
-	/* 0x012 */ { kKeyAlt_L },		// VK_MENU
-	/* 0x013 */ { kKeyPause },		// VK_PAUSE
-	/* 0x014 */ { kKeyCapsLock },	// VK_CAPITAL
-	/* 0x015 */ { kKeyHangulKana },	// VK_HANGUL, VK_KANA
-	/* 0x016 */ { kKeyNone },		// undefined
-	/* 0x017 */ { kKeyNone },		// VK_JUNJA
-	/* 0x018 */ { kKeyNone },		// VK_FINAL
-	/* 0x019 */ { kKeyHanjaKanzi },	// VK_KANJI
-	/* 0x01a */ { kKeyNone },		// undefined
-	/* 0x01b */ { kKeyEscape },		// VK_ESCAPE
-	/* 0x01c */ { kKeyHenkan },		// VK_CONVERT		
-	/* 0x01d */ { kKeyNone },		// VK_NONCONVERT	
-	/* 0x01e */ { kKeyNone },		// VK_ACCEPT		
-	/* 0x01f */ { kKeyNone },		// VK_MODECHANGE	
-	/* 0x020 */ { kKeyNone },		// VK_SPACE
-	/* 0x021 */ { kKeyKP_PageUp },	// VK_PRIOR
-	/* 0x022 */ { kKeyKP_PageDown },// VK_NEXT
-	/* 0x023 */ { kKeyKP_End },		// VK_END
-	/* 0x024 */ { kKeyKP_Home },	// VK_HOME
-	/* 0x025 */ { kKeyKP_Left },	// VK_LEFT
-	/* 0x026 */ { kKeyKP_Up },		// VK_UP
-	/* 0x027 */ { kKeyKP_Right },	// VK_RIGHT
-	/* 0x028 */ { kKeyKP_Down },	// VK_DOWN
-	/* 0x029 */ { kKeySelect },		// VK_SELECT
-	/* 0x02a */ { kKeyNone },		// VK_PRINT
-	/* 0x02b */ { kKeyExecute },	// VK_EXECUTE
-	/* 0x02c */ { kKeyPrint },		// VK_SNAPSHOT
-	/* 0x02d */ { kKeyKP_Insert },	// VK_INSERT
-	/* 0x02e */ { kKeyKP_Delete },	// VK_DELETE
-	/* 0x02f */ { kKeyHelp },		// VK_HELP
-	/* 0x030 */ { kKeyNone },		// VK_0
-	/* 0x031 */ { kKeyNone },		// VK_1
-	/* 0x032 */ { kKeyNone },		// VK_2
-	/* 0x033 */ { kKeyNone },		// VK_3
-	/* 0x034 */ { kKeyNone },		// VK_4
-	/* 0x035 */ { kKeyNone },		// VK_5
-	/* 0x036 */ { kKeyNone },		// VK_6
-	/* 0x037 */ { kKeyNone },		// VK_7
-	/* 0x038 */ { kKeyNone },		// VK_8
-	/* 0x039 */ { kKeyNone },		// VK_9
-	/* 0x03a */ { kKeyNone },		// undefined
-	/* 0x03b */ { kKeyNone },		// undefined
-	/* 0x03c */ { kKeyNone },		// undefined
-	/* 0x03d */ { kKeyNone },		// undefined
-	/* 0x03e */ { kKeyNone },		// undefined
-	/* 0x03f */ { kKeyNone },		// undefined
-	/* 0x040 */ { kKeyNone },		// undefined
-	/* 0x041 */ { kKeyNone },		// VK_A
-	/* 0x042 */ { kKeyNone },		// VK_B
-	/* 0x043 */ { kKeyNone },		// VK_C
-	/* 0x044 */ { kKeyNone },		// VK_D
-	/* 0x045 */ { kKeyNone },		// VK_E
-	/* 0x046 */ { kKeyNone },		// VK_F
-	/* 0x047 */ { kKeyNone },		// VK_G
-	/* 0x048 */ { kKeyNone },		// VK_H
-	/* 0x049 */ { kKeyNone },		// VK_I
-	/* 0x04a */ { kKeyNone },		// VK_J
-	/* 0x04b */ { kKeyNone },		// VK_K
-	/* 0x04c */ { kKeyNone },		// VK_L
-	/* 0x04d */ { kKeyNone },		// VK_M
-	/* 0x04e */ { kKeyNone },		// VK_N
-	/* 0x04f */ { kKeyNone },		// VK_O
-	/* 0x050 */ { kKeyNone },		// VK_P
-	/* 0x051 */ { kKeyNone },		// VK_Q
-	/* 0x052 */ { kKeyNone },		// VK_R
-	/* 0x053 */ { kKeyNone },		// VK_S
-	/* 0x054 */ { kKeyNone },		// VK_T
-	/* 0x055 */ { kKeyNone },		// VK_U
-	/* 0x056 */ { kKeyNone },		// VK_V
-	/* 0x057 */ { kKeyNone },		// VK_W
-	/* 0x058 */ { kKeyNone },		// VK_X
-	/* 0x059 */ { kKeyNone },		// VK_Y
-	/* 0x05a */ { kKeyNone },		// VK_Z
-	/* 0x05b */ { kKeySuper_L },	// VK_LWIN
-	/* 0x05c */ { kKeySuper_R },	// VK_RWIN
-	/* 0x05d */ { kKeyMenu },		// VK_APPS
-	/* 0x05e */ { kKeyNone },		// undefined
-	/* 0x05f */ { kKeySleep },		// VK_SLEEP
-	/* 0x060 */ { kKeyKP_0 },		// VK_NUMPAD0
-	/* 0x061 */ { kKeyKP_1 },		// VK_NUMPAD1
-	/* 0x062 */ { kKeyKP_2 },		// VK_NUMPAD2
-	/* 0x063 */ { kKeyKP_3 },		// VK_NUMPAD3
-	/* 0x064 */ { kKeyKP_4 },		// VK_NUMPAD4
-	/* 0x065 */ { kKeyKP_5 },		// VK_NUMPAD5
-	/* 0x066 */ { kKeyKP_6 },		// VK_NUMPAD6
-	/* 0x067 */ { kKeyKP_7 },		// VK_NUMPAD7
-	/* 0x068 */ { kKeyKP_8 },		// VK_NUMPAD8
-	/* 0x069 */ { kKeyKP_9 },		// VK_NUMPAD9
-	/* 0x06a */ { kKeyKP_Multiply },// VK_MULTIPLY
-	/* 0x06b */ { kKeyKP_Add },		// VK_ADD
-	/* 0x06c */ { kKeyKP_Separator },// VK_SEPARATOR
-	/* 0x06d */ { kKeyKP_Subtract },// VK_SUBTRACT
-	/* 0x06e */ { kKeyKP_Decimal },	// VK_DECIMAL
-	/* 0x06f */ { kKeyNone },		// VK_DIVIDE
-	/* 0x070 */ { kKeyF1 },			// VK_F1
-	/* 0x071 */ { kKeyF2 },			// VK_F2
-	/* 0x072 */ { kKeyF3 },			// VK_F3
-	/* 0x073 */ { kKeyF4 },			// VK_F4
-	/* 0x074 */ { kKeyF5 },			// VK_F5
-	/* 0x075 */ { kKeyF6 },			// VK_F6
-	/* 0x076 */ { kKeyF7 },			// VK_F7
-	/* 0x077 */ { kKeyF8 },			// VK_F8
-	/* 0x078 */ { kKeyF9 },			// VK_F9
-	/* 0x079 */ { kKeyF10 },		// VK_F10
-	/* 0x07a */ { kKeyF11 },		// VK_F11
-	/* 0x07b */ { kKeyF12 },		// VK_F12
-	/* 0x07c */ { kKeyF13 },		// VK_F13
-	/* 0x07d */ { kKeyF14 },		// VK_F14
-	/* 0x07e */ { kKeyF15 },		// VK_F15
-	/* 0x07f */ { kKeyF16 },		// VK_F16
-	/* 0x080 */ { kKeyF17 },		// VK_F17
-	/* 0x081 */ { kKeyF18 },		// VK_F18
-	/* 0x082 */ { kKeyF19 },		// VK_F19
-	/* 0x083 */ { kKeyF20 },		// VK_F20
-	/* 0x084 */ { kKeyF21 },		// VK_F21
-	/* 0x085 */ { kKeyF22 },		// VK_F22
-	/* 0x086 */ { kKeyF23 },		// VK_F23
-	/* 0x087 */ { kKeyF24 },		// VK_F24
-	/* 0x088 */ { kKeyNone },		// unassigned
-	/* 0x089 */ { kKeyNone },		// unassigned
-	/* 0x08a */ { kKeyNone },		// unassigned
-	/* 0x08b */ { kKeyNone },		// unassigned
-	/* 0x08c */ { kKeyNone },		// unassigned
-	/* 0x08d */ { kKeyNone },		// unassigned
-	/* 0x08e */ { kKeyNone },		// unassigned
-	/* 0x08f */ { kKeyNone },		// unassigned
-	/* 0x090 */ { kKeyNumLock },	// VK_NUMLOCK
-	/* 0x091 */ { kKeyScrollLock },	// VK_SCROLL
-	/* 0x092 */ { kKeyNone },		// unassigned
-	/* 0x093 */ { kKeyNone },		// unassigned
-	/* 0x094 */ { kKeyNone },		// unassigned
-	/* 0x095 */ { kKeyNone },		// unassigned
-	/* 0x096 */ { kKeyNone },		// unassigned
-	/* 0x097 */ { kKeyNone },		// unassigned
-	/* 0x098 */ { kKeyNone },		// unassigned
-	/* 0x099 */ { kKeyNone },		// unassigned
-	/* 0x09a */ { kKeyNone },		// unassigned
-	/* 0x09b */ { kKeyNone },		// unassigned
-	/* 0x09c */ { kKeyNone },		// unassigned
-	/* 0x09d */ { kKeyNone },		// unassigned
-	/* 0x09e */ { kKeyNone },		// unassigned
-	/* 0x09f */ { kKeyNone },		// unassigned
-	/* 0x0a0 */ { kKeyShift_L },	// VK_LSHIFT
-	/* 0x0a1 */ { kKeyShift_R },	// VK_RSHIFT
-	/* 0x0a2 */ { kKeyControl_L },	// VK_LCONTROL
-	/* 0x0a3 */ { kKeyControl_R },	// VK_RCONTROL
-	/* 0x0a4 */ { kKeyAlt_L },		// VK_LMENU
-	/* 0x0a5 */ { kKeyAlt_R },		// VK_RMENU
-	/* 0x0a6 */ { kKeyNone },		// VK_BROWSER_BACK
-	/* 0x0a7 */ { kKeyNone },		// VK_BROWSER_FORWARD
-	/* 0x0a8 */ { kKeyNone },		// VK_BROWSER_REFRESH
-	/* 0x0a9 */ { kKeyNone },		// VK_BROWSER_STOP
-	/* 0x0aa */ { kKeyNone },		// VK_BROWSER_SEARCH
-	/* 0x0ab */ { kKeyNone },		// VK_BROWSER_FAVORITES
-	/* 0x0ac */ { kKeyNone },		// VK_BROWSER_HOME
-	/* 0x0ad */ { kKeyNone },		// VK_VOLUME_MUTE
-	/* 0x0ae */ { kKeyNone },		// VK_VOLUME_DOWN
-	/* 0x0af */ { kKeyNone },		// VK_VOLUME_UP
-	/* 0x0b0 */ { kKeyNone },		// VK_MEDIA_NEXT_TRACK
-	/* 0x0b1 */ { kKeyNone },		// VK_MEDIA_PREV_TRACK
-	/* 0x0b2 */ { kKeyNone },		// VK_MEDIA_STOP
-	/* 0x0b3 */ { kKeyNone },		// VK_MEDIA_PLAY_PAUSE
-	/* 0x0b4 */ { kKeyNone },		// VK_LAUNCH_MAIL
-	/* 0x0b5 */ { kKeyNone },		// VK_LAUNCH_MEDIA_SELECT
-	/* 0x0b6 */ { kKeyNone },		// VK_LAUNCH_APP1
-	/* 0x0b7 */ { kKeyNone },		// VK_LAUNCH_APP2
-	/* 0x0b8 */ { kKeyNone },		// unassigned
-	/* 0x0b9 */ { kKeyNone },		// unassigned
-	/* 0x0ba */ { kKeyNone },		// OEM specific
-	/* 0x0bb */ { kKeyNone },		// OEM specific
-	/* 0x0bc */ { kKeyNone },		// OEM specific
-	/* 0x0bd */ { kKeyNone },		// OEM specific
-	/* 0x0be */ { kKeyNone },		// OEM specific
-	/* 0x0bf */ { kKeyNone },		// OEM specific
-	/* 0x0c0 */ { kKeyNone },		// OEM specific
-	/* 0x0c1 */ { kKeyNone },		// unassigned
-	/* 0x0c2 */ { kKeyNone },		// unassigned
-	/* 0x0c3 */ { kKeyNone },		// unassigned
-	/* 0x0c4 */ { kKeyNone },		// unassigned
-	/* 0x0c5 */ { kKeyNone },		// unassigned
-	/* 0x0c6 */ { kKeyNone },		// unassigned
-	/* 0x0c7 */ { kKeyNone },		// unassigned
-	/* 0x0c8 */ { kKeyNone },		// unassigned
-	/* 0x0c9 */ { kKeyNone },		// unassigned
-	/* 0x0ca */ { kKeyNone },		// unassigned
-	/* 0x0cb */ { kKeyNone },		// unassigned
-	/* 0x0cc */ { kKeyNone },		// unassigned
-	/* 0x0cd */ { kKeyNone },		// unassigned
-	/* 0x0ce */ { kKeyNone },		// unassigned
-	/* 0x0cf */ { kKeyNone },		// unassigned
-	/* 0x0d0 */ { kKeyNone },		// unassigned
-	/* 0x0d1 */ { kKeyNone },		// unassigned
-	/* 0x0d2 */ { kKeyNone },		// unassigned
-	/* 0x0d3 */ { kKeyNone },		// unassigned
-	/* 0x0d4 */ { kKeyNone },		// unassigned
-	/* 0x0d5 */ { kKeyNone },		// unassigned
-	/* 0x0d6 */ { kKeyNone },		// unassigned
-	/* 0x0d7 */ { kKeyNone },		// unassigned
-	/* 0x0d8 */ { kKeyNone },		// unassigned
-	/* 0x0d9 */ { kKeyNone },		// unassigned
-	/* 0x0da */ { kKeyNone },		// unassigned
-	/* 0x0db */ { kKeyNone },		// OEM specific
-	/* 0x0dc */ { kKeyNone },		// OEM specific
-	/* 0x0dd */ { kKeyNone },		// OEM specific
-	/* 0x0de */ { kKeyNone },		// OEM specific
-	/* 0x0df */ { kKeyNone },		// OEM specific
-	/* 0x0e0 */ { kKeyNone },		// OEM specific
-	/* 0x0e1 */ { kKeyNone },		// OEM specific
-	/* 0x0e2 */ { kKeyNone },		// OEM specific
-	/* 0x0e3 */ { kKeyNone },		// OEM specific
-	/* 0x0e4 */ { kKeyNone },		// OEM specific
-	/* 0x0e5 */ { kKeyNone },		// unassigned
-	/* 0x0e6 */ { kKeyNone },		// OEM specific
-	/* 0x0e7 */ { kKeyNone },		// unassigned
-	/* 0x0e8 */ { kKeyNone },		// unassigned
-	/* 0x0e9 */ { kKeyNone },		// OEM specific
-	/* 0x0ea */ { kKeyNone },		// OEM specific
-	/* 0x0eb */ { kKeyNone },		// OEM specific
-	/* 0x0ec */ { kKeyNone },		// OEM specific
-	/* 0x0ed */ { kKeyNone },		// OEM specific
-	/* 0x0ee */ { kKeyNone },		// OEM specific
-	/* 0x0ef */ { kKeyNone },		// OEM specific
-	/* 0x0f0 */ { kKeyNone },		// OEM specific
-	/* 0x0f1 */ { kKeyNone },		// OEM specific
-	/* 0x0f2 */ { kKeyHiraganaKatakana },	// VK_OEM_COPY
-	/* 0x0f3 */ { kKeyZenkaku },	// VK_OEM_AUTO
-	/* 0x0f4 */ { kKeyZenkaku },	// VK_OEM_ENLW
-	/* 0x0f5 */ { kKeyNone },		// OEM specific
-	/* 0x0f6 */ { kKeyNone },		// VK_ATTN			
-	/* 0x0f7 */ { kKeyNone },		// VK_CRSEL			
-	/* 0x0f8 */ { kKeyNone },		// VK_EXSEL			
-	/* 0x0f9 */ { kKeyNone },		// VK_EREOF			
-	/* 0x0fa */ { kKeyNone },		// VK_PLAY			
-	/* 0x0fb */ { kKeyNone },		// VK_ZOOM			
-	/* 0x0fc */ { kKeyNone },		// reserved
-	/* 0x0fd */ { kKeyNone },		// VK_PA1			
-	/* 0x0fe */ { kKeyNone },		// VK_OEM_CLEAR		
-	/* 0x0ff */ { kKeyNone },		// reserved
-
-	/* 0x100 */ { kKeyNone },		// reserved
-	/* 0x101 */ { kKeyNone },		// VK_LBUTTON
-	/* 0x102 */ { kKeyNone },		// VK_RBUTTON
-	/* 0x103 */ { kKeyBreak },		// VK_CANCEL
-	/* 0x104 */ { kKeyNone },		// VK_MBUTTON
-	/* 0x105 */ { kKeyNone },		// VK_XBUTTON1
-	/* 0x106 */ { kKeyNone },		// VK_XBUTTON2
-	/* 0x107 */ { kKeyNone },		// undefined
-	/* 0x108 */ { kKeyNone },		// VK_BACK
-	/* 0x109 */ { kKeyNone },		// VK_TAB
-	/* 0x10a */ { kKeyNone },		// undefined
-	/* 0x10b */ { kKeyNone },		// undefined
-	/* 0x10c */ { kKeyClear },		// VK_CLEAR
-	/* 0x10d */ { kKeyKP_Enter },	// VK_RETURN
-	/* 0x10e */ { kKeyNone },		// undefined
-	/* 0x10f */ { kKeyNone },		// undefined
-	/* 0x110 */ { kKeyShift_R },	// VK_SHIFT
-	/* 0x111 */ { kKeyControl_R },	// VK_CONTROL
-	/* 0x112 */ { kKeyAlt_R },		// VK_MENU
-	/* 0x113 */ { kKeyNone },		// VK_PAUSE
-	/* 0x114 */ { kKeyNone },		// VK_CAPITAL
-	/* 0x115 */ { kKeyNone },		// VK_KANA			
-	/* 0x116 */ { kKeyNone },		// VK_HANGUL		
-	/* 0x117 */ { kKeyNone },		// VK_JUNJA			
-	/* 0x118 */ { kKeyNone },		// VK_FINAL			
-	/* 0x119 */ { kKeyNone },		// VK_KANJI			
-	/* 0x11a */ { kKeyNone },		// undefined
-	/* 0x11b */ { kKeyNone },		// VK_ESCAPE
-	/* 0x11c */ { kKeyNone },		// VK_CONVERT		
-	/* 0x11d */ { kKeyNone },		// VK_NONCONVERT	
-	/* 0x11e */ { kKeyNone },		// VK_ACCEPT		
-	/* 0x11f */ { kKeyNone },		// VK_MODECHANGE	
-	/* 0x120 */ { kKeyNone },		// VK_SPACE
-	/* 0x121 */ { kKeyPageUp },		// VK_PRIOR
-	/* 0x122 */ { kKeyPageDown },	// VK_NEXT
-	/* 0x123 */ { kKeyEnd },		// VK_END
-	/* 0x124 */ { kKeyHome },		// VK_HOME
-	/* 0x125 */ { kKeyLeft },		// VK_LEFT
-	/* 0x126 */ { kKeyUp },			// VK_UP
-	/* 0x127 */ { kKeyRight },		// VK_RIGHT
-	/* 0x128 */ { kKeyDown },		// VK_DOWN
-	/* 0x129 */ { kKeySelect },		// VK_SELECT
-	/* 0x12a */ { kKeyNone },		// VK_PRINT
-	/* 0x12b */ { kKeyExecute },	// VK_EXECUTE
-	/* 0x12c */ { kKeyPrint },		// VK_SNAPSHOT
-	/* 0x12d */ { kKeyInsert },		// VK_INSERT
-	/* 0x12e */ { kKeyDelete },		// VK_DELETE
-	/* 0x12f */ { kKeyHelp },		// VK_HELP
-	/* 0x130 */ { kKeyNone },		// VK_0
-	/* 0x131 */ { kKeyNone },		// VK_1
-	/* 0x132 */ { kKeyNone },		// VK_2
-	/* 0x133 */ { kKeyNone },		// VK_3
-	/* 0x134 */ { kKeyNone },		// VK_4
-	/* 0x135 */ { kKeyNone },		// VK_5
-	/* 0x136 */ { kKeyNone },		// VK_6
-	/* 0x137 */ { kKeyNone },		// VK_7
-	/* 0x138 */ { kKeyNone },		// VK_8
-	/* 0x139 */ { kKeyNone },		// VK_9
-	/* 0x13a */ { kKeyNone },		// undefined
-	/* 0x13b */ { kKeyNone },		// undefined
-	/* 0x13c */ { kKeyNone },		// undefined
-	/* 0x13d */ { kKeyNone },		// undefined
-	/* 0x13e */ { kKeyNone },		// undefined
-	/* 0x13f */ { kKeyNone },		// undefined
-	/* 0x140 */ { kKeyNone },		// undefined
-	/* 0x141 */ { kKeyNone },		// VK_A
-	/* 0x142 */ { kKeyNone },		// VK_B
-	/* 0x143 */ { kKeyNone },		// VK_C
-	/* 0x144 */ { kKeyNone },		// VK_D
-	/* 0x145 */ { kKeyNone },		// VK_E
-	/* 0x146 */ { kKeyNone },		// VK_F
-	/* 0x147 */ { kKeyNone },		// VK_G
-	/* 0x148 */ { kKeyNone },		// VK_H
-	/* 0x149 */ { kKeyNone },		// VK_I
-	/* 0x14a */ { kKeyNone },		// VK_J
-	/* 0x14b */ { kKeyNone },		// VK_K
-	/* 0x14c */ { kKeyNone },		// VK_L
-	/* 0x14d */ { kKeyNone },		// VK_M
-	/* 0x14e */ { kKeyNone },		// VK_N
-	/* 0x14f */ { kKeyNone },		// VK_O
-	/* 0x150 */ { kKeyNone },		// VK_P
-	/* 0x151 */ { kKeyNone },		// VK_Q
-	/* 0x152 */ { kKeyNone },		// VK_R
-	/* 0x153 */ { kKeyNone },		// VK_S
-	/* 0x154 */ { kKeyNone },		// VK_T
-	/* 0x155 */ { kKeyNone },		// VK_U
-	/* 0x156 */ { kKeyNone },		// VK_V
-	/* 0x157 */ { kKeyNone },		// VK_W
-	/* 0x158 */ { kKeyNone },		// VK_X
-	/* 0x159 */ { kKeyNone },		// VK_Y
-	/* 0x15a */ { kKeyNone },		// VK_Z
-	/* 0x15b */ { kKeySuper_L },	// VK_LWIN
-	/* 0x15c */ { kKeySuper_R },	// VK_RWIN
-	/* 0x15d */ { kKeyMenu },		// VK_APPS
-	/* 0x15e */ { kKeyNone },		// undefined
-	/* 0x15f */ { kKeyNone },		// VK_SLEEP
-	/* 0x160 */ { kKeyNone },		// VK_NUMPAD0
-	/* 0x161 */ { kKeyNone },		// VK_NUMPAD1
-	/* 0x162 */ { kKeyNone },		// VK_NUMPAD2
-	/* 0x163 */ { kKeyNone },		// VK_NUMPAD3
-	/* 0x164 */ { kKeyNone },		// VK_NUMPAD4
-	/* 0x165 */ { kKeyNone },		// VK_NUMPAD5
-	/* 0x166 */ { kKeyNone },		// VK_NUMPAD6
-	/* 0x167 */ { kKeyNone },		// VK_NUMPAD7
-	/* 0x168 */ { kKeyNone },		// VK_NUMPAD8
-	/* 0x169 */ { kKeyNone },		// VK_NUMPAD9
-	/* 0x16a */ { kKeyNone },		// VK_MULTIPLY
-	/* 0x16b */ { kKeyNone },		// VK_ADD
-	/* 0x16c */ { kKeyKP_Separator },// VK_SEPARATOR
-	/* 0x16d */ { kKeyNone },		// VK_SUBTRACT
-	/* 0x16e */ { kKeyNone },		// VK_DECIMAL
-	/* 0x16f */ { kKeyKP_Divide },	// VK_DIVIDE
-	/* 0x170 */ { kKeyNone },		// VK_F1
-	/* 0x171 */ { kKeyNone },		// VK_F2
-	/* 0x172 */ { kKeyNone },		// VK_F3
-	/* 0x173 */ { kKeyNone },		// VK_F4
-	/* 0x174 */ { kKeyNone },		// VK_F5
-	/* 0x175 */ { kKeyNone },		// VK_F6
-	/* 0x176 */ { kKeyNone },		// VK_F7
-	/* 0x177 */ { kKeyNone },		// VK_F8
-	/* 0x178 */ { kKeyNone },		// VK_F9
-	/* 0x179 */ { kKeyNone },		// VK_F10
-	/* 0x17a */ { kKeyNone },		// VK_F11
-	/* 0x17b */ { kKeyNone },		// VK_F12
-	/* 0x17c */ { kKeyF13 },		// VK_F13
-	/* 0x17d */ { kKeyF14 },		// VK_F14
-	/* 0x17e */ { kKeyF15 },		// VK_F15
-	/* 0x17f */ { kKeyF16 },		// VK_F16
-	/* 0x180 */ { kKeyF17 },		// VK_F17
-	/* 0x181 */ { kKeyF18 },		// VK_F18
-	/* 0x182 */ { kKeyF19 },		// VK_F19
-	/* 0x183 */ { kKeyF20 },		// VK_F20
-	/* 0x184 */ { kKeyF21 },		// VK_F21
-	/* 0x185 */ { kKeyF22 },		// VK_F22
-	/* 0x186 */ { kKeyF23 },		// VK_F23
-	/* 0x187 */ { kKeyF24 },		// VK_F24
-	/* 0x188 */ { kKeyNone },		// unassigned
-	/* 0x189 */ { kKeyNone },		// unassigned
-	/* 0x18a */ { kKeyNone },		// unassigned
-	/* 0x18b */ { kKeyNone },		// unassigned
-	/* 0x18c */ { kKeyNone },		// unassigned
-	/* 0x18d */ { kKeyNone },		// unassigned
-	/* 0x18e */ { kKeyNone },		// unassigned
-	/* 0x18f */ { kKeyNone },		// unassigned
-	/* 0x190 */ { kKeyNumLock },	// VK_NUMLOCK
-	/* 0x191 */ { kKeyNone },		// VK_SCROLL
-	/* 0x192 */ { kKeyNone },		// unassigned
-	/* 0x193 */ { kKeyNone },		// unassigned
-	/* 0x194 */ { kKeyNone },		// unassigned
-	/* 0x195 */ { kKeyNone },		// unassigned
-	/* 0x196 */ { kKeyNone },		// unassigned
-	/* 0x197 */ { kKeyNone },		// unassigned
-	/* 0x198 */ { kKeyNone },		// unassigned
-	/* 0x199 */ { kKeyNone },		// unassigned
-	/* 0x19a */ { kKeyNone },		// unassigned
-	/* 0x19b */ { kKeyNone },		// unassigned
-	/* 0x19c */ { kKeyNone },		// unassigned
-	/* 0x19d */ { kKeyNone },		// unassigned
-	/* 0x19e */ { kKeyNone },		// unassigned
-	/* 0x19f */ { kKeyNone },		// unassigned
-	/* 0x1a0 */ { kKeyShift_L },	// VK_LSHIFT
-	/* 0x1a1 */ { kKeyShift_R },	// VK_RSHIFT
-	/* 0x1a2 */ { kKeyControl_L },	// VK_LCONTROL
-	/* 0x1a3 */ { kKeyControl_R },	// VK_RCONTROL
-	/* 0x1a4 */ { kKeyAlt_L },		// VK_LMENU
-	/* 0x1a5 */ { kKeyAlt_R },		// VK_RMENU
-	/* 0x1a6 */ { kKeyWWWBack },	// VK_BROWSER_BACK
-	/* 0x1a7 */ { kKeyWWWForward },	// VK_BROWSER_FORWARD
-	/* 0x1a8 */ { kKeyWWWRefresh },	// VK_BROWSER_REFRESH
-	/* 0x1a9 */ { kKeyWWWStop },	// VK_BROWSER_STOP
-	/* 0x1aa */ { kKeyWWWSearch },	// VK_BROWSER_SEARCH
-	/* 0x1ab */ { kKeyWWWFavorites },// VK_BROWSER_FAVORITES
-	/* 0x1ac */ { kKeyWWWHome },	// VK_BROWSER_HOME
-	/* 0x1ad */ { kKeyAudioMute },	// VK_VOLUME_MUTE
-	/* 0x1ae */ { kKeyAudioDown },	// VK_VOLUME_DOWN
-	/* 0x1af */ { kKeyAudioUp },	// VK_VOLUME_UP
-	/* 0x1b0 */ { kKeyAudioNext },	// VK_MEDIA_NEXT_TRACK
-	/* 0x1b1 */ { kKeyAudioPrev },	// VK_MEDIA_PREV_TRACK
-	/* 0x1b2 */ { kKeyAudioStop },	// VK_MEDIA_STOP
-	/* 0x1b3 */ { kKeyAudioPlay },	// VK_MEDIA_PLAY_PAUSE
-	/* 0x1b4 */ { kKeyAppMail },	// VK_LAUNCH_MAIL
-	/* 0x1b5 */ { kKeyAppMedia },	// VK_LAUNCH_MEDIA_SELECT
-	/* 0x1b6 */ { kKeyAppUser1 },	// VK_LAUNCH_APP1
-	/* 0x1b7 */ { kKeyAppUser2 },	// VK_LAUNCH_APP2
-	/* 0x1b8 */ { kKeyNone },		// unassigned
-	/* 0x1b9 */ { kKeyNone },		// unassigned
-	/* 0x1ba */ { kKeyNone },		// OEM specific
-	/* 0x1bb */ { kKeyNone },		// OEM specific
-	/* 0x1bc */ { kKeyNone },		// OEM specific
-	/* 0x1bd */ { kKeyNone },		// OEM specific
-	/* 0x1be */ { kKeyNone },		// OEM specific
-	/* 0x1bf */ { kKeyNone },		// OEM specific
-	/* 0x1c0 */ { kKeyNone },		// OEM specific
-	/* 0x1c1 */ { kKeyNone },		// unassigned
-	/* 0x1c2 */ { kKeyNone },		// unassigned
-	/* 0x1c3 */ { kKeyNone },		// unassigned
-	/* 0x1c4 */ { kKeyNone },		// unassigned
-	/* 0x1c5 */ { kKeyNone },		// unassigned
-	/* 0x1c6 */ { kKeyNone },		// unassigned
-	/* 0x1c7 */ { kKeyNone },		// unassigned
-	/* 0x1c8 */ { kKeyNone },		// unassigned
-	/* 0x1c9 */ { kKeyNone },		// unassigned
-	/* 0x1ca */ { kKeyNone },		// unassigned
-	/* 0x1cb */ { kKeyNone },		// unassigned
-	/* 0x1cc */ { kKeyNone },		// unassigned
-	/* 0x1cd */ { kKeyNone },		// unassigned
-	/* 0x1ce */ { kKeyNone },		// unassigned
-	/* 0x1cf */ { kKeyNone },		// unassigned
-	/* 0x1d0 */ { kKeyNone },		// unassigned
-	/* 0x1d1 */ { kKeyNone },		// unassigned
-	/* 0x1d2 */ { kKeyNone },		// unassigned
-	/* 0x1d3 */ { kKeyNone },		// unassigned
-	/* 0x1d4 */ { kKeyNone },		// unassigned
-	/* 0x1d5 */ { kKeyNone },		// unassigned
-	/* 0x1d6 */ { kKeyNone },		// unassigned
-	/* 0x1d7 */ { kKeyNone },		// unassigned
-	/* 0x1d8 */ { kKeyNone },		// unassigned
-	/* 0x1d9 */ { kKeyNone },		// unassigned
-	/* 0x1da */ { kKeyNone },		// unassigned
-	/* 0x1db */ { kKeyNone },		// OEM specific
-	/* 0x1dc */ { kKeyNone },		// OEM specific
-	/* 0x1dd */ { kKeyNone },		// OEM specific
-	/* 0x1de */ { kKeyNone },		// OEM specific
-	/* 0x1df */ { kKeyNone },		// OEM specific
-	/* 0x1e0 */ { kKeyNone },		// OEM specific
-	/* 0x1e1 */ { kKeyNone },		// OEM specific
-	/* 0x1e2 */ { kKeyNone },		// OEM specific
-	/* 0x1e3 */ { kKeyNone },		// OEM specific
-	/* 0x1e4 */ { kKeyNone },		// OEM specific
-	/* 0x1e5 */ { kKeyNone },		// unassigned
-	/* 0x1e6 */ { kKeyNone },		// OEM specific
-	/* 0x1e7 */ { kKeyNone },		// unassigned
-	/* 0x1e8 */ { kKeyNone },		// unassigned
-	/* 0x1e9 */ { kKeyNone },		// OEM specific
-	/* 0x1ea */ { kKeyNone },		// OEM specific
-	/* 0x1eb */ { kKeyNone },		// OEM specific
-	/* 0x1ec */ { kKeyNone },		// OEM specific
-	/* 0x1ed */ { kKeyNone },		// OEM specific
-	/* 0x1ee */ { kKeyNone },		// OEM specific
-	/* 0x1ef */ { kKeyNone },		// OEM specific
-	/* 0x1f0 */ { kKeyNone },		// OEM specific
-	/* 0x1f1 */ { kKeyNone },		// OEM specific
-	/* 0x1f2 */ { kKeyNone },		// VK_OEM_COPY
-	/* 0x1f3 */ { kKeyNone },		// VK_OEM_AUTO
-	/* 0x1f4 */ { kKeyNone },		// VK_OEM_ENLW
-	/* 0x1f5 */ { kKeyNone },		// OEM specific
-	/* 0x1f6 */ { kKeyNone },		// VK_ATTN			
-	/* 0x1f7 */ { kKeyNone },		// VK_CRSEL			
-	/* 0x1f8 */ { kKeyNone },		// VK_EXSEL			
-	/* 0x1f9 */ { kKeyNone },		// VK_EREOF			
-	/* 0x1fa */ { kKeyNone },		// VK_PLAY			
-	/* 0x1fb */ { kKeyNone },		// VK_ZOOM			
-	/* 0x1fc */ { kKeyNone },		// reserved
-	/* 0x1fd */ { kKeyNone },		// VK_PA1			
-	/* 0x1fe */ { kKeyNone },		// VK_OEM_CLEAR		
-	/* 0x1ff */ { kKeyNone }		// reserved
-};
-
-struct CWin32Modifiers {
-public:
-	UINT				m_vk;
-	KeyModifierMask		m_mask;
-};
-
-static const CWin32Modifiers s_modifiers[] =
-{
-	{ VK_SHIFT,    KeyModifierShift   },
-	{ VK_LSHIFT,   KeyModifierShift   },
-	{ VK_RSHIFT,   KeyModifierShift   },
-	{ VK_CONTROL,  KeyModifierControl },
-	{ VK_LCONTROL, KeyModifierControl },
-	{ VK_RCONTROL, KeyModifierControl },
-	{ VK_MENU,     KeyModifierAlt     },
-	{ VK_LMENU,    KeyModifierAlt     },
-	{ VK_RMENU,    KeyModifierAlt     },
-	{ VK_LWIN,     KeyModifierSuper   },
-	{ VK_RWIN,     KeyModifierSuper   }
-};
-
-CMSWindowsKeyState::CMSWindowsKeyState(CMSWindowsDesks* desks,
-				void* eventTarget) :
-	m_eventTarget(eventTarget),
-	m_desks(desks),
-	m_keyLayout(GetKeyboardLayout(0)),
-	m_fixTimer(NULL),
-	m_lastDown(0),
-	m_useSavedModifiers(false),
-	m_savedModifiers(0),
-	m_originalSavedModifiers(0)
-{
-	// look up symbol that's available on winNT family but not win95
-	HMODULE userModule = GetModuleHandle("user32.dll");
-	assert(userModule);
-
-	// check to avoid compile warning
-	if (userModule) {
-		m_ToUnicodeEx = (ToUnicodeEx_t)GetProcAddress(userModule, "ToUnicodeEx");
-	}
-}
-
-CMSWindowsKeyState::~CMSWindowsKeyState()
-{
-	disable();
-}
-
-void
-CMSWindowsKeyState::disable()
-{
-	if (m_fixTimer != NULL) {
-		EVENTQUEUE->removeHandler(CEvent::kTimer, m_fixTimer);
-		EVENTQUEUE->deleteTimer(m_fixTimer);
-		m_fixTimer = NULL;
-	}
-	m_lastDown = 0;
-}
-
-KeyButton
-CMSWindowsKeyState::virtualKeyToButton(UINT virtualKey) const
-{
-	return m_virtualKeyToButton[virtualKey & 0xffu];
-}
-
-void
-CMSWindowsKeyState::setKeyLayout(HKL keyLayout)
-{
-	m_keyLayout = keyLayout;
-}
-
-bool
-CMSWindowsKeyState::testAutoRepeat(bool press, bool isRepeat, KeyButton button)
-{
-	if (!isRepeat) {
-		isRepeat = (press && m_lastDown != 0 && button == m_lastDown);
-	}
-	if (press) {
-		m_lastDown = button;
-	}
-	else {
-		m_lastDown = 0;
-	}
-	return isRepeat;
-}
-
-void
-CMSWindowsKeyState::saveModifiers()
-{
-	m_savedModifiers         = getActiveModifiers();
-	m_originalSavedModifiers = m_savedModifiers;
-}
-
-void
-CMSWindowsKeyState::useSavedModifiers(bool enable)
-{
-	if (enable != m_useSavedModifiers) {
-		m_useSavedModifiers = enable;
-		if (!m_useSavedModifiers) {
-			// transfer any modifier state changes to CKeyState's state
-			KeyModifierMask mask = m_originalSavedModifiers ^ m_savedModifiers;
-			getActiveModifiersRValue() =
-				(getActiveModifiers() & ~mask) | (m_savedModifiers & mask);
-		}
-	}
-}
-
-KeyID
-CMSWindowsKeyState::mapKeyFromEvent(WPARAM charAndVirtKey,
-				LPARAM info, KeyModifierMask* maskOut) const
-{
-	static const KeyModifierMask s_controlAlt =
-		KeyModifierControl | KeyModifierAlt;
-
-	// extract character, virtual key, and if we didn't use AltGr
-	char c       = (char)((charAndVirtKey & 0xff00u) >> 8);
-	UINT vkCode  = (charAndVirtKey & 0xffu);
-	bool noAltGr = ((charAndVirtKey & 0xff0000u) != 0);
-
-	// handle some keys via table lookup
-	KeyID id     = getKeyID(vkCode, (KeyButton)((info >> 16) & 0x1ffu));
-
-	// check if not in table;  map character to key id
-	if (id == kKeyNone && c != 0) {
-		if ((c & 0x80u) == 0) {
-			// ASCII
-			id = static_cast<KeyID>(c) & 0xffu;
-		}
-		else {
-			// character is not really ASCII.  instead it's some
-			// character in the current ANSI code page.  try to
-			// convert that to a Unicode character.  if we fail
-			// then use the single byte character as is.
-			char src = c;
-			wchar_t unicode;
-			if (MultiByteToWideChar(CP_THREAD_ACP, MB_PRECOMPOSED,
-										&src, 1, &unicode, 1) > 0) {
-				id = static_cast<KeyID>(unicode);
-			}
-			else {
-				id = static_cast<KeyID>(c) & 0xffu;
-			}
-		}
-	}
-
-	// set modifier mask
-	if (maskOut != NULL) {
-		KeyModifierMask active = getActiveModifiers();
-		if (!noAltGr && (active & s_controlAlt) == s_controlAlt) {
-			// if !noAltGr then we're only interested in matching the
-			// key, not the AltGr.  AltGr is down (i.e. control and alt
-			// are down) but we don't want the client to have to match
-			// that so we clear it.
-			active &= ~s_controlAlt;
-		}
-		*maskOut = active;
-	}
-
-	return id;
-}
-
-bool
-CMSWindowsKeyState::didGroupsChange() const
-{
-	GroupList groups;
-	return (getGroups(groups) && groups != m_groups);
-}
-
-UINT
-CMSWindowsKeyState::mapKeyToVirtualKey(KeyID key) const
-{
-	if (key == kKeyNone) {
-		return 0;
-	}
-	KeyToVKMap::const_iterator i = m_keyToVKMap.find(key);
-	if (i == m_keyToVKMap.end()) {
-		return 0;
-	}
-	else {
-		return i->second;
-	}
-}
-
-void
-CMSWindowsKeyState::onKey(KeyButton button, bool down, KeyModifierMask newState)
-{
-	CKeyState::onKey(button, down, newState);
-}
-
-void
-CMSWindowsKeyState::sendKeyEvent(void* target,
-							bool press, bool isAutoRepeat,
-							KeyID key, KeyModifierMask mask,
-							SInt32 count, KeyButton button)
-{
-	if (press || isAutoRepeat) {
-		// send key
-		if (press && !isAutoRepeat) {
-			CKeyState::sendKeyEvent(target, true, false,
-							key, mask, 1, button);
-			if (count > 0) {
-				--count;
-			}
-		}
-		if (count >= 1) {
-			CKeyState::sendKeyEvent(target, true, true,
-							key, mask, count, button);
-		}
-	}
-	else {
-		// do key up
-		CKeyState::sendKeyEvent(target, false, false, key, mask, 1, button);
-	}
-}
-
-void
-CMSWindowsKeyState::fakeKeyDown(KeyID id, KeyModifierMask mask,
-				KeyButton button)
-{
-	CKeyState::fakeKeyDown(id, mask, button);
-}
-
-void
-CMSWindowsKeyState::fakeKeyRepeat(KeyID id, KeyModifierMask mask,
-				SInt32 count, KeyButton button)
-{
-	CKeyState::fakeKeyRepeat(id, mask, count, button);
-}
-
-bool
-CMSWindowsKeyState::fakeCtrlAltDel()
-{
-		// to fake ctrl+alt+del on the NT family we broadcast a suitable
-		// hotkey to all windows on the winlogon desktop.  however, the
-		// current thread must be on that desktop to do the broadcast
-		// and we can't switch just any thread because some own windows
-		// or hooks.  so start a new thread to do the real work.
-		CThread cad(new CFunctionJob(&CMSWindowsKeyState::ctrlAltDelThread));
-		cad.wait();
-	
-	return true;
-}
-
-void
-CMSWindowsKeyState::ctrlAltDelThread(void*)
-{
-	// get the Winlogon desktop at whatever privilege we can
-	HDESK desk = OpenDesktop("Winlogon", 0, FALSE, MAXIMUM_ALLOWED);
-	if (desk != NULL) {
-		if (SetThreadDesktop(desk)) {
-			PostMessage(HWND_BROADCAST, WM_HOTKEY, 0,
-						MAKELPARAM(MOD_CONTROL | MOD_ALT, VK_DELETE));
-		}
-		else {
-			LOG((CLOG_DEBUG "can't switch to Winlogon desk: %d", GetLastError()));
-		}
-		CloseDesktop(desk);
-	}
-	else {
-		LOG((CLOG_DEBUG "can't open Winlogon desk: %d", GetLastError()));
-	}
-}
-
-KeyModifierMask
-CMSWindowsKeyState::pollActiveModifiers() const
-{
-	KeyModifierMask state = 0;
-
-	// get non-toggle modifiers from our own shadow key state
-	for (size_t i = 0; i < sizeof(s_modifiers) / sizeof(s_modifiers[0]); ++i) {
-		KeyButton button = virtualKeyToButton(s_modifiers[i].m_vk);
-		if (button != 0 && isKeyDown(button)) {
-			state |= s_modifiers[i].m_mask;
-		}
-	}
-
-	// we can get toggle modifiers from the system
-	if ((GetKeyState(VK_CAPITAL) & 0x01) != 0) {
-		state |= KeyModifierCapsLock;
-	}
-	if ((GetKeyState(VK_NUMLOCK) & 0x01) != 0) {
-		state |= KeyModifierNumLock;
-	}
-	if ((GetKeyState(VK_SCROLL) & 0x01) != 0) {
-		state |= KeyModifierScrollLock;
-	}
-
-	return state;
-}
-
-SInt32
-CMSWindowsKeyState::pollActiveGroup() const
-{
-	// determine the thread that'll receive this event
-	HWND  targetWindow = GetForegroundWindow();
-	DWORD targetThread = GetWindowThreadProcessId(targetWindow, NULL);
-
-	// get keyboard layout for the thread
-	HKL hkl            = GetKeyboardLayout(targetThread);
-
-	// get group
-	GroupMap::const_iterator i = m_groupMap.find(hkl);
-	if (i == m_groupMap.end()) {
-		LOG((CLOG_DEBUG1 "can't find keyboard layout %08x", hkl));
-		return 0;
-	}
-
-	return i->second;
-}
-
-void
-CMSWindowsKeyState::pollPressedKeys(KeyButtonSet& pressedKeys) const
-{
-	BYTE keyState[256];
-	if (!GetKeyboardState(keyState)) {
-		LOG((CLOG_ERR "GetKeyboardState returned false on pollPressedKeys"));
-		return;
-	}
-	for (KeyButton i = 1; i < 256; ++i) {
-		if ((keyState[i] & 0x80) != 0) {
-			pressedKeys.insert(i);
-		}
-	}
-}
-
-void
-CMSWindowsKeyState::getKeyMap(CKeyMap& keyMap)
-{
-	// update keyboard groups
-	if (getGroups(m_groups)) {
-		m_groupMap.clear();
-		SInt32 numGroups = (SInt32)m_groups.size();
-		for (SInt32 g = 0; g < numGroups; ++g) {
-			m_groupMap[m_groups[g]] = g;
-		}
-	}
-	HKL activeLayout = GetKeyboardLayout(0);
-
-	// clear table
-	memset(m_virtualKeyToButton, 0, sizeof(m_virtualKeyToButton));
-	m_keyToVKMap.clear();
-
-	CKeyMap::KeyItem item;
-	SInt32 numGroups = (SInt32)m_groups.size();
-	for (SInt32 g = 0; g < numGroups; ++g) {
-		item.m_group = g;
-		ActivateKeyboardLayout(m_groups[g], 0);
-
-		// clear tables
-		memset(m_buttonToVK, 0, sizeof(m_buttonToVK));
-		memset(m_buttonToNumpadVK, 0, sizeof(m_buttonToNumpadVK));
-
-		// map buttons (scancodes) to virtual keys
-		for (KeyButton i = 1; i < 256; ++i) {
-			UINT vk = MapVirtualKey(i, 1);
-			if (vk == 0) {
-				// unmapped
-				continue;
-			}
-
-			// deal with certain virtual keys specially
-			switch (vk) {
-			case VK_SHIFT:
-				if (MapVirtualKey(VK_RSHIFT, 0) == i) {
-					vk = VK_RSHIFT;
-				}
-				else {
-					vk = VK_LSHIFT;
-				}
-				break;
-
-			case VK_CONTROL:
-				vk = VK_LCONTROL;
-				break;
-
-			case VK_MENU:
-				vk = VK_LMENU;
-				break;
-
-			case VK_NUMLOCK:
-				vk = VK_PAUSE;
-				break;
-
-			case VK_NUMPAD0:
-			case VK_NUMPAD1:
-			case VK_NUMPAD2:
-			case VK_NUMPAD3:
-			case VK_NUMPAD4:
-			case VK_NUMPAD5:
-			case VK_NUMPAD6:
-			case VK_NUMPAD7:
-			case VK_NUMPAD8:
-			case VK_NUMPAD9:
-			case VK_DECIMAL:
-				// numpad keys are saved in their own table
-				m_buttonToNumpadVK[i] = vk;
-				continue;
-
-			case VK_LWIN:
-			case VK_RWIN:
-				break;
-
-			case VK_RETURN:
-			case VK_PRIOR:
-			case VK_NEXT:
-			case VK_END:
-			case VK_HOME:
-			case VK_LEFT:
-			case VK_UP:
-			case VK_RIGHT:
-			case VK_DOWN:
-			case VK_INSERT:
-			case VK_DELETE:
-				// also add extended key for these
-				m_buttonToVK[i | 0x100u] = vk;
-				break;
-			}
-
-			if (m_buttonToVK[i] == 0) {
-				m_buttonToVK[i] = vk;
-			}
-		}
-
-		// now map virtual keys to buttons.  multiple virtual keys may map
-		// to a single button.  if the virtual key matches the one in
-		// m_buttonToVK then we use the button as is.  if not then it's
-		// either a numpad key and we use the button as is or it's an
-		// extended button.
-		for (UINT i = 1; i < 255; ++i) {
-			// skip virtual keys we don't want
-			switch (i) {
-			case VK_LBUTTON:
-			case VK_RBUTTON:
-			case VK_MBUTTON:
-			case VK_XBUTTON1:
-			case VK_XBUTTON2:
-			case VK_SHIFT:
-			case VK_CONTROL:
-			case VK_MENU:
-				continue;
-			}
-
-			// get the button
-			KeyButton button = static_cast<KeyButton>(MapVirtualKey(i, 0));
-			if (button == 0) {
-				continue;
-			}
-
-			// deal with certain virtual keys specially
-			switch (i) {
-			case VK_NUMPAD0:
-			case VK_NUMPAD1:
-			case VK_NUMPAD2:
-			case VK_NUMPAD3:
-			case VK_NUMPAD4:
-			case VK_NUMPAD5:
-			case VK_NUMPAD6:
-			case VK_NUMPAD7:
-			case VK_NUMPAD8:
-			case VK_NUMPAD9:
-			case VK_DECIMAL:
-				m_buttonToNumpadVK[button] = i;
-				break;
-
-			default:
-				// add extended key if virtual keys don't match
-				if (m_buttonToVK[button] != i) {
-					m_buttonToVK[button | 0x100u] = i;
-				}
-				break;
-			}
-		}
-
-		// add alt+printscreen
-		if (m_buttonToVK[0x54u] == 0) {
-			m_buttonToVK[0x54u] = VK_SNAPSHOT;
-		}
-
-		// set virtual key to button table
-		if (GetKeyboardLayout(0) == m_groups[g]) {
-			for (KeyButton i = 0; i < 512; ++i) {
-				if (m_buttonToVK[i] != 0) {
-					if (m_virtualKeyToButton[m_buttonToVK[i]] == 0) {
-						m_virtualKeyToButton[m_buttonToVK[i]] = i;
-					}
-				}
-				if (m_buttonToNumpadVK[i] != 0) {
-					if (m_virtualKeyToButton[m_buttonToNumpadVK[i]] == 0) {
-						m_virtualKeyToButton[m_buttonToNumpadVK[i]] = i;
-					}
-				}
-			}
-		}
-
-		// add numpad keys
-		for (KeyButton i = 0; i < 512; ++i) {
-			if (m_buttonToNumpadVK[i] != 0) {
-				item.m_id        = getKeyID(m_buttonToNumpadVK[i], i);
-				item.m_button    = i;
-				item.m_required  = KeyModifierNumLock;
-				item.m_sensitive = KeyModifierNumLock | KeyModifierShift;
-				item.m_generates = 0;
-				item.m_client    = m_buttonToNumpadVK[i];
-				addKeyEntry(keyMap, item);
-			}
-		}
-
-		// add other keys
-		BYTE keys[256];
-		memset(keys, 0, sizeof(keys));
-		for (KeyButton i = 0; i < 512; ++i) {
-			if (m_buttonToVK[i] != 0) {
-				// initialize item
-				item.m_id        = getKeyID(m_buttonToVK[i], i);
-				item.m_button    = i;
-				item.m_required  = 0;
-				item.m_sensitive = 0;
-				item.m_client    = m_buttonToVK[i];
-
-				// get flags for modifier keys
-				CKeyMap::initModifierKey(item);
-
-				if (item.m_id == 0) {
-					// translate virtual key to a character with and without
-					// shift, caps lock, and AltGr.
-					struct Modifier {
-						UINT			m_vk1;
-						UINT			m_vk2;
-						BYTE			m_state;
-						KeyModifierMask	m_mask;
-					};
-					static const Modifier modifiers[] = {
-						{ VK_SHIFT,   VK_SHIFT,   0x80u, KeyModifierShift    },
-						{ VK_CAPITAL, VK_CAPITAL, 0x01u, KeyModifierCapsLock },
-						{ VK_CONTROL, VK_MENU,    0x80u, KeyModifierControl |
-														 KeyModifierAlt      }
-					};
-					static const size_t s_numModifiers =
-						sizeof(modifiers) / sizeof(modifiers[0]);
-					static const size_t s_numCombinations = 1 << s_numModifiers;
-					KeyID id[s_numCombinations];
-
-					bool anyFound = false;
-					KeyButton button = static_cast<KeyButton>(i & 0xffu);
-					for (size_t j = 0; j < s_numCombinations; ++j) {
-						for (size_t k = 0; k < s_numModifiers; ++k) {
-							//if ((j & (1 << k)) != 0) {
-							// http://msdn.microsoft.com/en-us/library/ke55d167.aspx
-							if ((j & (1i64 << k)) != 0) {
-								keys[modifiers[k].m_vk1] = modifiers[k].m_state;
-								keys[modifiers[k].m_vk2] = modifiers[k].m_state;
-							}
-							else {
-								keys[modifiers[k].m_vk1] = 0;
-								keys[modifiers[k].m_vk2] = 0;
-							}
-						}
-						id[j] = getIDForKey(item, button,
-										m_buttonToVK[i], keys, m_groups[g]);
-						if (id[j] != 0) {
-							anyFound = true;
-						}
-					}
-
-					if (anyFound) {
-						// determine what modifiers we're sensitive to.
-						// we're sensitive if the KeyID changes when the
-						// modifier does.
-						item.m_sensitive = 0;
-						for (size_t k = 0; k < s_numModifiers; ++k) {
-							for (size_t j = 0; j < s_numCombinations; ++j) {
-								//if (id[j] != id[j ^ (1u << k)]) {
-								// http://msdn.microsoft.com/en-us/library/ke55d167.aspx
-								if (id[j] != id[j ^ (1ui64 << k)]) {
-									item.m_sensitive |= modifiers[k].m_mask;
-									break;
-								}
-							}
-						}
-						
-						// save each key.  the map will automatically discard
-						// duplicates, like an unshift and shifted version of
-						// a key that's insensitive to shift.
-						for (size_t j = 0; j < s_numCombinations; ++j) {
-							item.m_id       = id[j];
-							item.m_required = 0;
-							for (size_t k = 0; k < s_numModifiers; ++k) {
-								if ((j & (1i64 << k)) != 0) {
-									item.m_required |= modifiers[k].m_mask;
-								}
-							}
-							addKeyEntry(keyMap, item);
-						}
-					}
-				}
-				else {
-					// found in table
-					switch (m_buttonToVK[i]) {
-					case VK_TAB:
-						// add kKeyLeftTab, too
-						item.m_id         = kKeyLeftTab;
-						item.m_required  |= KeyModifierShift;
-						item.m_sensitive |= KeyModifierShift;
-						addKeyEntry(keyMap, item);
-						item.m_id         = kKeyTab;
-						item.m_required  &= ~KeyModifierShift;
-						break;
-
-					case VK_CANCEL:
-						item.m_required  |= KeyModifierControl;
-						item.m_sensitive |= KeyModifierControl;
-						break;
-
-					case VK_SNAPSHOT:
-						item.m_sensitive |= KeyModifierAlt;
-						if ((i & 0x100u) == 0) {
-							// non-extended snapshot key requires alt
-							item.m_required |= KeyModifierAlt;
-						}
-						break;
-					}
-					addKeyEntry(keyMap, item);
-				}
-			}
-		}
-	}
-
-	// restore keyboard layout
-	ActivateKeyboardLayout(activeLayout, 0);
-}
-
-void
-CMSWindowsKeyState::fakeKey(const Keystroke& keystroke)
-{
-	switch (keystroke.m_type) {
-	case Keystroke::kButton: {
-		LOG((CLOG_DEBUG1 "  %03x (%08x) %s", keystroke.m_data.m_button.m_button, keystroke.m_data.m_button.m_client, keystroke.m_data.m_button.m_press ? "down" : "up"));
-		KeyButton button = keystroke.m_data.m_button.m_button;
-
-		// windows doesn't send key ups for key repeats
-		if (keystroke.m_data.m_button.m_repeat &&
-			!keystroke.m_data.m_button.m_press) {
-			LOG((CLOG_DEBUG1 "  discard key repeat release"));
-			break;
-		}
-
-		// get the virtual key for the button
-		UINT vk = keystroke.m_data.m_button.m_client;
-
-		// special handling of VK_SNAPSHOT
-		if (vk == VK_SNAPSHOT) {
-			if ((getActiveModifiers() & KeyModifierAlt) != 0) {
-				// snapshot active window
-				button = 1;
-			}
-			else {
-				// snapshot full screen
-				button = 0;
-			}
-		}
-
-		// synthesize event
-		m_desks->fakeKeyEvent(button, vk,
-								keystroke.m_data.m_button.m_press,
-								keystroke.m_data.m_button.m_repeat);
-		break;
-	}
-
-	case Keystroke::kGroup:
-		// we don't restore the group.  we'd like to but we can't be
-		// sure the restoring group change will be processed after the
-		// key events.
-		if (!keystroke.m_data.m_group.m_restore) {
-			if (keystroke.m_data.m_group.m_absolute) {
-				LOG((CLOG_DEBUG1 "  group %d", keystroke.m_data.m_group.m_group));
-				setWindowGroup(keystroke.m_data.m_group.m_group);
-			}
-			else {
-				LOG((CLOG_DEBUG1 "  group %+d", keystroke.m_data.m_group.m_group));
-				setWindowGroup(getEffectiveGroup(pollActiveGroup(),
-									keystroke.m_data.m_group.m_group));
-			}
-		}
-		break;
-	}
-}
-
-KeyModifierMask&
-CMSWindowsKeyState::getActiveModifiersRValue()
-{
-	if (m_useSavedModifiers) {
-		return m_savedModifiers;
-	}
-	else {
-		return CKeyState::getActiveModifiersRValue();
-	}
-}
-
-bool
-CMSWindowsKeyState::getGroups(GroupList& groups) const
-{
-	// get keyboard layouts
-	UInt32 newNumLayouts = GetKeyboardLayoutList(0, NULL);
-	if (newNumLayouts == 0) {
-		LOG((CLOG_DEBUG1 "can't get keyboard layouts"));
-		return false;
-	}
-	HKL* newLayouts = new HKL[newNumLayouts];
-	newNumLayouts = GetKeyboardLayoutList(newNumLayouts, newLayouts);
-	if (newNumLayouts == 0) {
-		LOG((CLOG_DEBUG1 "can't get keyboard layouts"));
-		delete[] newLayouts;
-		return false;
-	}
-
-	groups.clear();
-	groups.insert(groups.end(), newLayouts, newLayouts + newNumLayouts);
-	delete[] newLayouts;
-	return true;
-}
-
-void
-CMSWindowsKeyState::setWindowGroup(SInt32 group)
-{
-	HWND targetWindow = GetForegroundWindow();
-
-	bool sysCharSet = true;
-	// XXX -- determine if m_groups[group] can be used with the system
-	// character set.
-
-	PostMessage(targetWindow, WM_INPUTLANGCHANGEREQUEST,
-								sysCharSet ? 1 : 0, (LPARAM)m_groups[group]);
-
-	// XXX -- use a short delay to let the target window process the message
-	// before it sees the keyboard events.  i'm not sure why this is
-	// necessary since the messages should arrive in order.  if we don't
-	// delay, though, some of our keyboard events may disappear.
-	Sleep(100);
-}
-
-KeyID
-CMSWindowsKeyState::getKeyID(UINT virtualKey, KeyButton button)
-{
-	if ((button & 0x100u) != 0) {
-		virtualKey += 0x100u;
-	}
-	return s_virtualKey[virtualKey];
-}
-
-KeyID
-CMSWindowsKeyState::getIDForKey(CKeyMap::KeyItem& item,
-				KeyButton button, UINT virtualKey,
-				PBYTE keyState, HKL hkl) const
-{
-	int n;
-	KeyID id;
-	
-	
-		WCHAR unicode[2];
-		n  = m_ToUnicodeEx(virtualKey, button, keyState,
-								unicode, sizeof(unicode) / sizeof(unicode[0]),
-								0, hkl);
-		id = static_cast<KeyID>(unicode[0]);
-	
-	switch (n) {
-	case -1:
-		return CKeyMap::getDeadKey(id);
-
-	default:
-	case 0:
-		// unmapped
-		return kKeyNone;
-
-	case 1:
-		return id;
-
-	case 2:
-		// left over dead key in buffer;  oops.
-		return getIDForKey(item, button, virtualKey, keyState, hkl);
-	}
-}
-
-void
-CMSWindowsKeyState::addKeyEntry(CKeyMap& keyMap, CKeyMap::KeyItem& item)
-{
-	keyMap.addKeyEntry(item);
-	if (item.m_group == 0) {
-		m_keyToVKMap[item.m_id] = static_cast<UINT>(item.m_client);
-	}
-}
Index: lib/platform/COSXClientApp.cpp
===================================================================
--- lib/platform/COSXClientApp.cpp	(.../edge)	(revision 365)
+++ lib/platform/COSXClientApp.cpp	(.../crazy)	(revision 365)
@@ -1,24 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#include "COSXClientApp.h"
-#include "COSXAppUtil.h"
-
-COSXClientApp::COSXClientApp() : CClientApp(new COSXAppUtil())
-{
-}
-
-COSXClientApp::~COSXClientApp()
-{
-}
Index: lib/platform/COSXAppUtil.h
===================================================================
--- lib/platform/COSXAppUtil.h	(.../edge)	(revision 365)
+++ lib/platform/COSXAppUtil.h	(.../crazy)	(revision 365)
@@ -1,23 +0,0 @@
-/*
- * synergy -- mouse and keyboard sharing utility
- * Copyright (C) 2002 Chris Schoeneman
- * 
- * This package is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * found in the file COPYING that should have accompanied this file.
- * 
- * This package is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
- 
- #pragma once
- 
- #include "CAppUtil.h"
- 
- class COSXAppUtil : public CAppUtil {
- public:
-	COSXAppUtil();
-	virtual ~COSXAppUtil();
- };
\ No newline at end of file
Index: lib/platform/CXWindowsAppUtil.cpp
===================================================================
--- lib/platform/CXWindowsAppUtil.cpp	(.../edge)	(revision 365)
+++ lib/platform/CXWindowsAppUtil.cpp	(.../crazy)	(revision 365)
@@ -1,23 +0,0 @@
-/*
- * synergy -- mouse and keyboard sharing utility
- * Copyright (C) 2002 Chris Schoeneman
- * 
- * This package is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * found in the file COPYING that should have accompanied this file.
- * 
- * This package is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
- 
-#include "CXWindowsAppUtil.h"
- 
-CXWindowsAppUtil::CXWindowsAppUtil()
-{
-}
- 
-CXWindowsAppUtil::~CXWindowsAppUtil()
-{
-}
Index: lib/platform/CMSWindowsServerApp.cpp
===================================================================
--- lib/platform/CMSWindowsServerApp.cpp	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsServerApp.cpp	(.../crazy)	(revision 365)
@@ -1,24 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#include "CMSWindowsServerApp.h"
-#include "CMSWindowsAppUtil.h"
-
-CMSWindowsServerApp::CMSWindowsServerApp() : CServerApp(new CMSWindowsAppUtil())
-{
-}
-
-CMSWindowsServerApp::~CMSWindowsServerApp()
-{
-}
Index: lib/platform/CXWindowsClientApp.h
===================================================================
--- lib/platform/CXWindowsClientApp.h	(.../edge)	(revision 365)
+++ lib/platform/CXWindowsClientApp.h	(.../crazy)	(revision 365)
@@ -1,23 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#pragma once
-
-#include "CClientApp.h"
-
-class CXWindowsClientApp : public CClientApp {
-public:
-	CXWindowsClientApp();
-	virtual ~CXWindowsClientApp();
-};
Index: lib/platform/COSXServerApp.cpp
===================================================================
--- lib/platform/COSXServerApp.cpp	(.../edge)	(revision 365)
+++ lib/platform/COSXServerApp.cpp	(.../crazy)	(revision 365)
@@ -1,24 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#include "COSXServerApp.h"
-#include "COSXAppUtil.h"
-
-COSXServerApp::COSXServerApp() : CServerApp(new COSXAppUtil())
-{
-}
-
-COSXServerApp::~COSXServerApp()
-{
-}
Index: lib/platform/COSXAppUtil.cpp
===================================================================
--- lib/platform/COSXAppUtil.cpp	(.../edge)	(revision 365)
+++ lib/platform/COSXAppUtil.cpp	(.../crazy)	(revision 365)
@@ -1,23 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#include "COSXAppUtil.h"
-
-COSXAppUtil::COSXAppUtil()
-{
-}
-
-COSXAppUtil::~COSXAppUtil()
-{
-}
Index: lib/platform/COSXClientApp.h
===================================================================
--- lib/platform/COSXClientApp.h	(.../edge)	(revision 365)
+++ lib/platform/COSXClientApp.h	(.../crazy)	(revision 365)
@@ -1,23 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#pragma once
-
-#include "CClientApp.h"
-
-class COSXClientApp : public CClientApp {
-public:
-	COSXClientApp();
-	virtual ~COSXClientApp();
-};
Index: lib/platform/CXWindowsServerApp.h
===================================================================
--- lib/platform/CXWindowsServerApp.h	(.../edge)	(revision 365)
+++ lib/platform/CXWindowsServerApp.h	(.../crazy)	(revision 365)
@@ -1,23 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#pragma once
-
-#include "CServerApp.h"
-
-class CXWindowsServerApp : public CServerApp {
-public:
-	CXWindowsServerApp();
-	virtual ~CXWindowsServerApp();
-};
Index: lib/platform/CXWindowsClientApp.cpp
===================================================================
--- lib/platform/CXWindowsClientApp.cpp	(.../edge)	(revision 365)
+++ lib/platform/CXWindowsClientApp.cpp	(.../crazy)	(revision 365)
@@ -1,24 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#include "CXWindowsClientApp.h"
-#include "CXWindowsAppUtil.h"
-
-CXWindowsClientApp::CXWindowsClientApp() : CClientApp(new CXWindowsAppUtil())
-{
-}
-
-CXWindowsClientApp::~CXWindowsClientApp()
-{
-}
Index: lib/platform/CXWindowsAppUtil.h
===================================================================
--- lib/platform/CXWindowsAppUtil.h	(.../edge)	(revision 365)
+++ lib/platform/CXWindowsAppUtil.h	(.../crazy)	(revision 365)
@@ -1,24 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#pragma once
-
-#include "CApp.h"
-#include "CAppUtil.h"
-
-class CXWindowsAppUtil : public CAppUtil {
-public:
-	CXWindowsAppUtil();
-	virtual ~CXWindowsAppUtil();
-};
Index: lib/platform/COSXServerApp.h
===================================================================
--- lib/platform/COSXServerApp.h	(.../edge)	(revision 365)
+++ lib/platform/COSXServerApp.h	(.../crazy)	(revision 365)
@@ -1,23 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#pragma once
-
-#include "CServerApp.h"
-
-class COSXServerApp : public CServerApp {
-public:
-	COSXServerApp();
-	virtual ~COSXServerApp();
-};
Index: lib/platform/CXWindowsServerApp.cpp
===================================================================
--- lib/platform/CXWindowsServerApp.cpp	(.../edge)	(revision 365)
+++ lib/platform/CXWindowsServerApp.cpp	(.../crazy)	(revision 365)
@@ -1,24 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#include "CXWindowsServerApp.h"
-#include "CXWindowsAppUtil.h"
-
-CXWindowsServerApp::CXWindowsServerApp() : CServerApp(new CXWindowsAppUtil())
-{
-}
-
-CXWindowsServerApp::~CXWindowsServerApp()
-{
-}
Index: lib/platform/CMSWindowsAppUtil.cpp
===================================================================
--- lib/platform/CMSWindowsAppUtil.cpp	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsAppUtil.cpp	(.../crazy)	(revision 365)
@@ -1,180 +0,0 @@
-/*
-* synergy -- mouse and keyboard sharing utility
-* Copyright (C) 2002 Chris Schoeneman
-* 
-* This package is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License
-* found in the file COPYING that should have accompanied this file.
-* 
-* This package is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*/
-
-#include "CMSWindowsAppUtil.h"
-#include "Version.h"
-#include "CLog.h"
-#include "XArchWindows.h"
-#include "CArchMiscWindows.h"
-#include "CApp.h"
-
-#include <sstream>
-#include <iostream>
-#include <conio.h>
-
-CMSWindowsAppUtil::CMSWindowsAppUtil()
-{
-}
-
-CMSWindowsAppUtil::~CMSWindowsAppUtil()
-{
-}
-
-void
-CMSWindowsAppUtil::adoptApp(CApp* app)
-{
-	app->m_bye = &exitPause;
-	CAppUtil::adoptApp(app);
-}
-
-CString
-CMSWindowsAppUtil::getServiceArgs() const
-{
-	std::stringstream argBuf;
-	for (int i = 1; i < __argc; i++) {
-		const char* arg = __argv[i];
-
-		// ignore service setup args
-		if (_stricmp(arg, "--service") == 0) {
-			// ignore and skip the next arg also (service action)
-			i++;
-		}
-		else {
-			argBuf << " " << __argv[i];
-		}
-	}
-	return argBuf.str();
-}
-
-void
-CMSWindowsAppUtil::handleServiceArg(const char* serviceAction)
-{
-	if (_stricmp(serviceAction, "install") == 0) {
-		installService();
-	}
-	else if (_stricmp(serviceAction, "uninstall") == 0) {
-		uninstallService();
-	}
-	else if (_stricmp(serviceAction, "start") == 0) {
-		startService();
-	}
-	else if (_stricmp(serviceAction, "stop") == 0) {
-		stopService();
-	}
-	else {
-		LOG((CLOG_ERR "unknown service action: %s", serviceAction));
-		app().m_bye(kExitArgs);
-	}
-	app().m_bye(kExitSuccess);
-}
-
-void
-CMSWindowsAppUtil::installService()
-{
-	CString args = getServiceArgs();
-
-	// get the path of this program
-	char thisPath[MAX_PATH];
-	GetModuleFileName(m_instance, thisPath, MAX_PATH);
-
-	ARCH->installDaemon(
-		app().m_daemonName.c_str(), app().m_daemonInfo.c_str(), 
-		thisPath, args.c_str(), NULL, true);
-
-	LOG((CLOG_INFO "service '%s' installed with args: %s",
-		app().m_daemonName.c_str(), args != "" ? args.c_str() : "none" ));
-}
-
-void
-CMSWindowsAppUtil::uninstallService()
-{
-	ARCH->uninstallDaemon(app().m_daemonName.c_str(), true);
-	LOG((CLOG_INFO "service '%s' uninstalled", app().m_daemonName.c_str()));
-}
-
-void
-CMSWindowsAppUtil::startService()
-{
-	// open service manager
-	SC_HANDLE mgr = OpenSCManager(NULL, NULL, GENERIC_READ);
-	if (mgr == NULL) {
-		throw XArchDaemonFailed(new XArchEvalWindows());
-	}
-
-	// open the service
-	SC_HANDLE service = OpenService(
-		mgr, app().m_daemonName.c_str(), SERVICE_START);
-
-	if (service == NULL) {
-		CloseServiceHandle(mgr);
-		throw XArchDaemonFailed(new XArchEvalWindows());
-	}
-
-	// start the service
-	if (StartService(service, 0, NULL)) {
-		LOG((CLOG_INFO "service '%s' started", app().m_daemonName.c_str()));
-	}
-	else {
-		throw XArchDaemonFailed(new XArchEvalWindows());
-	}
-}
-
-void
-CMSWindowsAppUtil::stopService()
-{
-	// open service manager
-	SC_HANDLE mgr = OpenSCManager(NULL, NULL, GENERIC_READ);
-	if (mgr == NULL) {
-		throw XArchDaemonFailed(new XArchEvalWindows());
-	}
-
-	// open the service
-	SC_HANDLE service = OpenService(
-		mgr, app().m_daemonName.c_str(),
-		SERVICE_STOP | SERVICE_QUERY_STATUS);
-
-	if (service == NULL) {
-		CloseServiceHandle(mgr);
-		throw XArchDaemonFailed(new XArchEvalWindows());
-	}
-
-	// ask the service to stop, asynchronously
-	SERVICE_STATUS ss;
-	if (!ControlService(service, SERVICE_CONTROL_STOP, &ss)) {
-		DWORD dwErrCode = GetLastError(); 
-		if (dwErrCode != ERROR_SERVICE_NOT_ACTIVE) {
-			LOG((CLOG_ERR "cannot stop service '%s'", app().m_daemonName.c_str()));
-			throw XArchDaemonFailed(new XArchEvalWindows());
-		}
-	}
-
-	LOG((CLOG_INFO "service '%s' stopping asyncronously", app().m_daemonName.c_str()));
-}
-
-void
-exitPause(int code)
-{
-	CString name;
-	CArchMiscWindows::getParentProcessName(name);
-
-	// if the user did not launch from the command prompt (i.e. it was launched
-	// by double clicking, or through a debugger), allow user to read any error
-	// messages (instead of the window closing automatically).
-	if (name != "cmd.exe") {
-		std::cout << std::endl << "Press any key to exit...";
-		int c = _getch();
-	}
-
-	exit(code);
-}
Index: lib/platform/CMSWindowsScreen.h
===================================================================
--- lib/platform/CMSWindowsScreen.h	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsScreen.h	(.../crazy)	(revision 365)
@@ -25,7 +25,6 @@
 
 class CEventQueueTimer;
 class CMSWindowsDesks;
-class CMSWindowsKeyState;
 class CMSWindowsScreenSaver;
 class CThread;
 
@@ -109,9 +108,7 @@
 protected:
 	// IPlatformScreen overrides
 	virtual void		handleSystemEvent(const CEvent&, void*);
-	virtual void		updateButtons();
-	virtual IKeyState*	getKeyState() const;
-
+	
 private:
 	// initialization and shutdown operations
 	HINSTANCE			openHookLibrary(const char* name);
@@ -178,9 +175,6 @@
 	// map a button event to a press (true) or release (false)
 	bool				mapPressFromEvent(WPARAM msg, LPARAM button) const;
 
-	// job to update the key state
-	void				updateKeysCB(void*);
-
 	// determine whether the mouse is hidden by the system and force
 	// it to be displayed if user has entered this secondary screen.
 	void				forceShowCursor();
@@ -246,9 +240,6 @@
 	// timer for periodically checking stuff that requires polling
 	CEventQueueTimer*	m_fixTimer;
 
-	// the keyboard layout to use when off primary screen
-	HKL					m_keyLayout;
-
 	// screen saver stuff
 	CMSWindowsScreenSaver*	m_screensaver;
 	bool					m_screensaverNotify;
@@ -271,9 +262,6 @@
 	SetZoneFunc			m_setZone;
 	SetModeFunc			m_setMode;
 
-	// keyboard stuff
-	CMSWindowsKeyState*	m_keyState;
-
 	// hot key stuff
 	HotKeyMap			m_hotKeys;
 	HotKeyIDList		m_oldHotKeyIDs;
Index: lib/platform/CMSWindowsScreen.cpp
===================================================================
--- lib/platform/CMSWindowsScreen.cpp	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsScreen.cpp	(.../crazy)	(revision 365)
@@ -16,7 +16,6 @@
 #include "CMSWindowsClipboard.h"
 #include "CMSWindowsDesks.h"
 #include "CMSWindowsEventQueueBuffer.h"
-#include "CMSWindowsKeyState.h"
 #include "CMSWindowsScreenSaver.h"
 #include "CClipboard.h"
 #include "CKeyMap.h"
@@ -90,7 +89,6 @@
 	m_mark(0),
 	m_markReceived(0),
 	m_fixTimer(NULL),
-	m_keyLayout(NULL),
 	m_screensaver(NULL),
 	m_screensaverNotify(false),
 	m_screensaverActive(false),
@@ -104,7 +102,6 @@
 	m_setSides(NULL),
 	m_setZone(NULL),
 	m_setMode(NULL),
-	m_keyState(NULL),
 	m_hasMouse(GetSystemMetrics(SM_MOUSEPRESENT) != 0),
 	m_showingMouse(false)
 {
@@ -120,8 +117,7 @@
 		m_desks       = new CMSWindowsDesks(m_isPrimary,
 							m_hookLibrary, m_screensaver,
 							new TMethodJob<CMSWindowsScreen>(this,
-								&CMSWindowsScreen::updateKeysCB));
-		m_keyState    = new CMSWindowsKeyState(m_desks, getEventTarget());
+								NULL));
 		updateScreenShape();
 		m_class       = createWindowClass();
 		m_window      = createWindow(m_class, "Synergy");
@@ -130,7 +126,6 @@
 		LOG((CLOG_DEBUG "window is 0x%08x", m_window));
 	}
 	catch (...) {
-		delete m_keyState;
 		delete m_desks;
 		delete m_screensaver;
 		destroyWindow(m_window);
@@ -156,7 +151,6 @@
 	disable();
 	EVENTQUEUE->adoptBuffer(NULL);
 	EVENTQUEUE->removeHandler(CEvent::kSystem, IEventQueue::getSystemTarget());
-	delete m_keyState;
 	delete m_desks;
 	delete m_screensaver;
 	destroyWindow(m_window);
@@ -231,9 +225,6 @@
 							CArchMiscWindows::kDISPLAY);
 	}
 
-	// tell key state
-	m_keyState->disable();
-
 	// stop snooping the clipboard
 	ChangeClipboardChain(m_window, m_nextClipboardWindow);
 	m_nextClipboardWindow = NULL;
@@ -286,13 +277,9 @@
 	// keyboard layout for translating keys sent to clients.
 	HWND window  = GetForegroundWindow();
 	DWORD thread = GetWindowThreadProcessId(window, NULL);
-	m_keyLayout  = GetKeyboardLayout(thread);
 
-	// tell the key mapper about the keyboard layout
-	m_keyState->setKeyLayout(m_keyLayout);
-
 	// tell desk that we're leaving and tell it the keyboard layout
-	m_desks->leave(m_keyLayout);
+	m_desks->leave();
 
 	if (m_isPrimary) {
 
@@ -306,10 +293,6 @@
 		// all messages prior to now are invalid
 		nextMark();
 
-		// remember the modifier state.  this is the modifier state
-		// reflected in the internal keyboard state.
-		m_keyState->saveModifiers();
-
 		// capture events
 		m_setMode(kHOOK_RELAY_EVENTS);
 	}
@@ -522,7 +505,7 @@
 	if ((mask & KeyModifierSuper) != 0) {
 		modifiers |= MOD_WIN;
 	}
-	UINT vk = m_keyState->mapKeyToVirtualKey(key);
+	UINT vk = 0; //m_keyState->mapKeyToVirtualKey(key);
 	if (key != kKeyNone && vk == 0) {
 		// can't map key
 		LOG((CLOG_WARN "could not map hotkey id=%04x mask=%04x", key, mask));
@@ -601,9 +584,6 @@
 {
 	assert(m_isPrimary);
 
-	if (!m_isOnScreen) {
-		m_keyState->useSavedModifiers(true);
-	}
 	m_desks->fakeInputBegin();
 }
 
@@ -613,9 +593,7 @@
 	assert(m_isPrimary);
 
 	m_desks->fakeInputEnd();
-	if (!m_isOnScreen) {
-		m_keyState->useSavedModifiers(false);
-	}
+	
 }
 
 SInt32
@@ -887,26 +865,6 @@
 	}
 }
 
-void
-CMSWindowsScreen::updateButtons()
-{
-	int numButtons               = GetSystemMetrics(SM_CMOUSEBUTTONS);
-	m_buttons[kButtonNone]       = false;
-	m_buttons[kButtonLeft]       = (GetKeyState(VK_LBUTTON)  < 0);
-	m_buttons[kButtonRight]      = (GetKeyState(VK_RBUTTON)  < 0);
-	m_buttons[kButtonMiddle]     = (GetKeyState(VK_MBUTTON)  < 0);
-	m_buttons[kButtonExtra0 + 0] = (numButtons >= 4) &&
-								   (GetKeyState(VK_XBUTTON1) < 0);
-	m_buttons[kButtonExtra0 + 1] = (numButtons >= 5) &&
-								   (GetKeyState(VK_XBUTTON2) < 0);
-}
-
-IKeyState*
-CMSWindowsScreen::getKeyState() const
-{
-	return m_keyState;
-}
-
 bool
 CMSWindowsScreen::onPreDispatch(HWND hwnd,
 				UINT message, WPARAM wParam, LPARAM lParam)
@@ -991,7 +949,12 @@
 				WPARAM wParam, LPARAM lParam, LRESULT* result)
 {
 	switch (msg) {
+	case WM_QUERYENDSESSION:
+		break;
 
+	case WM_ENDSESSION:
+		break;
+
 	case WM_DRAWCLIPBOARD:
 		// first pass on the message
 		if (m_nextClipboardWindow != NULL) {
@@ -1068,17 +1031,22 @@
 	bool wasDown             = isKeyDown(button);
 	KeyModifierMask oldState = pollActiveModifiers();
 
+	
 	// check for autorepeat
-	if (m_keyState->testAutoRepeat(down, (lParam & 0x40000000u) == 1, button)) {
+	// TODO: solve this because I removed it only to compile the code after  the big cleanup
+	/*
+	if (testAutoRepeat(down, (lParam & 0x40000000u) == 1, button)) {
 		lParam |= 0x40000000u;
-	}
+	}*/
 
+	// TODO: fix me first!!
+/*
 	// if the button is zero then guess what the button should be.
 	// these are badly synthesized key events and logitech software
 	// that maps mouse buttons to keys is known to do this.
 	// alternatively, we could just throw these events out.
 	if (button == 0) {
-		button = m_keyState->virtualKeyToButton(wParam & 0xffu);
+		button = 0 //m_keyState->virtualKeyToButton(wParam & 0xffu);
 		if (button == 0) {
 			return true;
 		}
@@ -1162,7 +1130,7 @@
 			LOG((CLOG_DEBUG1 "cannot map key"));
 		}
 	}
-
+*/
 	return true;
 }
 
@@ -1232,7 +1200,7 @@
 
 	// ignore message if posted prior to last mark change
 	if (!ignore()) {
-		KeyModifierMask mask = m_keyState->getActiveModifiers();
+		KeyModifierMask mask = 0; // m_keyState->getActiveModifiers();
 		if (pressed) {
 			LOG((CLOG_DEBUG1 "event: button press button=%d", button));
 			if (button != kButtonNone) {
@@ -1516,12 +1484,7 @@
 CMSWindowsScreen::handleFixes(const CEvent&, void*)
 {
 	// fix clipboard chain
-	fixClipboardViewer();
-
-	// update keys if keyboard layouts have changed
-	if (m_keyState->didGroupsChange()) {
-		updateKeys();
-	}
+	fixClipboardViewer();	
 }
 
 void
@@ -1543,7 +1506,7 @@
 
 void
 CMSWindowsScreen::enableSpecialKeys(bool enable) const
-{
+{	
 }
 
 ButtonID
@@ -1638,39 +1601,6 @@
 }
 
 void
-CMSWindowsScreen::updateKeysCB(void*)
-{
-	// record which keys we think are down
-	bool down[IKeyState::kNumButtons];
-	bool sendFixes = (isPrimary() && !m_isOnScreen);
-	if (sendFixes) {
-		for (KeyButton i = 0; i < IKeyState::kNumButtons; ++i) {
-			down[i] = m_keyState->isKeyDown(i);
-		}
-	}
-
-	// update layouts if necessary
-	if (m_keyState->didGroupsChange()) {
-		CPlatformScreen::updateKeyMap();
-	}
-
-	// now update the keyboard state
-	CPlatformScreen::updateKeyState();
-
-	// now see which keys we thought were down but now think are up.
-	// send key releases for these keys to the active client.
-	if (sendFixes) {
-		KeyModifierMask mask = pollActiveModifiers();
-		for (KeyButton i = 0; i < IKeyState::kNumButtons; ++i) {
-			if (down[i] && !m_keyState->isKeyDown(i)) {
-				m_keyState->sendKeyEvent(getEventTarget(),
-							false, false, kKeyNone, mask, 1, i);
-			}
-		}
-	}
-}
-
-void
 CMSWindowsScreen::forceShowCursor()
 {
 	// check for mouse
@@ -1711,12 +1641,6 @@
 	// turn on MouseKeys
 	m_mouseKeys.dwFlags = MKF_AVAILABLE | MKF_MOUSEKEYSON;
 
-	// make sure MouseKeys is active in whatever state the NumLock is
-	// not currently in.
-	if ((m_keyState->getActiveModifiers() & KeyModifierNumLock) != 0) {
-		m_mouseKeys.dwFlags |= MKF_REPLACENUMBERS;
-	}
-
 	// update MouseKeys
 	if (oldFlags != m_mouseKeys.dwFlags) {
 		SystemParametersInfo(SPI_SETMOUSEKEYS,
Index: lib/platform/CMSWindowsDesks.h
===================================================================
--- lib/platform/CMSWindowsDesks.h	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsDesks.h	(.../crazy)	(revision 365)
@@ -91,7 +91,7 @@
 	/*!
 	Prepares a desk for when the cursor leaves it.
 	*/
-	void				leave(HKL keyLayout);
+	void				leave();
 
 	//! Notify of options changes
 	/*!
Index: lib/platform/CMSWindowsDesks.cpp
===================================================================
--- lib/platform/CMSWindowsDesks.cpp	(.../edge)	(revision 365)
+++ lib/platform/CMSWindowsDesks.cpp	(.../crazy)	(revision 365)
@@ -163,9 +163,9 @@
 }
 
 void
-CMSWindowsDesks::leave(HKL keyLayout)
+CMSWindowsDesks::leave()
 {
-	sendMessage(SYNERGY_MSG_LEAVE, (WPARAM)keyLayout, 0);
+	sendMessage(SYNERGY_MSG_LEAVE, (WPARAM)0, 0);
 }
 
 void
@@ -240,8 +240,10 @@
 				KeyButton button, UINT virtualKey,
 				bool press, bool /*isAutoRepeat*/) const
 {
-	
+	// sorin: we rely only on scan codes for i18n compatibility
+	 virtualKey = MapVirtualKey(button, MAPVK_VSC_TO_VK_EX);
 
+
 	// synthesize event
 	DWORD flags = 0;
 	if (((button & 0x100u) != 0)) {
@@ -250,6 +252,10 @@
 	if (!press) {
 		flags |= KEYEVENTF_KEYUP;
 	}
+
+	((CLOG_DEBUG1 "### SYNERGY_MSG_FAKE_KEY: vVk=%02x bScan=%02x dwFlags=%04x ", flags,
+		MAKEWORD(static_cast<BYTE>(button & 0xffu),
+		static_cast<BYTE>(virtualKey & 0xffu))));
 	sendMessage(SYNERGY_MSG_FAKE_KEY, flags,
 							MAKEWORD(static_cast<BYTE>(button & 0xffu),
 								static_cast<BYTE>(virtualKey & 0xffu)));
@@ -740,6 +746,7 @@
 			break;
 
 		case SYNERGY_MSG_FAKE_KEY:
+			((CLOG_DEBUG1 "### keybd_event: vVk=%02x bScan=%02x dwFlags=%04x ", HIBYTE(msg.lParam), LOBYTE(msg.lParam), (DWORD)msg.wParam));
 			keybd_event(HIBYTE(msg.lParam), LOBYTE(msg.lParam), (DWORD)msg.wParam, 0);
 			break;
 
Index: lib/common/common.h
===================================================================
--- lib/common/common.h	(.../edge)	(revision 365)
+++ lib/common/common.h	(.../crazy)	(revision 365)
@@ -133,15 +133,6 @@
 // define NULL
 #include <stddef.h>
 
-// we don't want to use NULL since it's old and nasty, so replace any
-// usages with nullptr (warning: this could break many things).
-// if not c++0x yet, future proof code by allowing use of nullptr
-#ifdef nullptr
-#define NULL nullptr
-#else
-#define nullptr NULL
-#endif
-
 // make assert available since we use it a lot
 #include <assert.h>
 #include <stdlib.h>
Index: lib/base/LogOutputters.cpp
===================================================================
--- lib/base/LogOutputters.cpp	(.../edge)	(revision 365)
+++ lib/base/LogOutputters.cpp	(.../crazy)	(revision 365)
@@ -90,10 +90,11 @@
 bool
 CConsoleLogOutputter::write(ELevel level, const char* msg)
 {
-	// we want to ignore messages above CLOG->getConsoleMaxLevel(), since
+	// we want to ignore messages above DEBUG (i.e. DEBUG1, DEBUG2, etc), since
 	// the console can use a lot of CPU time to display messages, and on windows
-	// this is done on the same thread.
-	if (level <= CLOG->getConsoleMaxLevel()) {
+	// this is done on the same thread. the user should be advised to use file
+	// logging if level is above DEBUG
+	if (level <= CLog::kDEBUG1) {
 		ARCH->writeConsole(msg);
 	}
 	return true;
Index: lib/base/CLog.cpp
===================================================================
--- lib/base/CLog.cpp	(.../edge)	(revision 365)
+++ lib/base/CLog.cpp	(.../crazy)	(revision 365)
@@ -103,18 +103,6 @@
   return s_log;
 }
 
-const char*
-CLog::getFilterName() const
-{
-	return getFilterName(getFilter());
-}
-
-const char*
-CLog::getFilterName(int level) const
-{
-	return g_priority[level];
-}
-
 void
 CLog::print(const char* file, int line, const char* fmt, ...)
 {
Index: lib/base/TMethodJob.h
===================================================================
--- lib/base/TMethodJob.h	(.../edge)	(revision 365)
+++ lib/base/TMethodJob.h	(.../crazy)	(revision 365)
@@ -59,7 +59,7 @@
 void
 TMethodJob<T>::run()
 {
-	if (m_object != NULL) {
+	if (m_object != NULL && m_arg !=NULL) {
 		(m_object->*m_method)(m_arg);
 	}
 }
Index: lib/base/CLog.h
===================================================================
--- lib/base/CLog.h	(.../edge)	(revision 365)
+++ lib/base/CLog.h	(.../crazy)	(revision 365)
@@ -119,17 +119,9 @@
 	//! Get the minimum priority level.
 	int					getFilter() const;
 
-	//! Get the filter name of the current filter level.
-	const char*			getFilterName() const;
-
-	//! Get the filter name of a specified filter level.
-	const char*			getFilterName(int level) const;
-
 	//! Get the singleton instance of the log
 	static CLog*		getInstance();
 
-	//! Get the console filter level (messages above this are not sent to console).
-	int					getConsoleMaxLevel() const { return kDEBUG1; }
 	//@}
 
 private:
Index: lib/client/CServerProxy.cpp
===================================================================
--- lib/client/CServerProxy.cpp	(.../edge)	(revision 365)
+++ lib/client/CServerProxy.cpp	(.../crazy)	(revision 365)
@@ -413,7 +413,7 @@
 		id2  = kKeyModifierIDAlt;
 		side = 1;
 		break;
-
+/*
 	case kKeyMeta_L:
 		id2  = kKeyModifierIDMeta;
 		side = 0;
@@ -422,7 +422,7 @@
 	case kKeyMeta_R:
 		id2  = kKeyModifierIDMeta;
 		side = 1;
-		break;
+		break;*/
 
 	case kKeySuper_L:
 		id2  = kKeyModifierIDSuper;
Index: bin/synrgyhk.vcproj
===================================================================
--- bin/synrgyhk.vcproj	(.../edge)	(revision 0)
+++ bin/synrgyhk.vcproj	(.../crazy)	(revision 365)
@@ -0,0 +1,317 @@
+<?xml version="1.0" encoding = "Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9.00"
+	Name="synrgyhk"
+	ProjectGUID="{9FEF38F3-EFF1-4562-8F05-25FC2B216211}"
+	Keyword="Win32Proj">
+	<Platforms>
+		<Platform
+			Name="Win32"/>
+	</Platforms>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="Debug"
+			IntermediateDirectory="synrgyhk.dir\Debug"
+			ConfigurationType="2"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000 /analyze /MP"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				BasicRuntimeChecks="3"
+				BrowseInformation="1"
+				CompileAs="2"
+				DebugInformationFormat="3"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="0"
+				Optimization="0"
+				RuntimeLibrary="3"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;,synrgyhk_EXPORTS"
+				AssemblerListingLocation="Debug"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\Debug/synrgyhk.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;,synrgyhk_EXPORTS"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;,synrgyhk_EXPORTS"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86 /debug"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\Debug\synrgyhk.dll"
+				Version="0.0"
+				LinkIncremental="2"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\Debug\synrgyhk.pdb"
+				GenerateDebugInformation="TRUE"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\Debug\synrgyhk.lib"/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="Release"
+			IntermediateDirectory="synrgyhk.dir\Release"
+			ConfigurationType="2"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="2"
+				Optimization="2"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;,synrgyhk_EXPORTS"
+				AssemblerListingLocation="Release"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\Release/synrgyhk.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;,synrgyhk_EXPORTS"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;,synrgyhk_EXPORTS"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\Release\synrgyhk.dll"
+				Version="0.0"
+				LinkIncremental="1"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\Release\synrgyhk.pdb"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\Release\synrgyhk.lib"/>
+		</Configuration>
+		<Configuration
+			Name="MinSizeRel|Win32"
+			OutputDirectory="MinSizeRel"
+			IntermediateDirectory="synrgyhk.dir\MinSizeRel"
+			ConfigurationType="2"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="1"
+				Optimization="1"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;,synrgyhk_EXPORTS"
+				AssemblerListingLocation="MinSizeRel"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel/synrgyhk.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;,synrgyhk_EXPORTS"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;,synrgyhk_EXPORTS"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel\synrgyhk.dll"
+				Version="0.0"
+				LinkIncremental="1"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel\synrgyhk.pdb"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel\synrgyhk.lib"/>
+		</Configuration>
+		<Configuration
+			Name="RelWithDebInfo|Win32"
+			OutputDirectory="RelWithDebInfo"
+			IntermediateDirectory="synrgyhk.dir\RelWithDebInfo"
+			ConfigurationType="2"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				DebugInformationFormat="3"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="1"
+				Optimization="2"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;,synrgyhk_EXPORTS"
+				AssemblerListingLocation="RelWithDebInfo"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo/synrgyhk.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;,synrgyhk_EXPORTS"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;,synrgyhk_EXPORTS"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86 /debug"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo\synrgyhk.dll"
+				Version="0.0"
+				LinkIncremental="2"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo\synrgyhk.pdb"
+				GenerateDebugInformation="TRUE"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo\synrgyhk.lib"/>
+		</Configuration>
+	</Configurations>
+	<Files>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\CMakeLists.txt">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+			</File>
+		<Filter
+			Name="Source Files"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CSynergyHook.cpp">
+			</File>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CSynergyHook.h">
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
Index: bin/synergy.vcproj
===================================================================
--- bin/synergy.vcproj	(.../edge)	(revision 0)
+++ bin/synergy.vcproj	(.../crazy)	(revision 365)
@@ -0,0 +1,1174 @@
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9.00"
+	Name="synergy"
+	ProjectGUID="{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}"
+	RootNamespace="synergy"
+	Keyword="Win32Proj"
+	TargetFrameworkVersion="0"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="Debug"
+			IntermediateDirectory="synergy.dir\Debug"
+			ConfigurationType="4"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				MkTypLibCompatible="false"
+				TargetEnvironment="1"
+				GenerateStublessProxies="true"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000 /analyze /MP"
+				Optimization="0"
+				InlineFunctionExpansion="0"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				ExceptionHandling="1"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				RuntimeTypeInfo="true"
+				AssemblerListingLocation="Debug"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\Debug/synergy.pdb"
+				BrowseInformation="1"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+				CompileAs="2"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\Debug\synergy.lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="Release"
+			IntermediateDirectory="synergy.dir\Release"
+			ConfigurationType="4"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				MkTypLibCompatible="false"
+				TargetEnvironment="1"
+				GenerateStublessProxies="true"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				Optimization="2"
+				InlineFunctionExpansion="2"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				ExceptionHandling="1"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="true"
+				AssemblerListingLocation="Release"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\Release/synergy.pdb"
+				WarningLevel="3"
+				CompileAs="2"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\Release\synergy.lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="MinSizeRel|Win32"
+			OutputDirectory="MinSizeRel"
+			IntermediateDirectory="synergy.dir\MinSizeRel"
+			ConfigurationType="4"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				MkTypLibCompatible="false"
+				TargetEnvironment="1"
+				GenerateStublessProxies="true"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				Optimization="1"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				ExceptionHandling="1"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="true"
+				AssemblerListingLocation="MinSizeRel"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel/synergy.pdb"
+				WarningLevel="3"
+				CompileAs="2"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel\synergy.lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="RelWithDebInfo|Win32"
+			OutputDirectory="RelWithDebInfo"
+			IntermediateDirectory="synergy.dir\RelWithDebInfo"
+			ConfigurationType="4"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="false"
+			CharacterSet="2"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				MkTypLibCompatible="false"
+				TargetEnvironment="1"
+				GenerateStublessProxies="true"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				ExceptionHandling="1"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="true"
+				AssemblerListingLocation="RelWithDebInfo"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo/synergy.pdb"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+				CompileAs="2"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo\synergy.lib"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArch.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchConsoleStd.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchConsoleWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchDaemonNone.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchDaemonWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchFileWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchLogWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchMiscWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchMultithreadWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchNetworkWinsock.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchSleepWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchStringWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchSystemWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchTaskBarWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchTimeWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CBaseClientProxy.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\client\CClient.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientListener.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxy.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxy1_0.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxy1_1.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxy1_2.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxy1_3.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxyUnknown.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CClipboard.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\mt\CCondVar.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CConfig.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CEvent.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CEventQueue.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CFunctionEventJob.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CFunctionJob.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CInputFilter.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CKeyMap.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\mt\CLock.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CLog.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboard.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboardAnyTextConverter.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboardBitmapConverter.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboardHTMLConverter.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboardTextConverter.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboardUTF16Converter.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsDesks.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsEventQueueBuffer.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsScreen.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsScreenSaver.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsUtil.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\mt\CMutex.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\CNetworkAddress.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CPacketStreamFilter.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CPlatformScreen.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CPrimaryClient.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CProtocolUtil.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CScreen.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CServer.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\client\CServerProxy.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CSimpleEventQueueBuffer.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\CSocketMultiplexer.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CStopwatch.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\io\CStreamBuffer.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\io\CStreamFilter.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CStringUtil.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\CTCPListenSocket.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\CTCPSocket.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\CTCPSocketFactory.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\mt\CThread.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CUnicode.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\IClipboard.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\IDataSocket.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\IEventQueue.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\IKeyState.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\IListenSocket.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\IPrimaryScreen.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\IScreen.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\ISocket.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\io\IStream.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\KeyTypes.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\LogOutputters.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\ProtocolTypes.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\common\Version.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\XArch.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\XArchWindows.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\XBase.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\io\XIO.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\mt\XMT.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\XScreen.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\XSocket.cpp"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\XSynergy.cpp"
+				>
+			</File>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchConsoleStd.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchConsoleWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchDaemonWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchFileWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchLogWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchMiscWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchMultithreadWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchNetworkWinsock.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchSleepWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchStringWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchSystemWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchTaskBarWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\CArchTimeWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CBaseClientProxy.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\client\CClient.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientListener.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxy.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxy1_0.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxy1_1.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxy1_2.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxy1_3.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CClientProxyUnknown.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CClipboard.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\mt\CCondVar.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CConfig.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CEvent.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CEventQueue.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CFunctionEventJob.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CFunctionJob.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CInputFilter.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CKeyMap.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\ClipboardTypes.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\mt\CLock.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CLog.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboard.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboardAnyTextConverter.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboardBitmapConverter.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboardHTMLConverter.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboardTextConverter.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsClipboardUTF16Converter.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsDesks.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsEventQueueBuffer.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsScreen.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsScreenSaver.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\platform\CMSWindowsUtil.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\mt\CMutex.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\CNetworkAddress.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CPacketStreamFilter.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CPlatformScreen.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CPrimaryClient.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CPriorityQueue.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CProtocolUtil.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\CScreen.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\server\CServer.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\client\CServerProxy.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CSimpleEventQueueBuffer.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\CSocketMultiplexer.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CStopwatch.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\io\CStreamBuffer.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\io\CStreamFilter.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CString.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CStringUtil.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\CTCPListenSocket.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\CTCPSocket.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\CTCPSocketFactory.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\mt\CThread.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\CUnicode.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\IClient.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\IClipboard.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\IDataSocket.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\IEventJob.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\IEventQueue.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\IEventQueueBuffer.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\IJob.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\IKeyState.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\IListenSocket.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\ILogOutputter.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\IPlatformScreen.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\IPrimaryScreen.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\IScreen.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\IScreenSaver.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\ISecondaryScreen.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\ISocket.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\ISocketFactory.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\ISocketMultiplexerJob.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\io\IStream.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\io\IStreamFilterFactory.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\KeyTypes.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\LogOutputters.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\MouseTypes.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\OptionTypes.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\ProtocolTypes.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\TMethodEventJob.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\TMethodJob.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\TSocketMultiplexerMethodJob.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\common\Version.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\arch\XArchWindows.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\base\XBase.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\io\XIO.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\mt\XMT.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\XScreen.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\net\XSocket.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\synergy\XSynergy.h"
+				>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\lib\mt\XThread.h"
+				>
+			</File>
+		</Filter>
+		<File
+			RelativePath="C:\dev\synergy-plus\branches\edge\CMakeLists.txt"
+			>
+			<FileConfiguration
+				Name="Debug|Win32"
+				>
+				<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp&#x0D;&#x0A;"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"
+				/>
+			</FileConfiguration>
+			<FileConfiguration
+				Name="Release|Win32"
+				>
+				<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp&#x0D;&#x0A;"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"
+				/>
+			</FileConfiguration>
+			<FileConfiguration
+				Name="MinSizeRel|Win32"
+				>
+				<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp&#x0D;&#x0A;"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"
+				/>
+			</FileConfiguration>
+			<FileConfiguration
+				Name="RelWithDebInfo|Win32"
+				>
+				<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp&#x0D;&#x0A;"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"
+				/>
+			</FileConfiguration>
+		</File>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
Index: bin/launcher.vcproj
===================================================================
--- bin/launcher.vcproj	(.../edge)	(revision 0)
+++ bin/launcher.vcproj	(.../crazy)	(revision 365)
@@ -0,0 +1,431 @@
+<?xml version="1.0" encoding = "Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9.00"
+	Name="launcher"
+	ProjectGUID="{A5BFDBD4-7AD1-42B9-9420-C3E0B5E1705B}"
+	Keyword="Win32Proj">
+	<Platforms>
+		<Platform
+			Name="Win32"/>
+	</Platforms>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="Debug"
+			IntermediateDirectory="launcher.dir\Debug"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000 /analyze /MP"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				BasicRuntimeChecks="3"
+				BrowseInformation="1"
+				CompileAs="2"
+				DebugInformationFormat="3"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="0"
+				Optimization="0"
+				RuntimeLibrary="3"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				AssemblerListingLocation="Debug"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\Debug/launcher.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86 /debug"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  Debug\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\Debug\launcher.exe"
+				Version="0.0"
+				LinkIncremental="2"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\Debug/launcher.pdb"
+				GenerateDebugInformation="TRUE"
+				SubSystem="2"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\Debug\launcher.lib"/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="Release"
+			IntermediateDirectory="launcher.dir\Release"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="2"
+				Optimization="2"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				AssemblerListingLocation="Release"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\Release/launcher.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  Release\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\Release\launcher.exe"
+				Version="0.0"
+				LinkIncremental="1"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\Release/launcher.pdb"
+				SubSystem="2"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\Release\launcher.lib"/>
+		</Configuration>
+		<Configuration
+			Name="MinSizeRel|Win32"
+			OutputDirectory="MinSizeRel"
+			IntermediateDirectory="launcher.dir\MinSizeRel"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="1"
+				Optimization="1"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				AssemblerListingLocation="MinSizeRel"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel/launcher.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  MinSizeRel\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel\launcher.exe"
+				Version="0.0"
+				LinkIncremental="1"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel/launcher.pdb"
+				SubSystem="2"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel\launcher.lib"/>
+		</Configuration>
+		<Configuration
+			Name="RelWithDebInfo|Win32"
+			OutputDirectory="RelWithDebInfo"
+			IntermediateDirectory="launcher.dir\RelWithDebInfo"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				DebugInformationFormat="3"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="1"
+				Optimization="2"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				AssemblerListingLocation="RelWithDebInfo"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo/launcher.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86 /debug"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  RelWithDebInfo\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo\launcher.exe"
+				Version="0.0"
+				LinkIncremental="2"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo/launcher.pdb"
+				GenerateDebugInformation="TRUE"
+				SubSystem="2"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo\launcher.lib"/>
+		</Configuration>
+	</Configurations>
+	<Files>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\synergy.ico">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\CMakeLists.txt">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+			</File>
+		<Filter
+			Name="Source Files"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\launcher.rc">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/launcher/launcher.res"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/launcher/launcher.res"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/launcher/launcher.res"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/launcher/launcher.res"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CAddScreen.cpp">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CAdvancedOptions.cpp">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CAutoStart.cpp">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CGlobalOptions.cpp">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CHotkeyOptions.cpp">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CInfo.cpp">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CScreensLinks.cpp">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\LaunchUtil.cpp">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\launcher.cpp">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/launcher/launcher.obj"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/launcher/launcher.obj"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/launcher/launcher.obj"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/launcher/launcher.obj"
+					/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CAddScreen.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CAdvancedOptions.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CAutoStart.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CGlobalOptions.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CHotkeyOptions.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CInfo.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\CScreensLinks.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\LaunchUtil.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\launcher\resource.h">
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
Index: bin/synergyc.vcproj
===================================================================
--- bin/synergyc.vcproj	(.../edge)	(revision 0)
+++ bin/synergyc.vcproj	(.../crazy)	(revision 365)
@@ -0,0 +1,404 @@
+<?xml version="1.0" encoding = "Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9.00"
+	Name="synergyc"
+	ProjectGUID="{B5D482AE-C292-43FB-8E87-8A0FB443D362}"
+	Keyword="Win32Proj">
+	<Platforms>
+		<Platform
+			Name="Win32"/>
+	</Platforms>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="Debug"
+			IntermediateDirectory="synergyc.dir\Debug"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000 /analyze /MP"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				BasicRuntimeChecks="3"
+				BrowseInformation="1"
+				CompileAs="2"
+				DebugInformationFormat="3"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="0"
+				Optimization="0"
+				RuntimeLibrary="3"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				AssemblerListingLocation="Debug"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\Debug/synergyc.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86 /debug"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  Debug\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\Debug\synergyc.exe"
+				Version="0.0"
+				LinkIncremental="2"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\Debug/synergyc.pdb"
+				GenerateDebugInformation="TRUE"
+				SubSystem="1"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\Debug\synergyc.lib"/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="Release"
+			IntermediateDirectory="synergyc.dir\Release"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="2"
+				Optimization="2"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				AssemblerListingLocation="Release"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\Release/synergyc.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  Release\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\Release\synergyc.exe"
+				Version="0.0"
+				LinkIncremental="1"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\Release/synergyc.pdb"
+				SubSystem="1"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\Release\synergyc.lib"/>
+		</Configuration>
+		<Configuration
+			Name="MinSizeRel|Win32"
+			OutputDirectory="MinSizeRel"
+			IntermediateDirectory="synergyc.dir\MinSizeRel"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="1"
+				Optimization="1"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				AssemblerListingLocation="MinSizeRel"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel/synergyc.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  MinSizeRel\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel\synergyc.exe"
+				Version="0.0"
+				LinkIncremental="1"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel/synergyc.pdb"
+				SubSystem="1"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel\synergyc.lib"/>
+		</Configuration>
+		<Configuration
+			Name="RelWithDebInfo|Win32"
+			OutputDirectory="RelWithDebInfo"
+			IntermediateDirectory="synergyc.dir\RelWithDebInfo"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				DebugInformationFormat="3"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="1"
+				Optimization="2"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				AssemblerListingLocation="RelWithDebInfo"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo/synergyc.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86 /debug"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  RelWithDebInfo\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo\synergyc.exe"
+				Version="0.0"
+				LinkIncremental="2"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo/synergyc.pdb"
+				GenerateDebugInformation="TRUE"
+				SubSystem="1"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo\synergyc.lib"/>
+		</Configuration>
+	</Configurations>
+	<Files>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergyc\synergyc.ico">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergyc\tb_error.ico">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergyc\tb_idle.ico">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergyc\tb_run.ico">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergyc\tb_wait.ico">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\CMakeLists.txt">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+			</File>
+		<Filter
+			Name="Source Files"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergyc\CClientTaskBarReceiver.cpp">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergyc\synergyc.cpp">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergyc/synergyc.obj"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergyc/synergyc.obj"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergyc/synergyc.obj"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergyc/synergyc.obj"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergyc\synergyc.rc">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergyc/synergyc.res"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergyc/synergyc.res"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergyc/synergyc.res"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergyc/synergyc.res"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergyc\CMSWindowsClientTaskBarReceiver.cpp">
+			</File>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergyc\CMSWindowsClientTaskBarReceiver.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergyc\resource.h">
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
Index: bin/synergys.vcproj
===================================================================
--- bin/synergys.vcproj	(.../edge)	(revision 0)
+++ bin/synergys.vcproj	(.../crazy)	(revision 365)
@@ -0,0 +1,413 @@
+<?xml version="1.0" encoding = "Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9.00"
+	Name="synergys"
+	ProjectGUID="{466F4082-8848-4836-A805-904BA577DDA8}"
+	Keyword="Win32Proj">
+	<Platforms>
+		<Platform
+			Name="Win32"/>
+	</Platforms>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="Debug"
+			IntermediateDirectory="synergys.dir\Debug"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000 /analyze /MP"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				BasicRuntimeChecks="3"
+				BrowseInformation="1"
+				CompileAs="2"
+				DebugInformationFormat="3"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="0"
+				Optimization="0"
+				RuntimeLibrary="3"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				AssemblerListingLocation="Debug"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\Debug/synergys.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_DEBUG,_BIND_TO_CURRENT_VCLIBS_VERSION=1,_SECURE_SCL=1,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86 /debug"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  Debug\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\Debug\synergys.exe"
+				Version="0.0"
+				LinkIncremental="2"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\Debug/synergys.pdb"
+				GenerateDebugInformation="TRUE"
+				SubSystem="1"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\Debug\synergys.lib"/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="Release"
+			IntermediateDirectory="synergys.dir\Release"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="2"
+				Optimization="2"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				AssemblerListingLocation="Release"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\Release/synergys.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  Release\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\Release\synergys.exe"
+				Version="0.0"
+				LinkIncremental="1"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\Release/synergys.pdb"
+				SubSystem="1"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\Release\synergys.lib"/>
+		</Configuration>
+		<Configuration
+			Name="MinSizeRel|Win32"
+			OutputDirectory="MinSizeRel"
+			IntermediateDirectory="synergys.dir\MinSizeRel"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="1"
+				Optimization="1"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				AssemblerListingLocation="MinSizeRel"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel/synergys.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  MinSizeRel\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel\synergys.exe"
+				Version="0.0"
+				LinkIncremental="1"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel/synergys.pdb"
+				SubSystem="1"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\MinSizeRel\synergys.lib"/>
+		</Configuration>
+		<Configuration
+			Name="RelWithDebInfo|Win32"
+			OutputDirectory="RelWithDebInfo"
+			IntermediateDirectory="synergys.dir\RelWithDebInfo"
+			ConfigurationType="1"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalOptions=" /Zm1000"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				CompileAs="2"
+				DebugInformationFormat="3"
+				ExceptionHandling="1"
+				InlineFunctionExpansion="1"
+				Optimization="2"
+				RuntimeLibrary="2"
+				RuntimeTypeInfo="TRUE"
+				WarningLevel="3"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				AssemblerListingLocation="RelWithDebInfo"
+				ObjectFile="$(IntDir)\"
+				ProgramDataBaseFileName="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo/synergys.pdb"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,NDEBUG,WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkLibraryDependencies="false"
+				AdditionalOptions=" /STACK:10000000 /machine:X86 /debug"
+				AdditionalDependencies="$(NOINHERIT) kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib  RelWithDebInfo\synergy.lib "
+				OutputFile="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo\synergys.exe"
+				Version="0.0"
+				LinkIncremental="2"
+				AdditionalLibraryDirectories=""
+				ProgramDataBaseFile="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo/synergys.pdb"
+				GenerateDebugInformation="TRUE"
+				SubSystem="1"
+				ImportLibrary="C:\dev\synergy-plus\branches\edge\bin\RelWithDebInfo\synergys.lib"/>
+		</Configuration>
+	</Configurations>
+	<Files>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\synergys.ico">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\tb_error.ico">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\tb_idle.ico">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\tb_run.ico">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\tb_wait.ico">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\CMakeLists.txt">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+			</File>
+		<Filter
+			Name="Source Files"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\CServerTaskBarReceiver.cpp">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\synergys.cpp">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergys/synergys.obj"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergys/synergys.obj"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergys/synergys.obj"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCLCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergys/synergys.obj"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\synergys.rc">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergys/synergys.res"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergys/synergys.res"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergys/synergys.res"
+					/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCResourceCompilerTool"
+					ObjectFile="$(IntDir)/cmd/synergys/synergys.res"
+					/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\CMSWindowsServerTaskBarReceiver.cpp">
+			</File>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\CServerTaskBarReceiver.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\CXWindowsServerTaskBarReceiver.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\resource.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\COSXServerTaskBarReceiver.h">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\cmd\synergys\CMSWindowsServerTaskBarReceiver.h">
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
Index: bin/INSTALL.vcproj
===================================================================
--- bin/INSTALL.vcproj	(.../edge)	(revision 0)
+++ bin/INSTALL.vcproj	(.../crazy)	(revision 365)
@@ -0,0 +1,268 @@
+<?xml version="1.0" encoding = "Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9.00"
+	Name="INSTALL"
+	ProjectGUID="{335FA24A-09F9-4518-AABF-D435ABBA6E48}"
+	Keyword="Win32Proj">
+	<Platforms>
+		<Platform
+			Name="Win32"/>
+	</Platforms>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="Debug"
+			IntermediateDirectory="INSTALL.dir\Debug"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				AssemblerListingLocation="Debug"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"
+CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -DBUILD_TYPE=$(OutDir) -P cmake_install.cmake"/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="Release"
+			IntermediateDirectory="INSTALL.dir\Release"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				AssemblerListingLocation="Release"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"
+CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -DBUILD_TYPE=$(OutDir) -P cmake_install.cmake"/>
+		</Configuration>
+		<Configuration
+			Name="MinSizeRel|Win32"
+			OutputDirectory="MinSizeRel"
+			IntermediateDirectory="INSTALL.dir\MinSizeRel"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				AssemblerListingLocation="MinSizeRel"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"
+CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -DBUILD_TYPE=$(OutDir) -P cmake_install.cmake"/>
+		</Configuration>
+		<Configuration
+			Name="RelWithDebInfo|Win32"
+			OutputDirectory="RelWithDebInfo"
+			IntermediateDirectory="INSTALL.dir\RelWithDebInfo"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				AssemblerListingLocation="RelWithDebInfo"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"
+CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -DBUILD_TYPE=$(OutDir) -P cmake_install.cmake"/>
+		</Configuration>
+	</Configurations>
+	<Files>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\CMakeLists.txt">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+			</File>
+		<Filter
+			Name="CMake Rules"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\INSTALL_force.rule">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=" "
+					CommandLine="cd ."
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\INSTALL_force.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\INSTALL_force"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=" "
+					CommandLine="cd ."
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\INSTALL_force.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\INSTALL_force"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=" "
+					CommandLine="cd ."
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\INSTALL_force.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\INSTALL_force"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=" "
+					CommandLine="cd ."
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\INSTALL_force.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\INSTALL_force"/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
Index: bin/ALL_BUILD.vcproj
===================================================================
--- bin/ALL_BUILD.vcproj	(.../edge)	(revision 0)
+++ bin/ALL_BUILD.vcproj	(.../crazy)	(revision 365)
@@ -0,0 +1,267 @@
+<?xml version="1.0" encoding = "Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9.00"
+	Name="ALL_BUILD"
+	ProjectGUID="{80B402D9-A223-42B4-993B-A39F59A386ED}"
+	Keyword="Win32Proj">
+	<Platforms>
+		<Platform
+			Name="Win32"/>
+	</Platforms>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="Debug"
+			IntermediateDirectory="ALL_BUILD.dir\Debug"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				AssemblerListingLocation="Debug"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="Release"
+			IntermediateDirectory="ALL_BUILD.dir\Release"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				AssemblerListingLocation="Release"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+		</Configuration>
+		<Configuration
+			Name="MinSizeRel|Win32"
+			OutputDirectory="MinSizeRel"
+			IntermediateDirectory="ALL_BUILD.dir\MinSizeRel"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				AssemblerListingLocation="MinSizeRel"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+		</Configuration>
+		<Configuration
+			Name="RelWithDebInfo|Win32"
+			OutputDirectory="RelWithDebInfo"
+			IntermediateDirectory="ALL_BUILD.dir\RelWithDebInfo"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				AssemblerListingLocation="RelWithDebInfo"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+		</Configuration>
+	</Configurations>
+	<Files>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ALL_BUILD">
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\CMakeLists.txt">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+			</File>
+		<Filter
+			Name="CMake Rules"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ALL_BUILD.rule">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Build all projects"
+					CommandLine=""
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ALL_BUILD.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ALL_BUILD"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Build all projects"
+					CommandLine=""
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ALL_BUILD.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ALL_BUILD"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Build all projects"
+					CommandLine=""
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ALL_BUILD.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ALL_BUILD"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Build all projects"
+					CommandLine=""
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ALL_BUILD.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ALL_BUILD"/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
Index: bin/synergy-plus.sln
===================================================================
--- bin/synergy-plus.sln	(.../edge)	(revision 0)
+++ bin/synergy-plus.sln	(.../crazy)	(revision 365)
@@ -0,0 +1,128 @@
+Microsoft Visual Studio Solution File, Format Version 10.00
+# Visual Studio 2008
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "ALL_BUILD", "ALL_BUILD.vcproj", "{80B402D9-A223-42B4-993B-A39F59A386ED}"
+	ProjectSection(ProjectDependencies) = postProject
+		{3A9677C4-920B-4854-8705-2CD68A9CB300} = {3A9677C4-920B-4854-8705-2CD68A9CB300}
+		{A5BFDBD4-7AD1-42B9-9420-C3E0B5E1705B} = {A5BFDBD4-7AD1-42B9-9420-C3E0B5E1705B}
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B} = {3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}
+		{B5D482AE-C292-43FB-8E87-8A0FB443D362} = {B5D482AE-C292-43FB-8E87-8A0FB443D362}
+		{466F4082-8848-4836-A805-904BA577DDA8} = {466F4082-8848-4836-A805-904BA577DDA8}
+		{9FEF38F3-EFF1-4562-8F05-25FC2B216211} = {9FEF38F3-EFF1-4562-8F05-25FC2B216211}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "INSTALL", "INSTALL.vcproj", "{335FA24A-09F9-4518-AABF-D435ABBA6E48}"
+	ProjectSection(ProjectDependencies) = postProject
+		{80B402D9-A223-42B4-993B-A39F59A386ED} = {80B402D9-A223-42B4-993B-A39F59A386ED}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "PACKAGE", "PACKAGE.vcproj", "{E0E8A096-84CF-4B73-AAB5-AB08D3721A43}"
+	ProjectSection(ProjectDependencies) = postProject
+		{80B402D9-A223-42B4-993B-A39F59A386ED} = {80B402D9-A223-42B4-993B-A39F59A386ED}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "ZERO_CHECK", "ZERO_CHECK.vcproj", "{3A9677C4-920B-4854-8705-2CD68A9CB300}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "launcher", "launcher.vcproj", "{A5BFDBD4-7AD1-42B9-9420-C3E0B5E1705B}"
+	ProjectSection(ProjectDependencies) = postProject
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B} = {3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}
+		{3A9677C4-920B-4854-8705-2CD68A9CB300} = {3A9677C4-920B-4854-8705-2CD68A9CB300}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "synergy", "synergy.vcproj", "{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}"
+	ProjectSection(ProjectDependencies) = postProject
+		{3A9677C4-920B-4854-8705-2CD68A9CB300} = {3A9677C4-920B-4854-8705-2CD68A9CB300}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "synergyc", "synergyc.vcproj", "{B5D482AE-C292-43FB-8E87-8A0FB443D362}"
+	ProjectSection(ProjectDependencies) = postProject
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B} = {3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}
+		{3A9677C4-920B-4854-8705-2CD68A9CB300} = {3A9677C4-920B-4854-8705-2CD68A9CB300}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "synergys", "synergys.vcproj", "{466F4082-8848-4836-A805-904BA577DDA8}"
+	ProjectSection(ProjectDependencies) = postProject
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B} = {3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}
+		{3A9677C4-920B-4854-8705-2CD68A9CB300} = {3A9677C4-920B-4854-8705-2CD68A9CB300}
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "synrgyhk", "synrgyhk.vcproj", "{9FEF38F3-EFF1-4562-8F05-25FC2B216211}"
+	ProjectSection(ProjectDependencies) = postProject
+		{3A9677C4-920B-4854-8705-2CD68A9CB300} = {3A9677C4-920B-4854-8705-2CD68A9CB300}
+	EndProjectSection
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Win32 = Debug|Win32
+		MinSizeRel|Win32 = MinSizeRel|Win32
+		Release|Win32 = Release|Win32
+		RelWithDebInfo|Win32 = RelWithDebInfo|Win32
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{80B402D9-A223-42B4-993B-A39F59A386ED}.Debug|Win32.ActiveCfg = Debug|Win32
+		{80B402D9-A223-42B4-993B-A39F59A386ED}.Debug|Win32.Build.0 = Debug|Win32
+		{80B402D9-A223-42B4-993B-A39F59A386ED}.MinSizeRel|Win32.ActiveCfg = MinSizeRel|Win32
+		{80B402D9-A223-42B4-993B-A39F59A386ED}.MinSizeRel|Win32.Build.0 = MinSizeRel|Win32
+		{80B402D9-A223-42B4-993B-A39F59A386ED}.Release|Win32.ActiveCfg = Release|Win32
+		{80B402D9-A223-42B4-993B-A39F59A386ED}.Release|Win32.Build.0 = Release|Win32
+		{80B402D9-A223-42B4-993B-A39F59A386ED}.RelWithDebInfo|Win32.ActiveCfg = RelWithDebInfo|Win32
+		{80B402D9-A223-42B4-993B-A39F59A386ED}.RelWithDebInfo|Win32.Build.0 = RelWithDebInfo|Win32
+		{335FA24A-09F9-4518-AABF-D435ABBA6E48}.Debug|Win32.ActiveCfg = Debug|Win32
+		{335FA24A-09F9-4518-AABF-D435ABBA6E48}.MinSizeRel|Win32.ActiveCfg = MinSizeRel|Win32
+		{335FA24A-09F9-4518-AABF-D435ABBA6E48}.Release|Win32.ActiveCfg = Release|Win32
+		{335FA24A-09F9-4518-AABF-D435ABBA6E48}.RelWithDebInfo|Win32.ActiveCfg = RelWithDebInfo|Win32
+		{E0E8A096-84CF-4B73-AAB5-AB08D3721A43}.Debug|Win32.ActiveCfg = Debug|Win32
+		{E0E8A096-84CF-4B73-AAB5-AB08D3721A43}.MinSizeRel|Win32.ActiveCfg = MinSizeRel|Win32
+		{E0E8A096-84CF-4B73-AAB5-AB08D3721A43}.Release|Win32.ActiveCfg = Release|Win32
+		{E0E8A096-84CF-4B73-AAB5-AB08D3721A43}.RelWithDebInfo|Win32.ActiveCfg = RelWithDebInfo|Win32
+		{3A9677C4-920B-4854-8705-2CD68A9CB300}.Debug|Win32.ActiveCfg = Debug|Win32
+		{3A9677C4-920B-4854-8705-2CD68A9CB300}.Debug|Win32.Build.0 = Debug|Win32
+		{3A9677C4-920B-4854-8705-2CD68A9CB300}.MinSizeRel|Win32.ActiveCfg = MinSizeRel|Win32
+		{3A9677C4-920B-4854-8705-2CD68A9CB300}.MinSizeRel|Win32.Build.0 = MinSizeRel|Win32
+		{3A9677C4-920B-4854-8705-2CD68A9CB300}.Release|Win32.ActiveCfg = Release|Win32
+		{3A9677C4-920B-4854-8705-2CD68A9CB300}.Release|Win32.Build.0 = Release|Win32
+		{3A9677C4-920B-4854-8705-2CD68A9CB300}.RelWithDebInfo|Win32.ActiveCfg = RelWithDebInfo|Win32
+		{3A9677C4-920B-4854-8705-2CD68A9CB300}.RelWithDebInfo|Win32.Build.0 = RelWithDebInfo|Win32
+		{A5BFDBD4-7AD1-42B9-9420-C3E0B5E1705B}.Debug|Win32.ActiveCfg = Debug|Win32
+		{A5BFDBD4-7AD1-42B9-9420-C3E0B5E1705B}.MinSizeRel|Win32.ActiveCfg = MinSizeRel|Win32
+		{A5BFDBD4-7AD1-42B9-9420-C3E0B5E1705B}.MinSizeRel|Win32.Build.0 = MinSizeRel|Win32
+		{A5BFDBD4-7AD1-42B9-9420-C3E0B5E1705B}.Release|Win32.ActiveCfg = Release|Win32
+		{A5BFDBD4-7AD1-42B9-9420-C3E0B5E1705B}.Release|Win32.Build.0 = Release|Win32
+		{A5BFDBD4-7AD1-42B9-9420-C3E0B5E1705B}.RelWithDebInfo|Win32.ActiveCfg = RelWithDebInfo|Win32
+		{A5BFDBD4-7AD1-42B9-9420-C3E0B5E1705B}.RelWithDebInfo|Win32.Build.0 = RelWithDebInfo|Win32
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}.Debug|Win32.ActiveCfg = Debug|Win32
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}.Debug|Win32.Build.0 = Debug|Win32
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}.MinSizeRel|Win32.ActiveCfg = MinSizeRel|Win32
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}.MinSizeRel|Win32.Build.0 = MinSizeRel|Win32
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}.Release|Win32.ActiveCfg = Release|Win32
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}.Release|Win32.Build.0 = Release|Win32
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}.RelWithDebInfo|Win32.ActiveCfg = RelWithDebInfo|Win32
+		{3AE26EE0-EC85-4688-BF03-EBB0D68DBF5B}.RelWithDebInfo|Win32.Build.0 = RelWithDebInfo|Win32
+		{B5D482AE-C292-43FB-8E87-8A0FB443D362}.Debug|Win32.ActiveCfg = Debug|Win32
+		{B5D482AE-C292-43FB-8E87-8A0FB443D362}.Debug|Win32.Build.0 = Debug|Win32
+		{B5D482AE-C292-43FB-8E87-8A0FB443D362}.MinSizeRel|Win32.ActiveCfg = MinSizeRel|Win32
+		{B5D482AE-C292-43FB-8E87-8A0FB443D362}.MinSizeRel|Win32.Build.0 = MinSizeRel|Win32
+		{B5D482AE-C292-43FB-8E87-8A0FB443D362}.Release|Win32.ActiveCfg = Release|Win32
+		{B5D482AE-C292-43FB-8E87-8A0FB443D362}.Release|Win32.Build.0 = Release|Win32
+		{B5D482AE-C292-43FB-8E87-8A0FB443D362}.RelWithDebInfo|Win32.ActiveCfg = RelWithDebInfo|Win32
+		{B5D482AE-C292-43FB-8E87-8A0FB443D362}.RelWithDebInfo|Win32.Build.0 = RelWithDebInfo|Win32
+		{466F4082-8848-4836-A805-904BA577DDA8}.Debug|Win32.ActiveCfg = Debug|Win32
+		{466F4082-8848-4836-A805-904BA577DDA8}.Debug|Win32.Build.0 = Debug|Win32
+		{466F4082-8848-4836-A805-904BA577DDA8}.MinSizeRel|Win32.ActiveCfg = MinSizeRel|Win32
+		{466F4082-8848-4836-A805-904BA577DDA8}.MinSizeRel|Win32.Build.0 = MinSizeRel|Win32
+		{466F4082-8848-4836-A805-904BA577DDA8}.Release|Win32.ActiveCfg = Release|Win32
+		{466F4082-8848-4836-A805-904BA577DDA8}.Release|Win32.Build.0 = Release|Win32
+		{466F4082-8848-4836-A805-904BA577DDA8}.RelWithDebInfo|Win32.ActiveCfg = RelWithDebInfo|Win32
+		{466F4082-8848-4836-A805-904BA577DDA8}.RelWithDebInfo|Win32.Build.0 = RelWithDebInfo|Win32
+		{9FEF38F3-EFF1-4562-8F05-25FC2B216211}.Debug|Win32.ActiveCfg = Debug|Win32
+		{9FEF38F3-EFF1-4562-8F05-25FC2B216211}.Debug|Win32.Build.0 = Debug|Win32
+		{9FEF38F3-EFF1-4562-8F05-25FC2B216211}.MinSizeRel|Win32.ActiveCfg = MinSizeRel|Win32
+		{9FEF38F3-EFF1-4562-8F05-25FC2B216211}.MinSizeRel|Win32.Build.0 = MinSizeRel|Win32
+		{9FEF38F3-EFF1-4562-8F05-25FC2B216211}.Release|Win32.ActiveCfg = Release|Win32
+		{9FEF38F3-EFF1-4562-8F05-25FC2B216211}.Release|Win32.Build.0 = Release|Win32
+		{9FEF38F3-EFF1-4562-8F05-25FC2B216211}.RelWithDebInfo|Win32.ActiveCfg = RelWithDebInfo|Win32
+		{9FEF38F3-EFF1-4562-8F05-25FC2B216211}.RelWithDebInfo|Win32.Build.0 = RelWithDebInfo|Win32
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+EndGlobal
Index: bin/PACKAGE.vcproj
===================================================================
--- bin/PACKAGE.vcproj	(.../edge)	(revision 0)
+++ bin/PACKAGE.vcproj	(.../crazy)	(revision 365)
@@ -0,0 +1,268 @@
+<?xml version="1.0" encoding = "Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9.00"
+	Name="PACKAGE"
+	ProjectGUID="{E0E8A096-84CF-4B73-AAB5-AB08D3721A43}"
+	Keyword="Win32Proj">
+	<Platforms>
+		<Platform
+			Name="Win32"/>
+	</Platforms>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="Debug"
+			IntermediateDirectory="PACKAGE.dir\Debug"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				AssemblerListingLocation="Debug"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"
+CommandLine="cd .&#x0D;&#x0A;C:&#x0D;&#x0A;&quot;C:\Program Files (x86)\CMake 2.6\bin\cpack.exe&quot; -C $(OutDir) --config ./CPackConfig.cmake"/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="Release"
+			IntermediateDirectory="PACKAGE.dir\Release"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				AssemblerListingLocation="Release"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"
+CommandLine="cd .&#x0D;&#x0A;C:&#x0D;&#x0A;&quot;C:\Program Files (x86)\CMake 2.6\bin\cpack.exe&quot; -C $(OutDir) --config ./CPackConfig.cmake"/>
+		</Configuration>
+		<Configuration
+			Name="MinSizeRel|Win32"
+			OutputDirectory="MinSizeRel"
+			IntermediateDirectory="PACKAGE.dir\MinSizeRel"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				AssemblerListingLocation="MinSizeRel"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"
+CommandLine="cd .&#x0D;&#x0A;C:&#x0D;&#x0A;&quot;C:\Program Files (x86)\CMake 2.6\bin\cpack.exe&quot; -C $(OutDir) --config ./CPackConfig.cmake"/>
+		</Configuration>
+		<Configuration
+			Name="RelWithDebInfo|Win32"
+			OutputDirectory="RelWithDebInfo"
+			IntermediateDirectory="PACKAGE.dir\RelWithDebInfo"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				AssemblerListingLocation="RelWithDebInfo"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"
+CommandLine="cd .&#x0D;&#x0A;C:&#x0D;&#x0A;&quot;C:\Program Files (x86)\CMake 2.6\bin\cpack.exe&quot; -C $(OutDir) --config ./CPackConfig.cmake"/>
+		</Configuration>
+	</Configurations>
+	<Files>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\CMakeLists.txt">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Building Custom Rule C:/dev/synergy-plus/branches/edge/CMakeLists.txt"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-file CMakeFiles/generate.stamp"
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+			</File>
+		<Filter
+			Name="CMake Rules"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\PACKAGE_force.rule">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=" "
+					CommandLine="cd ."
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\PACKAGE_force.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\PACKAGE_force"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=" "
+					CommandLine="cd ."
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\PACKAGE_force.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\PACKAGE_force"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=" "
+					CommandLine="cd ."
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\PACKAGE_force.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\PACKAGE_force"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=" "
+					CommandLine="cd ."
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\PACKAGE_force.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\PACKAGE_force"/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
Index: bin/ZERO_CHECK.vcproj
===================================================================
--- bin/ZERO_CHECK.vcproj	(.../edge)	(revision 0)
+++ bin/ZERO_CHECK.vcproj	(.../crazy)	(revision 365)
@@ -0,0 +1,267 @@
+<?xml version="1.0" encoding = "Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9.00"
+	Name="ZERO_CHECK"
+	ProjectGUID="{3A9677C4-920B-4854-8705-2CD68A9CB300}"
+	Keyword="Win32Proj">
+	<Platforms>
+		<Platform
+			Name="Win32"/>
+	</Platforms>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="Debug"
+			IntermediateDirectory="ZERO_CHECK.dir\Debug"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				AssemblerListingLocation="Debug"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Debug\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="Release"
+			IntermediateDirectory="ZERO_CHECK.dir\Release"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				AssemblerListingLocation="Release"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;Release\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+		</Configuration>
+		<Configuration
+			Name="MinSizeRel|Win32"
+			OutputDirectory="MinSizeRel"
+			IntermediateDirectory="ZERO_CHECK.dir\MinSizeRel"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				AssemblerListingLocation="MinSizeRel"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;MinSizeRel\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+		</Configuration>
+		<Configuration
+			Name="RelWithDebInfo|Win32"
+			OutputDirectory="RelWithDebInfo"
+			IntermediateDirectory="ZERO_CHECK.dir\RelWithDebInfo"
+			ConfigurationType="10"
+			UseOfMFC="0"
+			ATLMinimizesCRunTimeLibraryUsage="FALSE"
+			CharacterSet="2">
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				ExceptionHandling="0"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				AssemblerListingLocation="RelWithDebInfo"
+				ObjectFile="$(IntDir)\"
+/>
+			<Tool
+				Name="VCCustomBuildTool"/>
+			<Tool
+				Name="VCResourceCompilerTool"
+				AdditionalIncludeDirectories="C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir};C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\arch;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\base;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\client;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\common;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\io;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\mt;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\net;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\platform;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\server;C:\dev\synergy-plus\branches\edge\{&quot;$&quot;root_dir}\lib\synergy;C:\dev\synergy-plus\branches\edge;C:\dev\synergy-plus\branches\edge\lib;C:\dev\synergy-plus\branches\edge\lib\arch;C:\dev\synergy-plus\branches\edge\lib\base;C:\dev\synergy-plus\branches\edge\lib\client;C:\dev\synergy-plus\branches\edge\lib\common;C:\dev\synergy-plus\branches\edge\lib\io;C:\dev\synergy-plus\branches\edge\lib\mt;C:\dev\synergy-plus\branches\edge\lib\net;C:\dev\synergy-plus\branches\edge\lib\platform;C:\dev\synergy-plus\branches\edge\lib\synergy;C:\dev\synergy-plus\branches\edge\lib\server;"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"/>
+			<Tool
+				Name="VCMIDLTool"
+				PreprocessorDefinitions="WIN32,_WINDOWS,_CRT_SECURE_NO_WARNINGS,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES,VERSION=\&quot;1.3.5\&quot;,CMAKE_INTDIR=\&quot;RelWithDebInfo\&quot;"
+				MkTypLibCompatible="FALSE"
+				TargetEnvironment="1"
+				GenerateStublessProxies="TRUE"
+				TypeLibraryName="$(InputName).tlb"
+				OutputDirectory="$(IntDir)"
+				HeaderFileName="$(InputName).h"
+				DLLDataFileName=""
+				InterfaceIdentifierFileName="$(InputName)_i.c"
+				ProxyFileName="$(InputName)_p.c"/>
+			<Tool
+				Name="VCPreBuildEventTool"/>
+			<Tool
+				Name="VCPreLinkEventTool"/>
+			<Tool
+				Name="VCPostBuildEventTool"/>
+		</Configuration>
+	</Configurations>
+	<Files>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ZERO_CHECK">
+			</File>
+		<Filter
+			Name="CMake Rules"
+			Filter="">
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\generate.stamp.rule">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Checking Build System"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-list CMakeFiles/generate.stamp.list --vs-solution-file &quot;$(SolutionPath)&quot;"
+					AdditionalDependencies="&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Checking Build System"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-list CMakeFiles/generate.stamp.list --vs-solution-file &quot;$(SolutionPath)&quot;"
+					AdditionalDependencies="&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Checking Build System"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-list CMakeFiles/generate.stamp.list --vs-solution-file &quot;$(SolutionPath)&quot;"
+					AdditionalDependencies="&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description="Checking Build System"
+					CommandLine="&quot;C:\Program Files (x86)\CMake 2.6\bin\cmake.exe&quot; -HC:/dev/synergy-plus/branches/edge -BC:/dev/synergy-plus/branches/edge/bin --check-stamp-list CMakeFiles/generate.stamp.list --vs-solution-file &quot;$(SolutionPath)&quot;"
+					AdditionalDependencies="&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCXXInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeCommonLanguageInclude.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeGenericSystem.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeRCInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CMakeSystemSpecificInformation.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\CPack.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows-cl.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\Windows.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\WindowsPaths.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Modules\Platform\cl.cmake&quot;;&quot;C:\Program Files (x86)\CMake 2.6\share\cmake-2.9\Templates\CPackConfig.cmake.in&quot;;C:\dev\synergy-plus\branches\edge\CMakeLists.txt;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeCXXPlatform.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeRCCompiler.cmake;C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\CMakeSystem.cmake;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_config.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_cpack.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_launcher.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_lib.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergyc.txt;C:\dev\synergy-plus\branches\edge\cmake\CMakeLists_synergys.txt;"
+					Outputs="CMakeFiles\generate.stamp"/>
+				</FileConfiguration>
+			</File>
+			<File
+				RelativePath="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ZERO_CHECK.rule">
+				<FileConfiguration
+					Name="Debug|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=""
+					CommandLine=""
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ZERO_CHECK.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ZERO_CHECK"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="Release|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=""
+					CommandLine=""
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ZERO_CHECK.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ZERO_CHECK"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="MinSizeRel|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=""
+					CommandLine=""
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ZERO_CHECK.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ZERO_CHECK"/>
+				</FileConfiguration>
+				<FileConfiguration
+					Name="RelWithDebInfo|Win32">
+					<Tool
+					Name="VCCustomBuildTool"
+					Description=""
+					CommandLine=""
+					AdditionalDependencies="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ZERO_CHECK.rule"
+					Outputs="C:\dev\synergy-plus\branches\edge\bin\CMakeFiles\ZERO_CHECK"/>
+				</FileConfiguration>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>

Property changes on: resources
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)

Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(.../edge)	(revision 365)
+++ CMakeLists.txt	(.../crazy)	(revision 365)
@@ -55,16 +55,10 @@
 
 	# compiler: /MP - use multi cores to compile
 	# added _SECURE_SCL=1 for finding bugs with iterators - http://msdn.microsoft.com/en-us/library/aa985965.aspx
-	
-	# common args between all vs builds
-	SET(VS_ARGS "/FR /MP /D _BIND_TO_CURRENT_VCLIBS_VERSION=1 /D _SECURE_SCL=1 ${VS_ARGS_EXTRA}")
-	
-	# we may use `cmake -D VS_ARGS_EXTRA="/analyze"` for example to specify
-	# analyze mode (since we don't always want to use it; e.g. on non-team 
-	# or non-x86 compiler editions where there's no support)
-	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${VS_ARGS}")
-	SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${VS_ARGS}")
 
+	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /analyze /FR /MP /D _BIND_TO_CURRENT_VCLIBS_VERSION=1 /D _SECURE_SCL=1")
+	SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /analyze /FR /MP /D _BIND_TO_CURRENT_VCLIBS_VERSION=1 /D _SECURE_SCL=1")
+
 ENDIF(WIN32)
 
 # this line removes "/D NDEBUG" from release, we want them in order to find bugs even on release builds.

Property changes on: .
___________________________________________________________________
Deleted: bugtraq:url
   - http://code.google.com/p/synrgy-plus/issues/detail?id=%BUGID%
Deleted: svn:ignore
   - build
Release
Debug
vc90.pdb
synergy.ncb
synergy.vcproj.ADOBENET.ssbarnea.user
bin

Deleted: bugtraq:logregex
   - [Ii]ssues?:?(\s*(,|and)?\s*#\d+)+
(\d+)
Deleted: svn:mergeinfo
   Reverse-merged /trunk:r254-263

